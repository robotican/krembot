
d:/Projects/KrembotsNew/krembot/Krembot/krembot/target/1.4.4/photon/krembot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006700  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a6720  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a6724  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000cc8  20000070  20000070  00040070  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a6790  080a6790  00036790  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a67b8  080a67b8  000367b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00129d7d  00000000  00000000  000367bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00019092  00000000  00000000  00160539  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c6f4  00000000  00000000  001795cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000027e8  00000000  00000000  00195cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003b98  00000000  00000000  001984a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033a70  00000000  00000000  0019c03f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003c4b3  00000000  00000000  001cfaaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b24d3  00000000  00000000  0020bf62  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d540  00000000  00000000  002be438  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f005 ff91 	bl	80a5f58 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f005 ff96 	bl	80a5f6e <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a6724 	.word	0x080a6724
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	20000070 	.word	0x20000070
 80a0058:	20000d38 	.word	0x20000d38
 80a005c:	20000d38 	.word	0x20000d38

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fc03 	bl	80a286c <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a66b4 	.word	0x080a66b4
 80a0088:	080a6718 	.word	0x080a6718

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b952 	b.w	80a0334 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f955 	bl	80a0340 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 bba9 	b.w	80a27f0 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f002 b97b 	b.w	80a2398 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f002 b981 	b.w	80a23a8 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN8CBumpersC1Ev>:


#include "cbumpers.h"


CBumpers::CBumpers()
 80a00b6:	b510      	push	{r4, lr}
 80a00b8:	4604      	mov	r4, r0
 80a00ba:	f000 fd1b 	bl	80a0af4 <_ZN6SX1509C1Ev>
 80a00be:	2300      	movs	r3, #0
 80a00c0:	7223      	strb	r3, [r4, #8]
{

}
 80a00c2:	4620      	mov	r0, r4
 80a00c4:	bd10      	pop	{r4, pc}

080a00c6 <_ZN8CBumpers4initE7Version>:

void CBumpers::init(Version hwVersion)
{
 80a00c6:	b538      	push	{r3, r4, r5, lr}
 80a00c8:	4604      	mov	r4, r0
	version = hwVersion;

	if(version == Version::V2)
 80a00ca:	2901      	cmp	r1, #1
{

}

void CBumpers::init(Version hwVersion)
{
 80a00cc:	460d      	mov	r5, r1
	version = hwVersion;
 80a00ce:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28

	if(version == Version::V2)
 80a00d2:	d12d      	bne.n	80a0130 <_ZN8CBumpers4initE7Version+0x6a>
	{
		mux_.begin(BUMPERS_MUX_ADDR);
 80a00d4:	22ff      	movs	r2, #255	; 0xff
 80a00d6:	213e      	movs	r1, #62	; 0x3e
 80a00d8:	f000 ff11 	bl	80a0efe <_ZN6SX15095beginEhh>

		mux_.pinMode(BUMPER_FRONT, INPUT_PULLUP);
 80a00dc:	4620      	mov	r0, r4
 80a00de:	2202      	movs	r2, #2
 80a00e0:	2107      	movs	r1, #7
 80a00e2:	f000 feb2 	bl	80a0e4a <_ZN6SX15097pinModeEhh>
		mux_.pinMode(BUMPER_FRONT_RIGHT, INPUT_PULLUP);
 80a00e6:	4620      	mov	r0, r4
 80a00e8:	2202      	movs	r2, #2
 80a00ea:	2100      	movs	r1, #0
 80a00ec:	f000 fead 	bl	80a0e4a <_ZN6SX15097pinModeEhh>
		mux_.pinMode(BUMPER_RIGHT, INPUT_PULLUP);
 80a00f0:	4629      	mov	r1, r5
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	2202      	movs	r2, #2
 80a00f6:	f000 fea8 	bl	80a0e4a <_ZN6SX15097pinModeEhh>
		mux_.pinMode(BUMPER_REAR_RIGHT, INPUT_PULLUP);
 80a00fa:	2202      	movs	r2, #2
 80a00fc:	4611      	mov	r1, r2
 80a00fe:	4620      	mov	r0, r4
 80a0100:	f000 fea3 	bl	80a0e4a <_ZN6SX15097pinModeEhh>
		mux_.pinMode(BUMPER_REAR, INPUT_PULLUP);
 80a0104:	4620      	mov	r0, r4
 80a0106:	2202      	movs	r2, #2
 80a0108:	2103      	movs	r1, #3
 80a010a:	f000 fe9e 	bl	80a0e4a <_ZN6SX15097pinModeEhh>
		mux_.pinMode(BUMPER_REAR_LEFT, INPUT_PULLUP);
 80a010e:	4620      	mov	r0, r4
 80a0110:	2202      	movs	r2, #2
 80a0112:	2104      	movs	r1, #4
 80a0114:	f000 fe99 	bl	80a0e4a <_ZN6SX15097pinModeEhh>
		mux_.pinMode(BUMPER_LEFT, INPUT_PULLUP);
 80a0118:	4620      	mov	r0, r4
 80a011a:	2202      	movs	r2, #2
 80a011c:	2105      	movs	r1, #5
 80a011e:	f000 fe94 	bl	80a0e4a <_ZN6SX15097pinModeEhh>
		mux_.pinMode(BUMPER_FRONT_LEFT, INPUT_PULLUP);
 80a0122:	4620      	mov	r0, r4
	else if (version == Version::V1)
	{
		pinMode(BUMPERS_LEG, INPUT);
		EEPROM.get(2, bumps_calib_);
	}
}
 80a0124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mux_.pinMode(BUMPER_RIGHT, INPUT_PULLUP);
		mux_.pinMode(BUMPER_REAR_RIGHT, INPUT_PULLUP);
		mux_.pinMode(BUMPER_REAR, INPUT_PULLUP);
		mux_.pinMode(BUMPER_REAR_LEFT, INPUT_PULLUP);
		mux_.pinMode(BUMPER_LEFT, INPUT_PULLUP);
		mux_.pinMode(BUMPER_FRONT_LEFT, INPUT_PULLUP);
 80a0128:	2202      	movs	r2, #2
 80a012a:	2106      	movs	r1, #6
 80a012c:	f000 be8d 	b.w	80a0e4a <_ZN6SX15097pinModeEhh>
	}

	else if (version == Version::V1)
 80a0130:	b961      	cbnz	r1, 80a014c <_ZN8CBumpers4initE7Version+0x86>
	{
		pinMode(BUMPERS_LEG, INPUT);
 80a0132:	200a      	movs	r0, #10
 80a0134:	f003 f9b0 	bl	80a3498 <pinMode>
		EEPROM.get(2, bumps_calib_);
 80a0138:	f003 fa12 	bl	80a3560 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a013c:	f104 010a 	add.w	r1, r4, #10
 80a0140:	221e      	movs	r2, #30
 80a0142:	2002      	movs	r0, #2
	}
}
 80a0144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0148:	f001 bf90 	b.w	80a206c <HAL_EEPROM_Get>
 80a014c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0150 <_GLOBAL__sub_I__ZN8CBumpersC2Ev>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0150:	4b02      	ldr	r3, [pc, #8]	; (80a015c <_GLOBAL__sub_I__ZN8CBumpersC2Ev+0xc>)
 80a0152:	2201      	movs	r2, #1
 80a0154:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0156:	f001 bf29 	b.w	80a1fac <HAL_Pin_Map>
 80a015a:	bf00      	nop
 80a015c:	20000074 	.word	0x20000074

080a0160 <_ZN10MobileBaseC1Ev>:
/* Maintainer: Yair Shlomi */


#include "mobile_base.h"

MobileBase::MobileBase()
 80a0160:	b510      	push	{r4, lr}
 80a0162:	4604      	mov	r4, r0
{
  //  Serial.println("initialization engines");
  pinMode(LEFT_MOTOR_DIR_LEG1, OUTPUT);
 80a0164:	2101      	movs	r1, #1
 80a0166:	2004      	movs	r0, #4
 80a0168:	f003 f996 	bl	80a3498 <pinMode>
  pinMode(LEFT_MOTOR_DIR_LEG2, OUTPUT);
 80a016c:	2101      	movs	r1, #1
 80a016e:	2005      	movs	r0, #5
 80a0170:	f003 f992 	bl	80a3498 <pinMode>
  pinMode(LEFT_MOTOR_PWM_LEG, OUTPUT);
 80a0174:	2101      	movs	r1, #1
 80a0176:	2002      	movs	r0, #2
 80a0178:	f003 f98e 	bl	80a3498 <pinMode>

  pinMode(RIGHT_MOTOR_DIR_LEG1, OUTPUT);
 80a017c:	2101      	movs	r1, #1
 80a017e:	200d      	movs	r0, #13
 80a0180:	f003 f98a 	bl	80a3498 <pinMode>
  pinMode(RIGHT_MOTOR_DIR_LEG2, OUTPUT);
 80a0184:	2101      	movs	r1, #1
 80a0186:	200c      	movs	r0, #12
 80a0188:	f003 f986 	bl	80a3498 <pinMode>
  pinMode(RIGHT_MOTOR_PWM_LEG, OUTPUT);
 80a018c:	2101      	movs	r1, #1
 80a018e:	2003      	movs	r0, #3
 80a0190:	f003 f982 	bl	80a3498 <pinMode>

  pinMode(MOTOR_STBY_LEG, OUTPUT);
 80a0194:	2101      	movs	r1, #1
 80a0196:	200b      	movs	r0, #11
 80a0198:	f003 f97e 	bl	80a3498 <pinMode>
  digitalWrite(MOTOR_STBY_LEG, LOW);
 80a019c:	2100      	movs	r1, #0
 80a019e:	200b      	movs	r0, #11
 80a01a0:	f003 f98b 	bl	80a34ba <digitalWrite>
}
 80a01a4:	4620      	mov	r0, r4
 80a01a6:	bd10      	pop	{r4, pc}

080a01a8 <_GLOBAL__sub_I__ZN10MobileBaseC2Ev>:
 80a01a8:	f001 bf00 	b.w	80a1fac <HAL_Pin_Map>

080a01ac <_ZN10RGBASensorC1Ev>:
  Green,
  Blue,
  None
};

class RGBASensor
 80a01ac:	b510      	push	{r4, lr}
 80a01ae:	4604      	mov	r4, r0
 80a01b0:	4904      	ldr	r1, [pc, #16]	; (80a01c4 <_ZN10RGBASensorC1Ev+0x18>)
 80a01b2:	3004      	adds	r0, #4
 80a01b4:	f002 f99b 	bl	80a24ee <_ZN6StringC1EPK19__FlashStringHelper>
 80a01b8:	f104 0014 	add.w	r0, r4, #20
 80a01bc:	f001 fc2e 	bl	80a1a1c <_ZN17SparkFun_APDS9960C1Ev>
 80a01c0:	4620      	mov	r0, r4
 80a01c2:	bd10      	pop	{r4, pc}
 80a01c4:	080a6477 	.word	0x080a6477

080a01c8 <_ZN10RGBASensorD1Ev>:
 80a01c8:	b510      	push	{r4, lr}
 80a01ca:	4604      	mov	r4, r0
 80a01cc:	3014      	adds	r0, #20
 80a01ce:	f001 fc37 	bl	80a1a40 <_ZN17SparkFun_APDS9960D1Ev>
 80a01d2:	1d20      	adds	r0, r4, #4
 80a01d4:	f002 f944 	bl	80a2460 <_ZN6StringD1Ev>
 80a01d8:	4620      	mov	r0, r4
 80a01da:	bd10      	pop	{r4, pc}

080a01dc <_ZN7KrembotD1Ev>:
#include "SandTimer/SandTimer.h"
#include "version_detector.h"



class Krembot
 80a01dc:	b510      	push	{r4, lr}
 80a01de:	4604      	mov	r4, r0
 80a01e0:	f200 503c 	addw	r0, r0, #1340	; 0x53c
 80a01e4:	f7ff fff0 	bl	80a01c8 <_ZN10RGBASensorD1Ev>
 80a01e8:	f204 4084 	addw	r0, r4, #1156	; 0x484
 80a01ec:	f7ff ffec 	bl	80a01c8 <_ZN10RGBASensorD1Ev>
 80a01f0:	f504 7073 	add.w	r0, r4, #972	; 0x3cc
 80a01f4:	f7ff ffe8 	bl	80a01c8 <_ZN10RGBASensorD1Ev>
 80a01f8:	f504 7045 	add.w	r0, r4, #788	; 0x314
 80a01fc:	f7ff ffe4 	bl	80a01c8 <_ZN10RGBASensorD1Ev>
 80a0200:	f504 7017 	add.w	r0, r4, #604	; 0x25c
 80a0204:	f7ff ffe0 	bl	80a01c8 <_ZN10RGBASensorD1Ev>
 80a0208:	f504 70d2 	add.w	r0, r4, #420	; 0x1a4
 80a020c:	f7ff ffdc 	bl	80a01c8 <_ZN10RGBASensorD1Ev>
 80a0210:	f104 00ec 	add.w	r0, r4, #236	; 0xec
 80a0214:	f7ff ffd8 	bl	80a01c8 <_ZN10RGBASensorD1Ev>
 80a0218:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80a021c:	f7ff ffd4 	bl	80a01c8 <_ZN10RGBASensorD1Ev>
 80a0220:	4620      	mov	r0, r4
 80a0222:	f002 f91d 	bl	80a2460 <_ZN6StringD1Ev>
 80a0226:	4620      	mov	r0, r4
 80a0228:	bd10      	pop	{r4, pc}
	...

080a022c <_ZN7KrembotC1Ev>:
 80a022c:	b510      	push	{r4, lr}
 80a022e:	4604      	mov	r4, r0
 80a0230:	493f      	ldr	r1, [pc, #252]	; (80a0330 <_ZN7KrembotC1Ev+0x104>)
 80a0232:	f002 f95c 	bl	80a24ee <_ZN6StringC1EPK19__FlashStringHelper>
 80a0236:	f104 0010 	add.w	r0, r4, #16
 80a023a:	f000 fe66 	bl	80a0f0a <_ZN9SandTimerC1Ev>
 80a023e:	f104 0020 	add.w	r0, r4, #32
 80a0242:	f000 fe62 	bl	80a0f0a <_ZN9SandTimerC1Ev>
 80a0246:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80a024a:	f7ff ffaf 	bl	80a01ac <_ZN10RGBASensorC1Ev>
 80a024e:	f104 00ec 	add.w	r0, r4, #236	; 0xec
 80a0252:	f7ff ffab 	bl	80a01ac <_ZN10RGBASensorC1Ev>
 80a0256:	f504 70d2 	add.w	r0, r4, #420	; 0x1a4
 80a025a:	f7ff ffa7 	bl	80a01ac <_ZN10RGBASensorC1Ev>
 80a025e:	f504 7017 	add.w	r0, r4, #604	; 0x25c
 80a0262:	f7ff ffa3 	bl	80a01ac <_ZN10RGBASensorC1Ev>
 80a0266:	f504 7045 	add.w	r0, r4, #788	; 0x314
 80a026a:	f7ff ff9f 	bl	80a01ac <_ZN10RGBASensorC1Ev>
 80a026e:	f504 7073 	add.w	r0, r4, #972	; 0x3cc
 80a0272:	f7ff ff9b 	bl	80a01ac <_ZN10RGBASensorC1Ev>
 80a0276:	f204 4084 	addw	r0, r4, #1156	; 0x484
 80a027a:	f7ff ff97 	bl	80a01ac <_ZN10RGBASensorC1Ev>
 80a027e:	f204 503c 	addw	r0, r4, #1340	; 0x53c
 80a0282:	f7ff ff93 	bl	80a01ac <_ZN10RGBASensorC1Ev>
 80a0286:	f204 50f4 	addw	r0, r4, #1524	; 0x5f4
 80a028a:	f7ff ff69 	bl	80a0160 <_ZN10MobileBaseC1Ev>
 80a028e:	f504 60bf 	add.w	r0, r4, #1528	; 0x5f8
 80a0292:	f7ff ff10 	bl	80a00b6 <_ZN8CBumpersC1Ev>
 80a0296:	f204 6024 	addw	r0, r4, #1572	; 0x624
 80a029a:	f000 fb35 	bl	80a0908 <_ZN7BatteryC1Ev>
 80a029e:	f204 603c 	addw	r0, r4, #1596	; 0x63c
 80a02a2:	f000 f867 	bl	80a0374 <_ZN6RGBLedC1Ev>
#else
#define MPU9250_ADDRESS 0x68  // Device address when ADO = 0
#define AK8963_ADDRESS  0x0C   // Address of magnetometer
#endif // AD0

class MPU9250
 80a02a6:	2301      	movs	r3, #1
 80a02a8:	f884 3642 	strb.w	r3, [r4, #1602]	; 0x642
 80a02ac:	2302      	movs	r3, #2
 80a02ae:	f884 3643 	strb.w	r3, [r4, #1603]	; 0x643
 80a02b2:	2300      	movs	r3, #0
 80a02b4:	2200      	movs	r2, #0
 80a02b6:	f8c4 3664 	str.w	r3, [r4, #1636]	; 0x664
 80a02ba:	f8c4 3668 	str.w	r3, [r4, #1640]	; 0x668
 80a02be:	f8c4 36b4 	str.w	r3, [r4, #1716]	; 0x6b4
 80a02c2:	f8c4 36b8 	str.w	r3, [r4, #1720]	; 0x6b8
 80a02c6:	f8c4 36bc 	str.w	r3, [r4, #1724]	; 0x6bc
 80a02ca:	f8c4 36c0 	str.w	r3, [r4, #1728]	; 0x6c0
 80a02ce:	f8c4 36c4 	str.w	r3, [r4, #1732]	; 0x6c4
 80a02d2:	f8c4 36c8 	str.w	r3, [r4, #1736]	; 0x6c8
 80a02d6:	f8c4 36cc 	str.w	r3, [r4, #1740]	; 0x6cc
 80a02da:	f8c4 36d0 	str.w	r3, [r4, #1744]	; 0x6d0
 80a02de:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
 80a02e2:	f8c4 36d8 	str.w	r3, [r4, #1752]	; 0x6d8
 80a02e6:	f8c4 36dc 	str.w	r3, [r4, #1756]	; 0x6dc
 80a02ea:	f8c4 36e0 	str.w	r3, [r4, #1760]	; 0x6e0
    float gx = 0,
          gy = 0,
          gz = 0;
};

class IMUSensor
 80a02ee:	2000      	movs	r0, #0
 80a02f0:	f504 63c8 	add.w	r3, r4, #1600	; 0x640
 80a02f4:	2100      	movs	r1, #0
 80a02f6:	f884 2640 	strb.w	r2, [r4, #1600]	; 0x640
 80a02fa:	f884 2641 	strb.w	r2, [r4, #1601]	; 0x641
 80a02fe:	f8c4 2658 	str.w	r2, [r4, #1624]	; 0x658
 80a0302:	f8c4 265c 	str.w	r2, [r4, #1628]	; 0x65c
 80a0306:	f8c4 2660 	str.w	r2, [r4, #1632]	; 0x660
 80a030a:	f8c4 266c 	str.w	r2, [r4, #1644]	; 0x66c
 80a030e:	f8c4 2670 	str.w	r2, [r4, #1648]	; 0x670
 80a0312:	f8c4 2674 	str.w	r2, [r4, #1652]	; 0x674
 80a0316:	e9c3 0132 	strd	r0, r1, [r3, #200]	; 0xc8
 80a031a:	e9c3 0134 	strd	r0, r1, [r3, #208]	; 0xd0
 80a031e:	e9c3 0136 	strd	r0, r1, [r3, #216]	; 0xd8
#define MAG_CAL_ADDR 100

#define AHRS true         // Set to false for basic data read
#define SerialDebug false  // Set to true to get Serial output for debugging

struct ImuInitFlags
 80a0322:	f884 2720 	strb.w	r2, [r4, #1824]	; 0x720
 80a0326:	f884 2721 	strb.w	r2, [r4, #1825]	; 0x721
 80a032a:	4620      	mov	r0, r4
 80a032c:	bd10      	pop	{r4, pc}
 80a032e:	bf00      	nop
 80a0330:	080a6477 	.word	0x080a6477

080a0334 <setup>:
//Only one instance of krembot object should be declared
Krembot krembot;

void setup()
{
    krembot.setup();
 80a0334:	4801      	ldr	r0, [pc, #4]	; (80a033c <setup+0x8>)
 80a0336:	f000 b925 	b.w	80a0584 <_ZN7Krembot5setupEv>
 80a033a:	bf00      	nop
 80a033c:	20000078 	.word	0x20000078

080a0340 <loop>:
}


void loop()
{
  krembot.loop();
 80a0340:	4801      	ldr	r0, [pc, #4]	; (80a0348 <loop+0x8>)
 80a0342:	f000 b8b2 	b.w	80a04aa <_ZN7Krembot4loopEv>
 80a0346:	bf00      	nop
 80a0348:	20000078 	.word	0x20000078

080a034c <_GLOBAL__sub_I_krembot>:
  //your code here
}
 80a034c:	b510      	push	{r4, lr}
/* Author: Elhay Rauper */


#include "krembot.h"
//Only one instance of krembot object should be declared
Krembot krembot;
 80a034e:	4c06      	ldr	r4, [pc, #24]	; (80a0368 <_GLOBAL__sub_I_krembot+0x1c>)
 80a0350:	f001 fe2c 	bl	80a1fac <HAL_Pin_Map>
 80a0354:	4620      	mov	r0, r4
 80a0356:	f7ff ff69 	bl	80a022c <_ZN7KrembotC1Ev>
 80a035a:	4620      	mov	r0, r4

void loop()
{
  krembot.loop();
  //your code here
}
 80a035c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/* Author: Elhay Rauper */


#include "krembot.h"
//Only one instance of krembot object should be declared
Krembot krembot;
 80a0360:	4a02      	ldr	r2, [pc, #8]	; (80a036c <_GLOBAL__sub_I_krembot+0x20>)
 80a0362:	4903      	ldr	r1, [pc, #12]	; (80a0370 <_GLOBAL__sub_I_krembot+0x24>)
 80a0364:	f003 b948 	b.w	80a35f8 <__aeabi_atexit>
 80a0368:	20000078 	.word	0x20000078
 80a036c:	20000070 	.word	0x20000070
 80a0370:	080a01dd 	.word	0x080a01dd

080a0374 <_ZN6RGBLedC1Ev>:
/* Author: Elhay Rauper */
/* Maintainer: Yair Shlomi */

#include "rgb_led.h"

RGBLed::RGBLed()
 80a0374:	b510      	push	{r4, lr}
 80a0376:	4604      	mov	r4, r0
{
  pinMode(RED_LEG ,OUTPUT);
 80a0378:	2101      	movs	r1, #1
 80a037a:	2013      	movs	r0, #19
 80a037c:	f003 f88c 	bl	80a3498 <pinMode>
  pinMode(GREEN_LEG ,OUTPUT);
 80a0380:	2101      	movs	r1, #1
 80a0382:	2012      	movs	r0, #18
 80a0384:	f003 f888 	bl	80a3498 <pinMode>
  pinMode(BLUE_LEG ,OUTPUT);
 80a0388:	2101      	movs	r1, #1
 80a038a:	2011      	movs	r0, #17
 80a038c:	f003 f884 	bl	80a3498 <pinMode>
}
 80a0390:	4620      	mov	r0, r4
 80a0392:	bd10      	pop	{r4, pc}

080a0394 <_GLOBAL__sub_I__ZN6RGBLedC2Ev>:
 80a0394:	f001 be0a 	b.w	80a1fac <HAL_Pin_Map>

080a0398 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFSt7_Mem_fnIM7KrembotFvS1_S1_EEPS5_St12_PlaceholderILi1EESA_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SJ_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0398:	b430      	push	{r4, r5}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a039a:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a039c:	6812      	ldr	r2, [r2, #0]
 80a039e:	6858      	ldr	r0, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a03a0:	689c      	ldr	r4, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a03a2:	f010 0f01 	tst.w	r0, #1
 80a03a6:	ea4f 0060 	mov.w	r0, r0, asr #1
 80a03aa:	bf18      	it	ne
 80a03ac:	5825      	ldrne	r5, [r4, r0]
 80a03ae:	681b      	ldr	r3, [r3, #0]
 80a03b0:	4420      	add	r0, r4
 80a03b2:	bf18      	it	ne
 80a03b4:	58eb      	ldrne	r3, [r5, r3]
 80a03b6:	6809      	ldr	r1, [r1, #0]
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 80a03b8:	bc30      	pop	{r4, r5}
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a03ba:	4718      	bx	r3

080a03bc <_ZN7Krembot5resetEPKcS1_>:
  CBumpers Bumpers;
  Battery Bat;
  RGBLed Led;
  IMUSensor Imu;

  void reset(const char *topic, const char *data) {
 80a03bc:	b530      	push	{r4, r5, lr}
 80a03be:	4605      	mov	r5, r0
 80a03c0:	b085      	sub	sp, #20
 80a03c2:	4608      	mov	r0, r1
    if (strcmp(topic,"reset")==0 && (strcmp(data,"all")==0 || strcmp(data,getName().c_str())==0) ) {
 80a03c4:	490e      	ldr	r1, [pc, #56]	; (80a0400 <_ZN7Krembot5resetEPKcS1_+0x44>)
  CBumpers Bumpers;
  Battery Bat;
  RGBLed Led;
  IMUSensor Imu;

  void reset(const char *topic, const char *data) {
 80a03c6:	4614      	mov	r4, r2
    if (strcmp(topic,"reset")==0 && (strcmp(data,"all")==0 || strcmp(data,getName().c_str())==0) ) {
 80a03c8:	f005 fe02 	bl	80a5fd0 <strcmp>
 80a03cc:	b9a8      	cbnz	r0, 80a03fa <_ZN7Krembot5resetEPKcS1_+0x3e>
 80a03ce:	490d      	ldr	r1, [pc, #52]	; (80a0404 <_ZN7Krembot5resetEPKcS1_+0x48>)
 80a03d0:	4620      	mov	r0, r4
 80a03d2:	f005 fdfd 	bl	80a5fd0 <strcmp>
 80a03d6:	b910      	cbnz	r0, 80a03de <_ZN7Krembot5resetEPKcS1_+0x22>
      System.reset();
 80a03d8:	f002 f832 	bl	80a2440 <_ZN11SystemClass5resetEv>
 80a03dc:	e00d      	b.n	80a03fa <_ZN7Krembot5resetEPKcS1_+0x3e>

  void loop();

  String getID() { return System.deviceID(); }

  String getName() { return  my_name_; }
 80a03de:	4629      	mov	r1, r5
 80a03e0:	4668      	mov	r0, sp
 80a03e2:	f002 f8c3 	bl	80a256c <_ZN6StringC1ERKS_>
  Battery Bat;
  RGBLed Led;
  IMUSensor Imu;

  void reset(const char *topic, const char *data) {
    if (strcmp(topic,"reset")==0 && (strcmp(data,"all")==0 || strcmp(data,getName().c_str())==0) ) {
 80a03e6:	4620      	mov	r0, r4
 80a03e8:	9900      	ldr	r1, [sp, #0]
 80a03ea:	f005 fdf1 	bl	80a5fd0 <strcmp>
 80a03ee:	4604      	mov	r4, r0
 80a03f0:	4668      	mov	r0, sp
 80a03f2:	f002 f835 	bl	80a2460 <_ZN6StringD1Ev>
 80a03f6:	2c00      	cmp	r4, #0
 80a03f8:	d0ee      	beq.n	80a03d8 <_ZN7Krembot5resetEPKcS1_+0x1c>
      System.reset();
    }
  }
 80a03fa:	b005      	add	sp, #20
 80a03fc:	bd30      	pop	{r4, r5, pc}
 80a03fe:	bf00      	nop
 80a0400:	080a6050 	.word	0x080a6050
 80a0404:	080a6056 	.word	0x080a6056

080a0408 <_ZN7Krembot10saveMyNameEPKcS1_>:




void Krembot::saveMyName(const char *topic, const char *data)
{
 80a0408:	b570      	push	{r4, r5, r6, lr}
 80a040a:	b088      	sub	sp, #32
 80a040c:	4614      	mov	r4, r2
 80a040e:	4605      	mov	r5, r0
	Serial.println("[Krembot]: my name is " + String(data));
 80a0410:	f002 fdfe 	bl	80a3010 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0414:	4911      	ldr	r1, [pc, #68]	; (80a045c <_ZN7Krembot10saveMyNameEPKcS1_+0x54>)
 80a0416:	4606      	mov	r6, r0
 80a0418:	a804      	add	r0, sp, #16
 80a041a:	f002 f868 	bl	80a24ee <_ZN6StringC1EPK19__FlashStringHelper>
 80a041e:	4621      	mov	r1, r4
 80a0420:	4668      	mov	r0, sp
 80a0422:	f002 f864 	bl	80a24ee <_ZN6StringC1EPK19__FlashStringHelper>
 80a0426:	4669      	mov	r1, sp
 80a0428:	a804      	add	r0, sp, #16
 80a042a:	f002 f8da 	bl	80a25e2 <_ZplRK15StringSumHelperRK6String>
 80a042e:	6801      	ldr	r1, [r0, #0]
 80a0430:	4630      	mov	r0, r6
 80a0432:	f002 f917 	bl	80a2664 <_ZN5Print7printlnEPKc>
 80a0436:	4668      	mov	r0, sp
 80a0438:	f002 f812 	bl	80a2460 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a043c:	a804      	add	r0, sp, #16
 80a043e:	f002 f80f 	bl	80a2460 <_ZN6StringD1Ev>
	my_name_ = String(data);
 80a0442:	4621      	mov	r1, r4
 80a0444:	a804      	add	r0, sp, #16
 80a0446:	f002 f852 	bl	80a24ee <_ZN6StringC1EPK19__FlashStringHelper>
 80a044a:	a904      	add	r1, sp, #16
 80a044c:	4628      	mov	r0, r5
 80a044e:	f002 f898 	bl	80a2582 <_ZN6StringaSEOS_>
 80a0452:	a804      	add	r0, sp, #16
 80a0454:	f002 f804 	bl	80a2460 <_ZN6StringD1Ev>
}
 80a0458:	b008      	add	sp, #32
 80a045a:	bd70      	pop	{r4, r5, r6, pc}
 80a045c:	080a605a 	.word	0x080a605a

080a0460 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7KrembotFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0460:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0462:	b538      	push	{r3, r4, r5, lr}
 80a0464:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0466:	d005      	beq.n	80a0474 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7KrembotFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x14>
 80a0468:	2a03      	cmp	r2, #3
 80a046a:	d00f      	beq.n	80a048c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7KrembotFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x2c>
 80a046c:	2a01      	cmp	r2, #1
 80a046e:	d111      	bne.n	80a0494 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7KrembotFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0470:	680b      	ldr	r3, [r1, #0]
 80a0472:	e009      	b.n	80a0488 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7KrembotFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0474:	200c      	movs	r0, #12
 80a0476:	680d      	ldr	r5, [r1, #0]
 80a0478:	f7ff fe11 	bl	80a009e <_Znwj>
 80a047c:	4603      	mov	r3, r0
 80a047e:	b118      	cbz	r0, 80a0488 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7KrembotFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
 80a0480:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a0484:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a0488:	6023      	str	r3, [r4, #0]
 80a048a:	e003      	b.n	80a0494 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7KrembotFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a048c:	210c      	movs	r1, #12
 80a048e:	6800      	ldr	r0, [r0, #0]
 80a0490:	f003 f8b7 	bl	80a3602 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0494:	2000      	movs	r0, #0
 80a0496:	bd38      	pop	{r3, r4, r5, pc}

080a0498 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0498:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a049a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a049c:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a049e:	b113      	cbz	r3, 80a04a6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a04a0:	2203      	movs	r2, #3
 80a04a2:	4601      	mov	r1, r0
 80a04a4:	4798      	blx	r3
    }
 80a04a6:	4620      	mov	r0, r4
 80a04a8:	bd10      	pop	{r4, pc}

080a04aa <_ZN7Krembot4loopEv>:
	my_name_ = "";

}

void Krembot::loop()
{
 80a04aa:	b510      	push	{r4, lr}
 80a04ac:	4604      	mov	r4, r0
	Imu.loop();
 80a04ae:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
 80a04b2:	f000 f92d 	bl	80a0710 <_ZN9IMUSensor4loopEv>

	Bat.loop();
 80a04b6:	f204 6024 	addw	r0, r4, #1572	; 0x624

}
 80a04ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void Krembot::loop()
{
	Imu.loop();

	Bat.loop();
 80a04be:	f000 ba60 	b.w	80a0982 <_ZN7Battery4loopEv>

080a04c2 <_ZN7Krembot12checkVersionEv>:
	Serial.println("[Krembot]: my name is " + String(data));
	my_name_ = String(data);
}

void Krembot::checkVersion()
{
 80a04c2:	b510      	push	{r4, lr}
 80a04c4:	4604      	mov	r4, r0
	//check if bumpers mux is connected
	Wire.beginTransmission(0x3E);
 80a04c6:	f003 f877 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a04ca:	213e      	movs	r1, #62	; 0x3e
 80a04cc:	f002 fef1 	bl	80a32b2 <_ZN7TwoWire17beginTransmissionEi>
	int error = Wire.endTransmission();
 80a04d0:	f003 f872 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a04d4:	f002 fef4 	bl	80a32c0 <_ZN7TwoWire15endTransmissionEv>
	if(error == 0)
 80a04d8:	b908      	cbnz	r0, 80a04de <_ZN7Krembot12checkVersionEv+0x1c>
	{
		version = Version::V2;
 80a04da:	2301      	movs	r3, #1
 80a04dc:	e000      	b.n	80a04e0 <_ZN7Krembot12checkVersionEv+0x1e>
	}
	else
	{
		version = Version::V1;
 80a04de:	2300      	movs	r3, #0
 80a04e0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80a04e4:	bd10      	pop	{r4, pc}

080a04e6 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a04e6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a04e8:	2300      	movs	r3, #0
 80a04ea:	6083      	str	r3, [r0, #8]
 80a04ec:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a04ee:	4604      	mov	r4, r0
 80a04f0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a04f2:	b12b      	cbz	r3, 80a0500 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a04f4:	2202      	movs	r2, #2
 80a04f6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a04f8:	68eb      	ldr	r3, [r5, #12]
 80a04fa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a04fc:	68ab      	ldr	r3, [r5, #8]
 80a04fe:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0500:	4620      	mov	r0, r4
 80a0502:	bd38      	pop	{r3, r4, r5, pc}

080a0504 <_ZN10CloudClass9subscribeI7KrembotEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.10.constprop.14>:
    {
        return subscribe_wiring(eventName, handler, MY_DEVICES, deviceID);
    }

    template <typename T>
    bool subscribe(const char *eventName, void (T::*handler)(const char *, const char *), T *instance, Spark_Subscription_Scope_TypeDef scope)
 80a0504:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0506:	b08d      	sub	sp, #52	; 0x34
 80a0508:	4605      	mov	r5, r0
 80a050a:	a802      	add	r0, sp, #8
 80a050c:	e880 0006 	stmia.w	r0, {r1, r2}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0510:	2400      	movs	r4, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0512:	200c      	movs	r0, #12
 80a0514:	461e      	mov	r6, r3
 80a0516:	460f      	mov	r7, r1
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0518:	9406      	str	r4, [sp, #24]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a051a:	f7ff fdc0 	bl	80a009e <_Znwj>
 80a051e:	b110      	cbz	r0, 80a0526 <_ZN10CloudClass9subscribeI7KrembotEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.10.constprop.14+0x22>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a0520:	6007      	str	r7, [r0, #0]
 80a0522:	6044      	str	r4, [r0, #4]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0524:	6086      	str	r6, [r0, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0526:	4b14      	ldr	r3, [pc, #80]	; (80a0578 <_ZN10CloudClass9subscribeI7KrembotEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.10.constprop.14+0x74>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0528:	9004      	str	r0, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a052a:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 80a052c:	4b13      	ldr	r3, [pc, #76]	; (80a057c <_ZN10CloudClass9subscribeI7KrembotEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.10.constprop.14+0x78>)
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, MY_DEVICES, deviceID, NULL), false);
    }

    bool subscribe(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return subscribe_wiring(eventName, handler, scope);
 80a052e:	a904      	add	r1, sp, #16
 80a0530:	a808      	add	r0, sp, #32
 80a0532:	9306      	str	r3, [sp, #24]
 80a0534:	f7ff ffd7 	bl	80a04e6 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
 80a0538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a053a:	b90b      	cbnz	r3, 80a0540 <_ZN10CloudClass9subscribeI7KrembotEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.10.constprop.14+0x3c>
    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
 80a053c:	2400      	movs	r4, #0
 80a053e:	e012      	b.n	80a0566 <_ZN10CloudClass9subscribeI7KrembotEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.10.constprop.14+0x62>
        if (handler) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new wiring_event_handler_t(handler);
 80a0540:	2010      	movs	r0, #16
 80a0542:	f7ff fdac 	bl	80a009e <_Znwj>
 80a0546:	4604      	mov	r4, r0
 80a0548:	2800      	cmp	r0, #0
 80a054a:	d0f7      	beq.n	80a053c <_ZN10CloudClass9subscribeI7KrembotEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.10.constprop.14+0x38>
 80a054c:	a908      	add	r1, sp, #32
 80a054e:	f7ff ffca 	bl	80a04e6 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 80a0552:	2300      	movs	r3, #0
 80a0554:	9301      	str	r3, [sp, #4]
 80a0556:	9300      	str	r3, [sp, #0]
 80a0558:	4622      	mov	r2, r4
 80a055a:	2301      	movs	r3, #1
 80a055c:	4908      	ldr	r1, [pc, #32]	; (80a0580 <_ZN10CloudClass9subscribeI7KrembotEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.10.constprop.14+0x7c>)
 80a055e:	4628      	mov	r0, r5
 80a0560:	f001 ff0a 	bl	80a2378 <spark_subscribe>
 80a0564:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0566:	a808      	add	r0, sp, #32
 80a0568:	f7ff ff96 	bl	80a0498 <_ZNSt14_Function_baseD1Ev>
 80a056c:	a804      	add	r0, sp, #16
 80a056e:	f7ff ff93 	bl	80a0498 <_ZNSt14_Function_baseD1Ev>
    template <typename T>
    bool subscribe(const char *eventName, void (T::*handler)(const char *, const char *), T *instance, Spark_Subscription_Scope_TypeDef scope)
    {
        using namespace std::placeholders;
        return subscribe(eventName, std::bind(handler, instance, _1, _2), scope);
    }
 80a0572:	4620      	mov	r0, r4
 80a0574:	b00d      	add	sp, #52	; 0x34
 80a0576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0578:	080a0399 	.word	0x080a0399
 80a057c:	080a0461 	.word	0x080a0461
 80a0580:	080a2955 	.word	0x080a2955

080a0584 <_ZN7Krembot5setupEv>:
/* Maintainer: Yair Shlomi */

#include "krembot.h"

void Krembot::setup()
{
 80a0584:	b530      	push	{r4, r5, lr}
 80a0586:	4604      	mov	r4, r0
 80a0588:	b089      	sub	sp, #36	; 0x24
	Serial.begin(38400);
 80a058a:	f002 fd41 	bl	80a3010 <_Z16_fetch_usbserialv>
 80a058e:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 80a0592:	f002 fd23 	bl	80a2fdc <_ZN9USBSerial5beginEl>
	Particle.subscribe("spark/", &Krembot::saveMyName, this, ALL_DEVICES);
 80a0596:	4b39      	ldr	r3, [pc, #228]	; (80a067c <_ZN7Krembot5setupEv+0xf8>)
 80a0598:	2500      	movs	r5, #0
 80a059a:	9304      	str	r3, [sp, #16]
 80a059c:	9505      	str	r5, [sp, #20]
 80a059e:	aa04      	add	r2, sp, #16
 80a05a0:	ca06      	ldmia	r2, {r1, r2}
 80a05a2:	4623      	mov	r3, r4
 80a05a4:	4836      	ldr	r0, [pc, #216]	; (80a0680 <_ZN7Krembot5setupEv+0xfc>)
 80a05a6:	f7ff ffad 	bl	80a0504 <_ZN10CloudClass9subscribeI7KrembotEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.10.constprop.14>
	Particle.subscribe("reset", &Krembot::reset, this,  ALL_DEVICES);
 80a05aa:	4b36      	ldr	r3, [pc, #216]	; (80a0684 <_ZN7Krembot5setupEv+0x100>)
 80a05ac:	9507      	str	r5, [sp, #28]
 80a05ae:	9306      	str	r3, [sp, #24]
 80a05b0:	aa08      	add	r2, sp, #32
 80a05b2:	e912 0006 	ldmdb	r2, {r1, r2}
 80a05b6:	4623      	mov	r3, r4
 80a05b8:	4833      	ldr	r0, [pc, #204]	; (80a0688 <_ZN7Krembot5setupEv+0x104>)
 80a05ba:	f7ff ffa3 	bl	80a0504 <_ZN10CloudClass9subscribeI7KrembotEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.10.constprop.14>
 80a05be:	4b33      	ldr	r3, [pc, #204]	; (80a068c <_ZN7Krembot5setupEv+0x108>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a05c0:	462a      	mov	r2, r5
 80a05c2:	781b      	ldrb	r3, [r3, #0]
 80a05c4:	4932      	ldr	r1, [pc, #200]	; (80a0690 <_ZN7Krembot5setupEv+0x10c>)
 80a05c6:	f88d 3000 	strb.w	r3, [sp]
 80a05ca:	a802      	add	r0, sp, #8
 80a05cc:	233c      	movs	r3, #60	; 0x3c
 80a05ce:	f002 fac9 	bl	80a2b64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a05d2:	9d03      	ldr	r5, [sp, #12]
 80a05d4:	b17d      	cbz	r5, 80a05f6 <_ZN7Krembot5setupEv+0x72>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a05d6:	686b      	ldr	r3, [r5, #4]
 80a05d8:	3b01      	subs	r3, #1
 80a05da:	606b      	str	r3, [r5, #4]
 80a05dc:	b95b      	cbnz	r3, 80a05f6 <_ZN7Krembot5setupEv+0x72>
        {
          _M_dispose();
 80a05de:	682b      	ldr	r3, [r5, #0]
 80a05e0:	4628      	mov	r0, r5
 80a05e2:	689b      	ldr	r3, [r3, #8]
 80a05e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a05e6:	68ab      	ldr	r3, [r5, #8]
 80a05e8:	3b01      	subs	r3, #1
 80a05ea:	60ab      	str	r3, [r5, #8]
 80a05ec:	b91b      	cbnz	r3, 80a05f6 <_ZN7Krembot5setupEv+0x72>
            _M_destroy();
 80a05ee:	682b      	ldr	r3, [r5, #0]
 80a05f0:	4628      	mov	r0, r5
 80a05f2:	68db      	ldr	r3, [r3, #12]
 80a05f4:	4798      	blx	r3
	Particle.publish("spark/device/name", PUBLIC);
	delay(2000); // give cloud time to register
 80a05f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a05fa:	f002 f89f 	bl	80a273c <delay>

	//Led.write(0,255,0);
	Wire.begin();
 80a05fe:	f002 ffdb 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0602:	f002 fe3b 	bl	80a327c <_ZN7TwoWire5beginEv>

	//rgba & imu sensors can only be init after wire.begin
	Imu.init();
 80a0606:	f504 60c8 	add.w	r0, r4, #1600	; 0x640
 80a060a:	f000 f84d 	bl	80a06a8 <_ZN9IMUSensor4initEv>
	checkVersion();
 80a060e:	4620      	mov	r0, r4
 80a0610:	f7ff ff57 	bl	80a04c2 <_ZN7Krembot12checkVersionEv>
	Bumpers.init(version);
 80a0614:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80a0618:	f504 60bf 	add.w	r0, r4, #1528	; 0x5f8
 80a061c:	f7ff fd53 	bl	80a00c6 <_ZN8CBumpers4initE7Version>
	RgbaFront.init(uint8_t(RGBAAddr::Front));
 80a0620:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80a0624:	2100      	movs	r1, #0
 80a0626:	f000 fa15 	bl	80a0a54 <_ZN10RGBASensor4initEh>
	RgbaRear.init(uint8_t(RGBAAddr::Rear));
 80a062a:	f104 00ec 	add.w	r0, r4, #236	; 0xec
 80a062e:	2104      	movs	r1, #4
 80a0630:	f000 fa10 	bl	80a0a54 <_ZN10RGBASensor4initEh>

	RgbaFrontRight.init(uint8_t(RGBAAddr::FrontRight));
 80a0634:	f504 7045 	add.w	r0, r4, #788	; 0x314
 80a0638:	2101      	movs	r1, #1
 80a063a:	f000 fa0b 	bl	80a0a54 <_ZN10RGBASensor4initEh>
	RgbaRight.init(uint8_t(RGBAAddr::Right));
 80a063e:	f504 70d2 	add.w	r0, r4, #420	; 0x1a4
 80a0642:	2102      	movs	r1, #2
 80a0644:	f000 fa06 	bl	80a0a54 <_ZN10RGBASensor4initEh>
	RgbaRearRight.init(uint8_t(RGBAAddr::RearRight));
 80a0648:	f204 4084 	addw	r0, r4, #1156	; 0x484
 80a064c:	2103      	movs	r1, #3
 80a064e:	f000 fa01 	bl	80a0a54 <_ZN10RGBASensor4initEh>
	RgbaRearLeft.init(uint8_t(RGBAAddr::RearLeft));
 80a0652:	f204 503c 	addw	r0, r4, #1340	; 0x53c
 80a0656:	2105      	movs	r1, #5
 80a0658:	f000 f9fc 	bl	80a0a54 <_ZN10RGBASensor4initEh>
	RgbaLeft.init(uint8_t(RGBAAddr::Left));
 80a065c:	f504 7017 	add.w	r0, r4, #604	; 0x25c
 80a0660:	2106      	movs	r1, #6
 80a0662:	f000 f9f7 	bl	80a0a54 <_ZN10RGBASensor4initEh>
	RgbaFrontLeft.init(uint8_t(RGBAAddr::FrontLeft));
 80a0666:	f504 7073 	add.w	r0, r4, #972	; 0x3cc
 80a066a:	2107      	movs	r1, #7
 80a066c:	f000 f9f2 	bl	80a0a54 <_ZN10RGBASensor4initEh>

	my_name_ = "";
 80a0670:	4908      	ldr	r1, [pc, #32]	; (80a0694 <_ZN7Krembot5setupEv+0x110>)
 80a0672:	4620      	mov	r0, r4
 80a0674:	f001 ff8d 	bl	80a2592 <_ZN6StringaSEPKc>

}
 80a0678:	b009      	add	sp, #36	; 0x24
 80a067a:	bd30      	pop	{r4, r5, pc}
 80a067c:	080a0409 	.word	0x080a0409
 80a0680:	080a6071 	.word	0x080a6071
 80a0684:	080a03bd 	.word	0x080a03bd
 80a0688:	080a6050 	.word	0x080a6050
 80a068c:	200007a0 	.word	0x200007a0
 80a0690:	080a6078 	.word	0x080a6078
 80a0694:	080a6477 	.word	0x080a6477

080a0698 <_GLOBAL__sub_I__ZN7Krembot5setupEv>:
 80a0698:	4b02      	ldr	r3, [pc, #8]	; (80a06a4 <_GLOBAL__sub_I__ZN7Krembot5setupEv+0xc>)
 80a069a:	2200      	movs	r2, #0
 80a069c:	701a      	strb	r2, [r3, #0]
 80a069e:	f001 bc85 	b.w	80a1fac <HAL_Pin_Map>
 80a06a2:	bf00      	nop
 80a06a4:	200007a0 	.word	0x200007a0

080a06a8 <_ZN9IMUSensor4initEv>:


#include "imu_sensor.h"

void IMUSensor::init()
{
 80a06a8:	b538      	push	{r3, r4, r5, lr}
	// Read the WHO_AM_I register, this is a good test of communication
	byte c = imu_.readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
 80a06aa:	2275      	movs	r2, #117	; 0x75
 80a06ac:	2168      	movs	r1, #104	; 0x68


#include "imu_sensor.h"

void IMUSensor::init()
{
 80a06ae:	4604      	mov	r4, r0
	// Read the WHO_AM_I register, this is a good test of communication
	byte c = imu_.readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
 80a06b0:	f000 fcc9 	bl	80a1046 <_ZN7MPU92508readByteEhh>

	if (c == 0x71)
 80a06b4:	2871      	cmp	r0, #113	; 0x71
 80a06b6:	d11e      	bne.n	80a06f6 <_ZN9IMUSensor4initEv+0x4e>
	{
		InitFlags.address = true;
 80a06b8:	2501      	movs	r5, #1
 80a06ba:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
		Serial.println("[IMU]: online");
 80a06be:	f002 fca7 	bl	80a3010 <_Z16_fetch_usbserialv>
 80a06c2:	4910      	ldr	r1, [pc, #64]	; (80a0704 <_ZN9IMUSensor4initEv+0x5c>)
 80a06c4:	f001 ffce 	bl	80a2664 <_ZN5Print7printlnEPKc>
		InitFlags.online = true;

		// Start by performing self test and reporting values
		imu_.MPU9250SelfTest(imu_.SelfTest);
 80a06c8:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 80a06cc:	4620      	mov	r0, r4

	if (c == 0x71)
	{
		InitFlags.address = true;
		Serial.println("[IMU]: online");
		InitFlags.online = true;
 80a06ce:	f884 50e1 	strb.w	r5, [r4, #225]	; 0xe1

		// Start by performing self test and reporting values
		imu_.MPU9250SelfTest(imu_.SelfTest);
 80a06d2:	f000 ff85 	bl	80a15e0 <_ZN7MPU925015MPU9250SelfTestEPf>
		delay(300);
 80a06d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a06da:	f002 f82f 	bl	80a273c <delay>
		// Calibrate gyro and accelerometers, load biases in bias registers
		imu_.calibrateMPU9250(imu_.gyroBias, imu_.accelBias);
 80a06de:	4620      	mov	r0, r4
 80a06e0:	f104 0298 	add.w	r2, r4, #152	; 0x98
 80a06e4:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 80a06e8:	f000 fd9a 	bl	80a1220 <_ZN7MPU925016calibrateMPU9250EPfS0_>

		// Initialize device for active mode read of acclerometer, gyroscope, and
		// temperature
		imu_.initMPU9250();
 80a06ec:	4620      	mov	r0, r4
	}
	else
	{
		Serial.println("[IMU]: failed to communicate");
	}
}
 80a06ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		// Calibrate gyro and accelerometers, load biases in bias registers
		imu_.calibrateMPU9250(imu_.gyroBias, imu_.accelBias);

		// Initialize device for active mode read of acclerometer, gyroscope, and
		// temperature
		imu_.initMPU9250();
 80a06f2:	f000 bcc8 	b.w	80a1086 <_ZN7MPU925011initMPU9250Ev>
		// Read the WHO_AM_I register of the magnetometer, this is a good test of
		// communication
	}
	else
	{
		Serial.println("[IMU]: failed to communicate");
 80a06f6:	f002 fc8b 	bl	80a3010 <_Z16_fetch_usbserialv>
	}
}
 80a06fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		// Read the WHO_AM_I register of the magnetometer, this is a good test of
		// communication
	}
	else
	{
		Serial.println("[IMU]: failed to communicate");
 80a06fe:	4902      	ldr	r1, [pc, #8]	; (80a0708 <_ZN9IMUSensor4initEv+0x60>)
 80a0700:	f001 bfb0 	b.w	80a2664 <_ZN5Print7printlnEPKc>
 80a0704:	080a608a 	.word	0x080a608a
 80a0708:	080a6098 	.word	0x080a6098
 80a070c:	00000000 	.word	0x00000000

080a0710 <_ZN9IMUSensor4loopEv>:
	return data;
}


void IMUSensor::loop()
{
 80a0710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// If intPin goes high, all data registers have new data
	// On interrupt, check if data ready interrupt
	if (imu_.readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)
 80a0714:	223a      	movs	r2, #58	; 0x3a
 80a0716:	2168      	movs	r1, #104	; 0x68
	return data;
}


void IMUSensor::loop()
{
 80a0718:	4604      	mov	r4, r0
	// If intPin goes high, all data registers have new data
	// On interrupt, check if data ready interrupt
	if (imu_.readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)
 80a071a:	f000 fc94 	bl	80a1046 <_ZN7MPU92508readByteEhh>
 80a071e:	07c3      	lsls	r3, r0, #31
 80a0720:	d541      	bpl.n	80a07a6 <_ZN9IMUSensor4loopEv+0x96>
	{
		imu_.readAccelData(imu_.accelCount);  // Read the x/y/z adc values
 80a0722:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
 80a0726:	4620      	mov	r0, r4
 80a0728:	f000 fd39 	bl	80a119e <_ZN7MPU925013readAccelDataEPs>
		imu_.getAres();
 80a072c:	4620      	mov	r0, r4
 80a072e:	f000 fc41 	bl	80a0fb4 <_ZN7MPU92507getAresEv>

		// Now we'll calculate the accleration value into actual g's
		// This depends on scale being set
		imu_.ax = (float)imu_.accelCount[0] * imu_.aRes;
 80a0732:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80a0734:	f9b4 00bc 	ldrsh.w	r0, [r4, #188]	; 0xbc
 80a0738:	f005 f9e6 	bl	80a5b08 <__aeabi_i2f>
 80a073c:	4629      	mov	r1, r5
 80a073e:	f005 fa37 	bl	80a5bb0 <__aeabi_fmul>
 80a0742:	6520      	str	r0, [r4, #80]	; 0x50
		imu_.ay = (float)imu_.accelCount[1] * imu_.aRes;
 80a0744:	f9b4 00be 	ldrsh.w	r0, [r4, #190]	; 0xbe
 80a0748:	f005 f9de 	bl	80a5b08 <__aeabi_i2f>
 80a074c:	4629      	mov	r1, r5
 80a074e:	f005 fa2f 	bl	80a5bb0 <__aeabi_fmul>
 80a0752:	6560      	str	r0, [r4, #84]	; 0x54
		imu_.az = (float)imu_.accelCount[2] * imu_.aRes;
 80a0754:	f9b4 00c0 	ldrsh.w	r0, [r4, #192]	; 0xc0
 80a0758:	f005 f9d6 	bl	80a5b08 <__aeabi_i2f>
 80a075c:	4629      	mov	r1, r5
 80a075e:	f005 fa27 	bl	80a5bb0 <__aeabi_fmul>

		imu_.readGyroData(imu_.gyroCount);  // Read the x/y/z adc values
 80a0762:	f104 0138 	add.w	r1, r4, #56	; 0x38

		// Now we'll calculate the accleration value into actual g's
		// This depends on scale being set
		imu_.ax = (float)imu_.accelCount[0] * imu_.aRes;
		imu_.ay = (float)imu_.accelCount[1] * imu_.aRes;
		imu_.az = (float)imu_.accelCount[2] * imu_.aRes;
 80a0766:	65a0      	str	r0, [r4, #88]	; 0x58

		imu_.readGyroData(imu_.gyroCount);  // Read the x/y/z adc values
 80a0768:	4620      	mov	r0, r4
 80a076a:	f000 fd38 	bl	80a11de <_ZN7MPU925012readGyroDataEPs>
		imu_.getGres();
 80a076e:	4620      	mov	r0, r4
 80a0770:	f000 fc08 	bl	80a0f84 <_ZN7MPU92507getGresEv>

		// Calculate the gyro value into actual degrees per second
		// This depends on scale being set
		imu_.gx = (float)imu_.gyroCount[0] * imu_.gRes;
 80a0774:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80a0776:	f9b4 0038 	ldrsh.w	r0, [r4, #56]	; 0x38
 80a077a:	f005 f9c5 	bl	80a5b08 <__aeabi_i2f>
 80a077e:	4629      	mov	r1, r5
 80a0780:	f005 fa16 	bl	80a5bb0 <__aeabi_fmul>
 80a0784:	65e0      	str	r0, [r4, #92]	; 0x5c
		imu_.gy = (float)imu_.gyroCount[1] * imu_.gRes;
 80a0786:	f9b4 003a 	ldrsh.w	r0, [r4, #58]	; 0x3a
 80a078a:	f005 f9bd 	bl	80a5b08 <__aeabi_i2f>
 80a078e:	4629      	mov	r1, r5
 80a0790:	f005 fa0e 	bl	80a5bb0 <__aeabi_fmul>
 80a0794:	6620      	str	r0, [r4, #96]	; 0x60
		imu_.gz = (float)imu_.gyroCount[2] * imu_.gRes;
 80a0796:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 80a079a:	f005 f9b5 	bl	80a5b08 <__aeabi_i2f>
 80a079e:	4629      	mov	r1, r5
 80a07a0:	f005 fa06 	bl	80a5bb0 <__aeabi_fmul>
 80a07a4:	6660      	str	r0, [r4, #100]	; 0x64


	}

	// Must be called before updating quaternions!
	imu_.updateTime();
 80a07a6:	4620      	mov	r0, r4
 80a07a8:	f000 fc18 	bl	80a0fdc <_ZN7MPU925010updateTimeEv>
	if (abs(imu_.gz) < 0.2)
 80a07ac:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80a07ae:	2100      	movs	r1, #0
 80a07b0:	4628      	mov	r0, r5
 80a07b2:	f005 fbb9 	bl	80a5f28 <__aeabi_fcmpgt>
 80a07b6:	b908      	cbnz	r0, 80a07bc <_ZN9IMUSensor4loopEv+0xac>
 80a07b8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80a07bc:	4628      	mov	r0, r5
 80a07be:	f004 fd75 	bl	80a52ac <__aeabi_f2d>
 80a07c2:	a335      	add	r3, pc, #212	; (adr r3, 80a0898 <_ZN9IMUSensor4loopEv+0x188>)
 80a07c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a07c8:	f005 f836 	bl	80a5838 <__aeabi_dcmplt>
 80a07cc:	b108      	cbz	r0, 80a07d2 <_ZN9IMUSensor4loopEv+0xc2>
	{
		imu_.gz = 0;
 80a07ce:	2300      	movs	r3, #0
 80a07d0:	6663      	str	r3, [r4, #100]	; 0x64
	}

	yaw += imu_.gz * imu_.deltat;
 80a07d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a07d4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80a07d6:	f005 f9eb 	bl	80a5bb0 <__aeabi_fmul>
 80a07da:	f004 fd67 	bl	80a52ac <__aeabi_f2d>
 80a07de:	4602      	mov	r2, r0
 80a07e0:	460b      	mov	r3, r1
 80a07e2:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
 80a07e6:	f004 fc03 	bl	80a4ff0 <__adddf3>
 80a07ea:	e9c4 0132 	strd	r0, r1, [r4, #200]	; 0xc8
	pitch = -atan2(-imu_.ax , imu_.az) * RAD_TO_DEG;
 80a07ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a07f0:	f004 fd5c 	bl	80a52ac <__aeabi_f2d>
 80a07f4:	4606      	mov	r6, r0
 80a07f6:	460f      	mov	r7, r1
 80a07f8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a07fa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a07fe:	f004 fd55 	bl	80a52ac <__aeabi_f2d>
 80a0802:	4632      	mov	r2, r6
 80a0804:	463b      	mov	r3, r7
 80a0806:	f003 f849 	bl	80a389c <atan2>
 80a080a:	a325      	add	r3, pc, #148	; (adr r3, 80a08a0 <_ZN9IMUSensor4loopEv+0x190>)
 80a080c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0810:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
 80a0814:	4639      	mov	r1, r7
 80a0816:	f004 fd9d 	bl	80a5354 <__aeabi_dmul>
 80a081a:	e9c4 0136 	strd	r0, r1, [r4, #216]	; 0xd8
	roll = -atan2( imu_.ay , sqrt(imu_.az * imu_.az + imu_.ax * imu_.ax)) * RAD_TO_DEG;
 80a081e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80a0820:	f004 fd44 	bl	80a52ac <__aeabi_f2d>
 80a0824:	460f      	mov	r7, r1
 80a0826:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80a0828:	4606      	mov	r6, r0
 80a082a:	4608      	mov	r0, r1
 80a082c:	f005 f9c0 	bl	80a5bb0 <__aeabi_fmul>
 80a0830:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 80a0834:	4605      	mov	r5, r0
 80a0836:	4641      	mov	r1, r8
 80a0838:	4640      	mov	r0, r8
 80a083a:	f005 f9b9 	bl	80a5bb0 <__aeabi_fmul>
 80a083e:	4601      	mov	r1, r0
 80a0840:	4628      	mov	r0, r5
 80a0842:	f005 f8ad 	bl	80a59a0 <__addsf3>
 80a0846:	f004 fd31 	bl	80a52ac <__aeabi_f2d>
 80a084a:	f003 f9c1 	bl	80a3bd0 <sqrt>
 80a084e:	4602      	mov	r2, r0
 80a0850:	460b      	mov	r3, r1
 80a0852:	4630      	mov	r0, r6
 80a0854:	4639      	mov	r1, r7
 80a0856:	f003 f821 	bl	80a389c <atan2>
 80a085a:	a311      	add	r3, pc, #68	; (adr r3, 80a08a0 <_ZN9IMUSensor4loopEv+0x190>)
 80a085c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0860:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
 80a0864:	4639      	mov	r1, r7
 80a0866:	f004 fd75 	bl	80a5354 <__aeabi_dmul>
 80a086a:	4606      	mov	r6, r0
 80a086c:	460f      	mov	r7, r1

	imu_.yaw = yaw * (-1);
 80a086e:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
		imu_.gz = 0;
	}

	yaw += imu_.gz * imu_.deltat;
	pitch = -atan2(-imu_.ax , imu_.az) * RAD_TO_DEG;
	roll = -atan2( imu_.ay , sqrt(imu_.az * imu_.az + imu_.ax * imu_.ax)) * RAD_TO_DEG;
 80a0872:	e9c4 6734 	strd	r6, r7, [r4, #208]	; 0xd0

	imu_.yaw = yaw * (-1);
 80a0876:	f005 f83d 	bl	80a58f4 <__aeabi_d2f>
 80a087a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a087e:	60a0      	str	r0, [r4, #8]
	imu_.roll = roll;
 80a0880:	4639      	mov	r1, r7
 80a0882:	4630      	mov	r0, r6
 80a0884:	f005 f836 	bl	80a58f4 <__aeabi_d2f>
 80a0888:	60e0      	str	r0, [r4, #12]
	imu_.pitch = pitch;
 80a088a:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
 80a088e:	f005 f831 	bl	80a58f4 <__aeabi_d2f>
 80a0892:	6060      	str	r0, [r4, #4]
 80a0894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0898:	9999999a 	.word	0x9999999a
 80a089c:	3fc99999 	.word	0x3fc99999
 80a08a0:	1a63c1f8 	.word	0x1a63c1f8
 80a08a4:	404ca5dc 	.word	0x404ca5dc

080a08a8 <_GLOBAL__sub_I__ZN9IMUSensor4initEv>:
 80a08a8:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <_GLOBAL__sub_I__ZN9IMUSensor4initEv+0xc>)
 80a08aa:	2201      	movs	r2, #1
 80a08ac:	701a      	strb	r2, [r3, #0]
 80a08ae:	f001 bb7d 	b.w	80a1fac <HAL_Pin_Map>
 80a08b2:	bf00      	nop
 80a08b4:	200007a1 	.word	0x200007a1

080a08b8 <_ZN7Battery10readBatLvlEv>:
	battery_voltage = readBatLvl();
	timer.start(BATTERY_SAMPLE_INTERVAL);
}

float Battery::readBatLvl()
{
 80a08b8:	b508      	push	{r3, lr}
	return (analogRead(BATTERY_LVL_LEG) * MAX_INPUT_VOLTAGE * BAT_VOLTAGE_DIVIDER_RATIO * ERROR_FIXING_CONST) / ANALOG_READ_RESOLUTION;
 80a08ba:	200e      	movs	r0, #14
 80a08bc:	f002 fe16 	bl	80a34ec <analogRead>
 80a08c0:	f004 fce2 	bl	80a5288 <__aeabi_i2d>
 80a08c4:	a30a      	add	r3, pc, #40	; (adr r3, 80a08f0 <_ZN7Battery10readBatLvlEv+0x38>)
 80a08c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a08ca:	f004 fd43 	bl	80a5354 <__aeabi_dmul>
 80a08ce:	2200      	movs	r2, #0
 80a08d0:	4b0b      	ldr	r3, [pc, #44]	; (80a0900 <_ZN7Battery10readBatLvlEv+0x48>)
 80a08d2:	f004 fd3f 	bl	80a5354 <__aeabi_dmul>
 80a08d6:	a308      	add	r3, pc, #32	; (adr r3, 80a08f8 <_ZN7Battery10readBatLvlEv+0x40>)
 80a08d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a08dc:	f004 fd3a 	bl	80a5354 <__aeabi_dmul>
 80a08e0:	2200      	movs	r2, #0
 80a08e2:	4b08      	ldr	r3, [pc, #32]	; (80a0904 <_ZN7Battery10readBatLvlEv+0x4c>)
 80a08e4:	f004 fd36 	bl	80a5354 <__aeabi_dmul>
 80a08e8:	f005 f804 	bl	80a58f4 <__aeabi_d2f>
}
 80a08ec:	bd08      	pop	{r3, pc}
 80a08ee:	bf00      	nop
 80a08f0:	0a3d70a4 	.word	0x0a3d70a4
 80a08f4:	400aa3d7 	.word	0x400aa3d7
 80a08f8:	9eecbfb1 	.word	0x9eecbfb1
 80a08fc:	3ff02c3c 	.word	0x3ff02c3c
 80a0900:	3ff80000 	.word	0x3ff80000
 80a0904:	3f300000 	.word	0x3f300000

080a0908 <_ZN7BatteryC1Ev>:
*******************************************************************************/
/* Author: Elhay Rauper, Yair Shlomi */

#include "battery.h"

Battery::Battery()
 80a0908:	b538      	push	{r3, r4, r5, lr}
 80a090a:	4604      	mov	r4, r0
 80a090c:	4b10      	ldr	r3, [pc, #64]	; (80a0950 <_ZN7BatteryC1Ev+0x48>)
 80a090e:	f100 0508 	add.w	r5, r0, #8
 80a0912:	6043      	str	r3, [r0, #4]
 80a0914:	4628      	mov	r0, r5
 80a0916:	f000 faf8 	bl	80a0f0a <_ZN9SandTimerC1Ev>
{
	pinMode(BATTERY_LVL_LEG, INPUT);
 80a091a:	2100      	movs	r1, #0
 80a091c:	200e      	movs	r0, #14
 80a091e:	f002 fdbb 	bl	80a3498 <pinMode>
	pinMode(CHARGING_LVL_LEG, INPUT);
 80a0922:	2100      	movs	r1, #0
 80a0924:	200f      	movs	r0, #15
 80a0926:	f002 fdb7 	bl	80a3498 <pinMode>
	pinMode(IS_FULL_CHARGE_LEG, INPUT);
 80a092a:	2100      	movs	r1, #0
 80a092c:	2006      	movs	r0, #6
 80a092e:	f002 fdb3 	bl	80a3498 <pinMode>
	pinMode(IS_CHARGINE_LEG, INPUT);
 80a0932:	2100      	movs	r1, #0
 80a0934:	2010      	movs	r0, #16
 80a0936:	f002 fdaf 	bl	80a3498 <pinMode>
	battery_voltage = readBatLvl();
 80a093a:	4620      	mov	r0, r4
 80a093c:	f7ff ffbc 	bl	80a08b8 <_ZN7Battery10readBatLvlEv>
	timer.start(BATTERY_SAMPLE_INTERVAL);
 80a0940:	2164      	movs	r1, #100	; 0x64
{
	pinMode(BATTERY_LVL_LEG, INPUT);
	pinMode(CHARGING_LVL_LEG, INPUT);
	pinMode(IS_FULL_CHARGE_LEG, INPUT);
	pinMode(IS_CHARGINE_LEG, INPUT);
	battery_voltage = readBatLvl();
 80a0942:	6020      	str	r0, [r4, #0]
	timer.start(BATTERY_SAMPLE_INTERVAL);
 80a0944:	4628      	mov	r0, r5
 80a0946:	f000 fae8 	bl	80a0f1a <_ZN9SandTimer5startEm>
}
 80a094a:	4620      	mov	r0, r4
 80a094c:	bd38      	pop	{r3, r4, r5, pc}
 80a094e:	bf00      	nop
 80a0950:	3dcccccd 	.word	0x3dcccccd

080a0954 <_ZN7Battery3lpfEf>:
{
	return battery_voltage;
}

void Battery::lpf(float read)
{
 80a0954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0956:	4604      	mov	r4, r0
	battery_voltage = ((alpha*read) + ((1-alpha)*battery_voltage));
 80a0958:	6845      	ldr	r5, [r0, #4]
{
	return battery_voltage;
}

void Battery::lpf(float read)
{
 80a095a:	460f      	mov	r7, r1
	battery_voltage = ((alpha*read) + ((1-alpha)*battery_voltage));
 80a095c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a0960:	4629      	mov	r1, r5
 80a0962:	f005 f81b 	bl	80a599c <__aeabi_fsub>
 80a0966:	6821      	ldr	r1, [r4, #0]
 80a0968:	f005 f922 	bl	80a5bb0 <__aeabi_fmul>
 80a096c:	4639      	mov	r1, r7
 80a096e:	4606      	mov	r6, r0
 80a0970:	4628      	mov	r0, r5
 80a0972:	f005 f91d 	bl	80a5bb0 <__aeabi_fmul>
 80a0976:	4601      	mov	r1, r0
 80a0978:	4630      	mov	r0, r6
 80a097a:	f005 f811 	bl	80a59a0 <__addsf3>
 80a097e:	6020      	str	r0, [r4, #0]
 80a0980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0982 <_ZN7Battery4loopEv>:
{
	return (uint8_t)((readChargelvl() / MAX_CHRG_LVL) * 100);
}

void Battery::loop()
{
 80a0982:	b538      	push	{r3, r4, r5, lr}
	if(timer.finished())
 80a0984:	f100 0508 	add.w	r5, r0, #8
{
	return (uint8_t)((readChargelvl() / MAX_CHRG_LVL) * 100);
}

void Battery::loop()
{
 80a0988:	4604      	mov	r4, r0
	if(timer.finished())
 80a098a:	4628      	mov	r0, r5
 80a098c:	f000 fada 	bl	80a0f44 <_ZN9SandTimer8finishedEv>
 80a0990:	b158      	cbz	r0, 80a09aa <_ZN7Battery4loopEv+0x28>
	{
			lpf(readBatLvl());
 80a0992:	4620      	mov	r0, r4
 80a0994:	f7ff ff90 	bl	80a08b8 <_ZN7Battery10readBatLvlEv>
 80a0998:	4601      	mov	r1, r0
 80a099a:	4620      	mov	r0, r4
 80a099c:	f7ff ffda 	bl	80a0954 <_ZN7Battery3lpfEf>
			timer.startOver();
 80a09a0:	4628      	mov	r0, r5
	}
}
 80a09a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Battery::loop()
{
	if(timer.finished())
	{
			lpf(readBatLvl());
			timer.startOver();
 80a09a6:	f000 bac3 	b.w	80a0f30 <_ZN9SandTimer9startOverEv>
 80a09aa:	bd38      	pop	{r3, r4, r5, pc}

080a09ac <_GLOBAL__sub_I__ZN7BatteryC2Ev>:
 80a09ac:	4b02      	ldr	r3, [pc, #8]	; (80a09b8 <_GLOBAL__sub_I__ZN7BatteryC2Ev+0xc>)
 80a09ae:	2201      	movs	r2, #1
 80a09b0:	701a      	strb	r2, [r3, #0]
 80a09b2:	f001 bafb 	b.w	80a1fac <HAL_Pin_Map>
 80a09b6:	bf00      	nop
 80a09b8:	200007a2 	.word	0x200007a2

080a09bc <_ZN10RGBASensor14i2cMuxSelectMeEv>:
     Serial.println(F("[RGBA sensor]Something went wrong during sensor init! sensor"));
  setName();
}

bool RGBASensor::i2cMuxSelectMe()
{
 80a09bc:	b510      	push	{r4, lr}
  if (addr_ > 7)
 80a09be:	7803      	ldrb	r3, [r0, #0]
     Serial.println(F("[RGBA sensor]Something went wrong during sensor init! sensor"));
  setName();
}

bool RGBASensor::i2cMuxSelectMe()
{
 80a09c0:	4604      	mov	r4, r0
  if (addr_ > 7)
 80a09c2:	2b07      	cmp	r3, #7
 80a09c4:	d814      	bhi.n	80a09f0 <_ZN10RGBASensor14i2cMuxSelectMeEv+0x34>
    return false;
  Wire.beginTransmission(RGBA_MUX_ADDR);
 80a09c6:	f002 fdf7 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a09ca:	2170      	movs	r1, #112	; 0x70
 80a09cc:	f002 fc71 	bl	80a32b2 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(1 << addr_);
 80a09d0:	f002 fdf2 	bl	80a35b8 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a09d4:	7821      	ldrb	r1, [r4, #0]
 80a09d6:	6803      	ldr	r3, [r0, #0]
 80a09d8:	2401      	movs	r4, #1
 80a09da:	fa04 f101 	lsl.w	r1, r4, r1
 80a09de:	689b      	ldr	r3, [r3, #8]
 80a09e0:	b2c9      	uxtb	r1, r1
 80a09e2:	4798      	blx	r3
  Wire.endTransmission();
 80a09e4:	f002 fde8 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a09e8:	f002 fc6a 	bl	80a32c0 <_ZN7TwoWire15endTransmissionEv>
 80a09ec:	4620      	mov	r0, r4
 80a09ee:	bd10      	pop	{r4, pc}
}

bool RGBASensor::i2cMuxSelectMe()
{
  if (addr_ > 7)
    return false;
 80a09f0:	2000      	movs	r0, #0
  Wire.beginTransmission(RGBA_MUX_ADDR);
  Wire.write(1 << addr_);
  Wire.endTransmission();
  return true;
}
 80a09f2:	bd10      	pop	{r4, pc}

080a09f4 <_ZN10RGBASensor7setNameEv>:


void RGBASensor::setName()
{

  switch (addr_)
 80a09f4:	f810 3b04 	ldrb.w	r3, [r0], #4
 80a09f8:	2b07      	cmp	r3, #7
 80a09fa:	d815      	bhi.n	80a0a28 <_ZN10RGBASensor7setNameEv+0x34>
 80a09fc:	e8df f003 	tbb	[pc, r3]
 80a0a00:	0a080604 	.word	0x0a080604
 80a0a04:	12100e0c 	.word	0x12100e0c
  {
    case (int)RGBAAddr::Front:
    {
      name_ = "Front";
 80a0a08:	4909      	ldr	r1, [pc, #36]	; (80a0a30 <_ZN10RGBASensor7setNameEv+0x3c>)
 80a0a0a:	e00e      	b.n	80a0a2a <_ZN10RGBASensor7setNameEv+0x36>
      break;
    }
    case (int)RGBAAddr::FrontRight:
    {
      name_ = "FrontRight";
 80a0a0c:	4909      	ldr	r1, [pc, #36]	; (80a0a34 <_ZN10RGBASensor7setNameEv+0x40>)
 80a0a0e:	e00c      	b.n	80a0a2a <_ZN10RGBASensor7setNameEv+0x36>
      break;
    }
    case (int)RGBAAddr::Right:
    {
      name_ = "Right";
 80a0a10:	4909      	ldr	r1, [pc, #36]	; (80a0a38 <_ZN10RGBASensor7setNameEv+0x44>)
 80a0a12:	e00a      	b.n	80a0a2a <_ZN10RGBASensor7setNameEv+0x36>
      break;
    }
    case (int)RGBAAddr::RearRight:
    {
      name_ = "RearRight";
 80a0a14:	4909      	ldr	r1, [pc, #36]	; (80a0a3c <_ZN10RGBASensor7setNameEv+0x48>)
 80a0a16:	e008      	b.n	80a0a2a <_ZN10RGBASensor7setNameEv+0x36>
      break;
    }
    case (int)RGBAAddr::Rear:
    {
      name_ = "Rear";
 80a0a18:	4909      	ldr	r1, [pc, #36]	; (80a0a40 <_ZN10RGBASensor7setNameEv+0x4c>)
 80a0a1a:	e006      	b.n	80a0a2a <_ZN10RGBASensor7setNameEv+0x36>
      break;
    }
    case (int)RGBAAddr::RearLeft:
    {
      name_ = "RearLeft";
 80a0a1c:	4909      	ldr	r1, [pc, #36]	; (80a0a44 <_ZN10RGBASensor7setNameEv+0x50>)
 80a0a1e:	e004      	b.n	80a0a2a <_ZN10RGBASensor7setNameEv+0x36>
      break;
    }
    case (int)RGBAAddr::Left:
    {
      name_ = "Left";
 80a0a20:	4909      	ldr	r1, [pc, #36]	; (80a0a48 <_ZN10RGBASensor7setNameEv+0x54>)
 80a0a22:	e002      	b.n	80a0a2a <_ZN10RGBASensor7setNameEv+0x36>
      break;
    }
    case (int)RGBAAddr::FrontLeft:
    {
      name_ = "FrontLeft";
 80a0a24:	4909      	ldr	r1, [pc, #36]	; (80a0a4c <_ZN10RGBASensor7setNameEv+0x58>)
 80a0a26:	e000      	b.n	80a0a2a <_ZN10RGBASensor7setNameEv+0x36>
      break;
    }

    default:
    {
        name_ ="None";
 80a0a28:	4909      	ldr	r1, [pc, #36]	; (80a0a50 <_ZN10RGBASensor7setNameEv+0x5c>)
 80a0a2a:	f001 bdb2 	b.w	80a2592 <_ZN6StringaSEPKc>
 80a0a2e:	bf00      	nop
 80a0a30:	080a6285 	.word	0x080a6285
 80a0a34:	080a628b 	.word	0x080a628b
 80a0a38:	080a629a 	.word	0x080a629a
 80a0a3c:	080a6296 	.word	0x080a6296
 80a0a40:	080a62a0 	.word	0x080a62a0
 80a0a44:	080a62a5 	.word	0x080a62a5
 80a0a48:	080a62a9 	.word	0x080a62a9
 80a0a4c:	080a62ae 	.word	0x080a62ae
 80a0a50:	080a62b8 	.word	0x080a62b8

080a0a54 <_ZN10RGBASensor4initEh>:
/* Author: Elhay Rauper, Yair Shlomi */

#include "rgba_sensor.h"

void RGBASensor::init(uint8_t addr)
{
 80a0a54:	b530      	push	{r4, r5, lr}
  addr_ = addr;
 80a0a56:	4604      	mov	r4, r0
/* Author: Elhay Rauper, Yair Shlomi */

#include "rgba_sensor.h"

void RGBASensor::init(uint8_t addr)
{
 80a0a58:	4605      	mov	r5, r0
 80a0a5a:	b0ab      	sub	sp, #172	; 0xac
  addr_ = addr;
 80a0a5c:	f804 1b14 	strb.w	r1, [r4], #20
  apds_ = SparkFun_APDS9960();
 80a0a60:	a801      	add	r0, sp, #4
 80a0a62:	f000 ffdb 	bl	80a1a1c <_ZN17SparkFun_APDS9960C1Ev>
 80a0a66:	22a4      	movs	r2, #164	; 0xa4
 80a0a68:	a901      	add	r1, sp, #4
 80a0a6a:	4620      	mov	r0, r4
 80a0a6c:	f005 fa74 	bl	80a5f58 <memcpy>
 80a0a70:	a801      	add	r0, sp, #4
 80a0a72:	f000 ffe5 	bl	80a1a40 <_ZN17SparkFun_APDS9960D1Ev>
  i2cMuxSelectMe();
 80a0a76:	4628      	mov	r0, r5
 80a0a78:	f7ff ffa0 	bl	80a09bc <_ZN10RGBASensor14i2cMuxSelectMeEv>

  if (!apds_.init() )
 80a0a7c:	4620      	mov	r0, r4
 80a0a7e:	f001 f9ad 	bl	80a1ddc <_ZN17SparkFun_APDS99604initEv>
 80a0a82:	b920      	cbnz	r0, 80a0a8e <_ZN10RGBASensor4initEh+0x3a>
       Serial.println(F("[RGBA sensor]Something went wrong during APDS-9960 init sensor" ));
 80a0a84:	f002 fac4 	bl	80a3010 <_Z16_fetch_usbserialv>
 80a0a88:	4912      	ldr	r1, [pc, #72]	; (80a0ad4 <_ZN10RGBASensor4initEh+0x80>)
 80a0a8a:	f001 fdeb 	bl	80a2664 <_ZN5Print7printlnEPKc>

  if (!apds_.enableLightSensor(false) )
 80a0a8e:	2100      	movs	r1, #0
 80a0a90:	4620      	mov	r0, r4
 80a0a92:	f001 f934 	bl	80a1cfe <_ZN17SparkFun_APDS996017enableLightSensorEb>
 80a0a96:	b920      	cbnz	r0, 80a0aa2 <_ZN10RGBASensor4initEh+0x4e>
      Serial.println(F("[RGBA sensor]Something went wrong during light sensor init! sensor" ));
 80a0a98:	f002 faba 	bl	80a3010 <_Z16_fetch_usbserialv>
 80a0a9c:	490e      	ldr	r1, [pc, #56]	; (80a0ad8 <_ZN10RGBASensor4initEh+0x84>)
 80a0a9e:	f001 fde1 	bl	80a2664 <_ZN5Print7printlnEPKc>

  if ( !apds_.setProximityGain(PGAIN_2X) )
 80a0aa2:	2101      	movs	r1, #1
 80a0aa4:	4620      	mov	r0, r4
 80a0aa6:	f001 f896 	bl	80a1bd6 <_ZN17SparkFun_APDS996016setProximityGainEh>
 80a0aaa:	b920      	cbnz	r0, 80a0ab6 <_ZN10RGBASensor4initEh+0x62>
    Serial.println(F("[RGBA sensor]Something went wrong trying to set PGAIN sensor sensor" ));
 80a0aac:	f002 fab0 	bl	80a3010 <_Z16_fetch_usbserialv>
 80a0ab0:	490a      	ldr	r1, [pc, #40]	; (80a0adc <_ZN10RGBASensor4initEh+0x88>)
 80a0ab2:	f001 fdd7 	bl	80a2664 <_ZN5Print7printlnEPKc>

  if ( !apds_.enableProximitySensor(false) )
 80a0ab6:	2100      	movs	r1, #0
 80a0ab8:	4620      	mov	r0, r4
 80a0aba:	f001 f955 	bl	80a1d68 <_ZN17SparkFun_APDS996021enableProximitySensorEb>
 80a0abe:	b920      	cbnz	r0, 80a0aca <_ZN10RGBASensor4initEh+0x76>
     Serial.println(F("[RGBA sensor]Something went wrong during sensor init! sensor"));
 80a0ac0:	f002 faa6 	bl	80a3010 <_Z16_fetch_usbserialv>
 80a0ac4:	4906      	ldr	r1, [pc, #24]	; (80a0ae0 <_ZN10RGBASensor4initEh+0x8c>)
 80a0ac6:	f001 fdcd 	bl	80a2664 <_ZN5Print7printlnEPKc>
  setName();
 80a0aca:	4628      	mov	r0, r5
 80a0acc:	f7ff ff92 	bl	80a09f4 <_ZN10RGBASensor7setNameEv>
}
 80a0ad0:	b02b      	add	sp, #172	; 0xac
 80a0ad2:	bd30      	pop	{r4, r5, pc}
 80a0ad4:	080a62bd 	.word	0x080a62bd
 80a0ad8:	080a62fc 	.word	0x080a62fc
 80a0adc:	080a633f 	.word	0x080a633f
 80a0ae0:	080a6383 	.word	0x080a6383

080a0ae4 <_GLOBAL__sub_I__ZN10RGBASensor4initEh>:
 80a0ae4:	4b02      	ldr	r3, [pc, #8]	; (80a0af0 <_GLOBAL__sub_I__ZN10RGBASensor4initEh+0xc>)
 80a0ae6:	2201      	movs	r2, #1
 80a0ae8:	701a      	strb	r2, [r3, #0]
 80a0aea:	f001 ba5f 	b.w	80a1fac <HAL_Pin_Map>
 80a0aee:	bf00      	nop
 80a0af0:	200007a3 	.word	0x200007a3

080a0af4 <_ZN6SX1509C1Ev>:
#include "SparkFunSX1509.h"
#include "sx1509_registers.h"

SX1509::SX1509()
{
	_clkX = 0;
 80a0af4:	2200      	movs	r2, #0
 80a0af6:	6042      	str	r2, [r0, #4]
}
 80a0af8:	4770      	bx	lr

080a0afa <_ZN6SX15098readByteEh>:
//	This function reads a single byte located at the registerAddress register.
//	- deviceAddress should already be set by the constructor.
//	- Return value is the byte read from registerAddress
//		- Currently returns 0 if communication has timed out
byte SX1509::readByte(byte registerAddress)
{
 80a0afa:	b538      	push	{r3, r4, r5, lr}
 80a0afc:	4604      	mov	r4, r0
 80a0afe:	460d      	mov	r5, r1
	byte readValue;
	unsigned int timeout = RECEIVE_TIMEOUT_VALUE;

	Wire.beginTransmission(deviceAddress);
 80a0b00:	f002 fd5a 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0b04:	7821      	ldrb	r1, [r4, #0]
 80a0b06:	f002 fbd0 	bl	80a32aa <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(registerAddress);
 80a0b0a:	f002 fd55 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0b0e:	6803      	ldr	r3, [r0, #0]
 80a0b10:	4629      	mov	r1, r5
 80a0b12:	689b      	ldr	r3, [r3, #8]
 80a0b14:	4798      	blx	r3
	Wire.endTransmission();
 80a0b16:	f002 fd4f 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0b1a:	f002 fbd1 	bl	80a32c0 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(deviceAddress, (byte) 1);
 80a0b1e:	f002 fd4b 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0b22:	7821      	ldrb	r1, [r4, #0]
 80a0b24:	2201      	movs	r2, #1
 80a0b26:	f002 fbb8 	bl	80a329a <_ZN7TwoWire11requestFromEhh>
//	- Return value is the byte read from registerAddress
//		- Currently returns 0 if communication has timed out
byte SX1509::readByte(byte registerAddress)
{
	byte readValue;
	unsigned int timeout = RECEIVE_TIMEOUT_VALUE;
 80a0b2a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	Wire.beginTransmission(deviceAddress);
	Wire.write(registerAddress);
	Wire.endTransmission();
	Wire.requestFrom(deviceAddress, (byte) 1);

	while ((Wire.available() < 1) && (timeout != 0))
 80a0b2e:	f002 fd43 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0b32:	6803      	ldr	r3, [r0, #0]
 80a0b34:	691b      	ldr	r3, [r3, #16]
 80a0b36:	4798      	blx	r3
 80a0b38:	2800      	cmp	r0, #0
 80a0b3a:	dc04      	bgt.n	80a0b46 <_ZN6SX15098readByteEh+0x4c>
 80a0b3c:	b90c      	cbnz	r4, 80a0b42 <_ZN6SX15098readByteEh+0x48>
		timeout--;

	if (timeout == 0)
		return 0;
 80a0b3e:	4620      	mov	r0, r4
 80a0b40:	bd38      	pop	{r3, r4, r5, pc}
	Wire.write(registerAddress);
	Wire.endTransmission();
	Wire.requestFrom(deviceAddress, (byte) 1);

	while ((Wire.available() < 1) && (timeout != 0))
		timeout--;
 80a0b42:	3c01      	subs	r4, #1
	Wire.beginTransmission(deviceAddress);
	Wire.write(registerAddress);
	Wire.endTransmission();
	Wire.requestFrom(deviceAddress, (byte) 1);

	while ((Wire.available() < 1) && (timeout != 0))
 80a0b44:	e7f3      	b.n	80a0b2e <_ZN6SX15098readByteEh+0x34>
		timeout--;

	if (timeout == 0)
 80a0b46:	2c00      	cmp	r4, #0
 80a0b48:	d0f9      	beq.n	80a0b3e <_ZN6SX15098readByteEh+0x44>
		return 0;

	readValue = Wire.read();
 80a0b4a:	f002 fd35 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0b4e:	6803      	ldr	r3, [r0, #0]
 80a0b50:	695b      	ldr	r3, [r3, #20]
 80a0b52:	4798      	blx	r3
 80a0b54:	b2c0      	uxtb	r0, r0

	return readValue;
 80a0b56:	bd38      	pop	{r3, r4, r5, pc}

080a0b58 <_ZN6SX15098readWordEh>:
//	This function will read a two-byte word beginning at registerAddress
//	- A 16-bit unsigned int will be returned.
//		- The msb of the return value will contain the value read from registerAddress
//		- The lsb of the return value will contain the value read from registerAddress + 1
unsigned int SX1509::readWord(byte registerAddress)
{
 80a0b58:	b538      	push	{r3, r4, r5, lr}
 80a0b5a:	4604      	mov	r4, r0
 80a0b5c:	460d      	mov	r5, r1
	unsigned int readValue;
	unsigned int msb, lsb;
	unsigned int timeout = RECEIVE_TIMEOUT_VALUE * 2;

	Wire.beginTransmission(deviceAddress);
 80a0b5e:	f002 fd2b 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0b62:	7821      	ldrb	r1, [r4, #0]
 80a0b64:	f002 fba1 	bl	80a32aa <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(registerAddress);
 80a0b68:	f002 fd26 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0b6c:	6803      	ldr	r3, [r0, #0]
 80a0b6e:	4629      	mov	r1, r5
 80a0b70:	689b      	ldr	r3, [r3, #8]
 80a0b72:	4798      	blx	r3
	Wire.endTransmission();
 80a0b74:	f002 fd20 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0b78:	f002 fba2 	bl	80a32c0 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(deviceAddress, (byte) 2);
 80a0b7c:	f002 fd1c 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0b80:	7821      	ldrb	r1, [r4, #0]
 80a0b82:	2202      	movs	r2, #2
 80a0b84:	f002 fb89 	bl	80a329a <_ZN7TwoWire11requestFromEhh>
//		- The lsb of the return value will contain the value read from registerAddress + 1
unsigned int SX1509::readWord(byte registerAddress)
{
	unsigned int readValue;
	unsigned int msb, lsb;
	unsigned int timeout = RECEIVE_TIMEOUT_VALUE * 2;
 80a0b88:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	Wire.beginTransmission(deviceAddress);
	Wire.write(registerAddress);
	Wire.endTransmission();
	Wire.requestFrom(deviceAddress, (byte) 2);

	while ((Wire.available() < 2) && (timeout != 0))
 80a0b8c:	f002 fd14 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0b90:	6803      	ldr	r3, [r0, #0]
 80a0b92:	691b      	ldr	r3, [r3, #16]
 80a0b94:	4798      	blx	r3
 80a0b96:	2801      	cmp	r0, #1
 80a0b98:	dc04      	bgt.n	80a0ba4 <_ZN6SX15098readWordEh+0x4c>
 80a0b9a:	b90c      	cbnz	r4, 80a0ba0 <_ZN6SX15098readWordEh+0x48>
		timeout--;

	if (timeout == 0)
		return 0;
 80a0b9c:	4620      	mov	r0, r4
 80a0b9e:	bd38      	pop	{r3, r4, r5, pc}
	Wire.write(registerAddress);
	Wire.endTransmission();
	Wire.requestFrom(deviceAddress, (byte) 2);

	while ((Wire.available() < 2) && (timeout != 0))
		timeout--;
 80a0ba0:	3c01      	subs	r4, #1
	Wire.beginTransmission(deviceAddress);
	Wire.write(registerAddress);
	Wire.endTransmission();
	Wire.requestFrom(deviceAddress, (byte) 2);

	while ((Wire.available() < 2) && (timeout != 0))
 80a0ba2:	e7f3      	b.n	80a0b8c <_ZN6SX15098readWordEh+0x34>
		timeout--;

	if (timeout == 0)
 80a0ba4:	2c00      	cmp	r4, #0
 80a0ba6:	d0f9      	beq.n	80a0b9c <_ZN6SX15098readWordEh+0x44>
		return 0;

	msb = (Wire.read() & 0x00FF) << 8;
 80a0ba8:	f002 fd06 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0bac:	6803      	ldr	r3, [r0, #0]
 80a0bae:	695b      	ldr	r3, [r3, #20]
 80a0bb0:	4798      	blx	r3
 80a0bb2:	4604      	mov	r4, r0
	lsb = (Wire.read() & 0x00FF);
 80a0bb4:	f002 fd00 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0bb8:	6803      	ldr	r3, [r0, #0]
	readValue = msb | lsb;
 80a0bba:	0224      	lsls	r4, r4, #8

	if (timeout == 0)
		return 0;

	msb = (Wire.read() & 0x00FF) << 8;
	lsb = (Wire.read() & 0x00FF);
 80a0bbc:	695b      	ldr	r3, [r3, #20]
 80a0bbe:	4798      	blx	r3
	readValue = msb | lsb;
 80a0bc0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80a0bc4:	b2c0      	uxtb	r0, r0
 80a0bc6:	4320      	orrs	r0, r4

	return readValue;
 80a0bc8:	bd38      	pop	{r3, r4, r5, pc}

080a0bca <_ZN6SX15099writeByteEhh>:
//	This function writes a single byte to a single register on the SX509.
//	- writeValue is written to registerAddress
//	- deviceAddres should already be set from the constructor
//	- No return value.
void SX1509::writeByte(byte registerAddress, byte writeValue)
{
 80a0bca:	b570      	push	{r4, r5, r6, lr}
 80a0bcc:	4606      	mov	r6, r0
 80a0bce:	4614      	mov	r4, r2
 80a0bd0:	460d      	mov	r5, r1
	Wire.beginTransmission(deviceAddress);
 80a0bd2:	f002 fcf1 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0bd6:	7831      	ldrb	r1, [r6, #0]
 80a0bd8:	f002 fb67 	bl	80a32aa <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(registerAddress);
 80a0bdc:	f002 fcec 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0be0:	6803      	ldr	r3, [r0, #0]
 80a0be2:	4629      	mov	r1, r5
 80a0be4:	689b      	ldr	r3, [r3, #8]
 80a0be6:	4798      	blx	r3
	Wire.write(writeValue);
 80a0be8:	f002 fce6 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0bec:	6803      	ldr	r3, [r0, #0]
 80a0bee:	4621      	mov	r1, r4
 80a0bf0:	689b      	ldr	r3, [r3, #8]
 80a0bf2:	4798      	blx	r3
	Wire.endTransmission();
 80a0bf4:	f002 fce0 	bl	80a35b8 <_Z19__fetch_global_Wirev>
}
 80a0bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void SX1509::writeByte(byte registerAddress, byte writeValue)
{
	Wire.beginTransmission(deviceAddress);
	Wire.write(registerAddress);
	Wire.write(writeValue);
	Wire.endTransmission();
 80a0bfc:	f002 bb60 	b.w	80a32c0 <_ZN7TwoWire15endTransmissionEv>

080a0c00 <_ZN6SX150911configClockEhhhh>:
{
	configClock(oscSource, oscPinFunction, oscFreqOut, oscDivider);
}

void SX1509::configClock(byte oscSource /*= 2*/, byte oscPinFunction /*= 0*/, byte oscFreqOut /*= 0*/, byte oscDivider /*= 1*/)
{
 80a0c00:	b538      	push	{r3, r4, r5, lr}
	//	4 - OSCIO pin function
	//		0: input, 1 ouptut
	//	3:0 - Frequency of oscout pin
	//		0: LOW, 0xF: high, else fOSCOUT = FoSC/(2^(RegClock[3:0]-1))
	oscSource = (oscSource & 0b11)<<5;		// 2-bit value, bits 6:5
	oscPinFunction = (oscPinFunction & 1)<<4;	// 1-bit value bit 4
 80a0c02:	0112      	lsls	r2, r2, #4
	oscFreqOut = (oscFreqOut & 0b1111);	// 4-bit value, bits 3:0
	byte regClock = oscSource | oscPinFunction | oscFreqOut;
	writeByte(REG_CLOCK, regClock);
 80a0c04:	f003 030f 	and.w	r3, r3, #15
	//		00: off, 01: external input, 10: internal 2MHz, 1: reserved
	//	4 - OSCIO pin function
	//		0: input, 1 ouptut
	//	3:0 - Frequency of oscout pin
	//		0: LOW, 0xF: high, else fOSCOUT = FoSC/(2^(RegClock[3:0]-1))
	oscSource = (oscSource & 0b11)<<5;		// 2-bit value, bits 6:5
 80a0c08:	0149      	lsls	r1, r1, #5
	oscPinFunction = (oscPinFunction & 1)<<4;	// 1-bit value bit 4
	oscFreqOut = (oscFreqOut & 0b1111);	// 4-bit value, bits 3:0
	byte regClock = oscSource | oscPinFunction | oscFreqOut;
	writeByte(REG_CLOCK, regClock);
 80a0c0a:	f002 0210 	and.w	r2, r2, #16
 80a0c0e:	431a      	orrs	r2, r3
 80a0c10:	f001 0160 	and.w	r1, r1, #96	; 0x60
{
	configClock(oscSource, oscPinFunction, oscFreqOut, oscDivider);
}

void SX1509::configClock(byte oscSource /*= 2*/, byte oscPinFunction /*= 0*/, byte oscFreqOut /*= 0*/, byte oscDivider /*= 1*/)
{
 80a0c14:	f89d 4010 	ldrb.w	r4, [sp, #16]
	//		0: LOW, 0xF: high, else fOSCOUT = FoSC/(2^(RegClock[3:0]-1))
	oscSource = (oscSource & 0b11)<<5;		// 2-bit value, bits 6:5
	oscPinFunction = (oscPinFunction & 1)<<4;	// 1-bit value bit 4
	oscFreqOut = (oscFreqOut & 0b1111);	// 4-bit value, bits 3:0
	byte regClock = oscSource | oscPinFunction | oscFreqOut;
	writeByte(REG_CLOCK, regClock);
 80a0c18:	430a      	orrs	r2, r1
 80a0c1a:	211e      	movs	r1, #30
{
	configClock(oscSource, oscPinFunction, oscFreqOut, oscDivider);
}

void SX1509::configClock(byte oscSource /*= 2*/, byte oscPinFunction /*= 0*/, byte oscFreqOut /*= 0*/, byte oscDivider /*= 1*/)
{
 80a0c1c:	4605      	mov	r5, r0
	//		0: LOW, 0xF: high, else fOSCOUT = FoSC/(2^(RegClock[3:0]-1))
	oscSource = (oscSource & 0b11)<<5;		// 2-bit value, bits 6:5
	oscPinFunction = (oscPinFunction & 1)<<4;	// 1-bit value bit 4
	oscFreqOut = (oscFreqOut & 0b1111);	// 4-bit value, bits 3:0
	byte regClock = oscSource | oscPinFunction | oscFreqOut;
	writeByte(REG_CLOCK, regClock);
 80a0c1e:	f7ff ffd4 	bl	80a0bca <_ZN6SX15099writeByteEhh>
 80a0c22:	2301      	movs	r3, #1

	// Config RegMisc[6:4] with oscDivider
	// 0: off, else ClkX = fOSC / (2^(RegMisc[6:4] -1))
	oscDivider = constrain(oscDivider, 1, 7);
 80a0c24:	b11c      	cbz	r4, 80a0c2e <_ZN6SX150911configClockEhhhh+0x2e>
 80a0c26:	2c07      	cmp	r4, #7
 80a0c28:	bf28      	it	cs
 80a0c2a:	2407      	movcs	r4, #7
 80a0c2c:	e000      	b.n	80a0c30 <_ZN6SX150911configClockEhhhh+0x30>
 80a0c2e:	461c      	mov	r4, r3
	_clkX = 2000000.0 / (1<<(oscDivider - 1)); // Update private clock variable
 80a0c30:	1e60      	subs	r0, r4, #1
 80a0c32:	fa03 f000 	lsl.w	r0, r3, r0
 80a0c36:	f004 fb27 	bl	80a5288 <__aeabi_i2d>
 80a0c3a:	4602      	mov	r2, r0
 80a0c3c:	460b      	mov	r3, r1
 80a0c3e:	a10c      	add	r1, pc, #48	; (adr r1, 80a0c70 <_ZN6SX150911configClockEhhhh+0x70>)
 80a0c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0c44:	f004 fcb0 	bl	80a55a8 <__aeabi_ddiv>
 80a0c48:	f004 fe34 	bl	80a58b4 <__aeabi_d2uiz>
	oscDivider = (oscDivider & 0b111)<<4;	// 3-bit value, bits 6:4

	byte regMisc = readByte(REG_MISC);
 80a0c4c:	211f      	movs	r1, #31
	writeByte(REG_CLOCK, regClock);

	// Config RegMisc[6:4] with oscDivider
	// 0: off, else ClkX = fOSC / (2^(RegMisc[6:4] -1))
	oscDivider = constrain(oscDivider, 1, 7);
	_clkX = 2000000.0 / (1<<(oscDivider - 1)); // Update private clock variable
 80a0c4e:	6068      	str	r0, [r5, #4]
	oscDivider = (oscDivider & 0b111)<<4;	// 3-bit value, bits 6:4

	byte regMisc = readByte(REG_MISC);
 80a0c50:	4628      	mov	r0, r5
 80a0c52:	f7ff ff52 	bl	80a0afa <_ZN6SX15098readByteEh>
	regMisc &= ~(0b111<<4);
	regMisc |= oscDivider;
	writeByte(REG_MISC, regMisc);
 80a0c56:	0124      	lsls	r4, r4, #4
	oscDivider = constrain(oscDivider, 1, 7);
	_clkX = 2000000.0 / (1<<(oscDivider - 1)); // Update private clock variable
	oscDivider = (oscDivider & 0b111)<<4;	// 3-bit value, bits 6:4

	byte regMisc = readByte(REG_MISC);
	regMisc &= ~(0b111<<4);
 80a0c58:	f000 028f 	and.w	r2, r0, #143	; 0x8f
	regMisc |= oscDivider;
	writeByte(REG_MISC, regMisc);
 80a0c5c:	f004 0470 	and.w	r4, r4, #112	; 0x70
 80a0c60:	4322      	orrs	r2, r4
 80a0c62:	4628      	mov	r0, r5
}
 80a0c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	oscDivider = (oscDivider & 0b111)<<4;	// 3-bit value, bits 6:4

	byte regMisc = readByte(REG_MISC);
	regMisc &= ~(0b111<<4);
	regMisc |= oscDivider;
	writeByte(REG_MISC, regMisc);
 80a0c68:	211f      	movs	r1, #31
 80a0c6a:	f7ff bfae 	b.w	80a0bca <_ZN6SX15099writeByteEhh>
 80a0c6e:	bf00      	nop
 80a0c70:	00000000 	.word	0x00000000
 80a0c74:	413e8480 	.word	0x413e8480

080a0c78 <_ZN6SX15099writeWordEhj>:
//	This function writes a two-byte word to registerAddress and registerAddress + 1
//	- the upper byte of writeValue is written to registerAddress
//		- the lower byte of writeValue is written to registerAddress + 1
//	- No return value.
void SX1509::writeWord(byte registerAddress, unsigned int writeValue)
{
 80a0c78:	b570      	push	{r4, r5, r6, lr}
 80a0c7a:	4606      	mov	r6, r0
 80a0c7c:	4614      	mov	r4, r2
 80a0c7e:	460d      	mov	r5, r1
	byte msb, lsb;
	msb = ((writeValue & 0xFF00) >> 8);
	lsb = (writeValue & 0x00FF);
	Wire.beginTransmission(deviceAddress);
 80a0c80:	f002 fc9a 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0c84:	7831      	ldrb	r1, [r6, #0]
 80a0c86:	f002 fb10 	bl	80a32aa <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(registerAddress);
 80a0c8a:	f002 fc95 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0c8e:	6803      	ldr	r3, [r0, #0]
 80a0c90:	4629      	mov	r1, r5
 80a0c92:	689b      	ldr	r3, [r3, #8]
 80a0c94:	4798      	blx	r3
	Wire.write(msb);
 80a0c96:	f002 fc8f 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0c9a:	6803      	ldr	r3, [r0, #0]
 80a0c9c:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a0ca0:	689b      	ldr	r3, [r3, #8]
 80a0ca2:	4798      	blx	r3
	Wire.write(lsb);
 80a0ca4:	f002 fc88 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0ca8:	6803      	ldr	r3, [r0, #0]
 80a0caa:	b2e1      	uxtb	r1, r4
 80a0cac:	689b      	ldr	r3, [r3, #8]
 80a0cae:	4798      	blx	r3
	Wire.endTransmission();
 80a0cb0:	f002 fc82 	bl	80a35b8 <_Z19__fetch_global_Wirev>
}
 80a0cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lsb = (writeValue & 0x00FF);
	Wire.beginTransmission(deviceAddress);
	Wire.write(registerAddress);
	Wire.write(msb);
	Wire.write(lsb);
	Wire.endTransmission();
 80a0cb8:	f002 bb02 	b.w	80a32c0 <_ZN7TwoWire15endTransmissionEv>

080a0cbc <_ZN6SX15098writePinEhh>:
{
	pinDir(pin, inOut);
}

void SX1509::writePin(byte pin, byte highLow)
{
 80a0cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0cbe:	460d      	mov	r5, r1
	unsigned int tempRegDir = readWord(REG_DIR_B);
 80a0cc0:	210e      	movs	r1, #14
{
	pinDir(pin, inOut);
}

void SX1509::writePin(byte pin, byte highLow)
{
 80a0cc2:	4616      	mov	r6, r2
 80a0cc4:	4604      	mov	r4, r0
	unsigned int tempRegDir = readWord(REG_DIR_B);
 80a0cc6:	f7ff ff47 	bl	80a0b58 <_ZN6SX15098readWordEh>

	if ((0xFFFF^tempRegDir)&(1<<pin))	// If the pin is an output, write high/low
 80a0cca:	2201      	movs	r2, #1
 80a0ccc:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 80a0cd0:	fa02 f505 	lsl.w	r5, r2, r5
 80a0cd4:	f080 00ff 	eor.w	r0, r0, #255	; 0xff
 80a0cd8:	4228      	tst	r0, r5
 80a0cda:	d00b      	beq.n	80a0cf4 <_ZN6SX15098writePinEhh+0x38>
	{
		unsigned int tempRegData = readWord(REG_DATA_B);
 80a0cdc:	2110      	movs	r1, #16
 80a0cde:	4620      	mov	r0, r4
 80a0ce0:	f7ff ff3a 	bl	80a0b58 <_ZN6SX15098readWordEh>
		if (highLow)	tempRegData |= (1<<pin);
 80a0ce4:	b116      	cbz	r6, 80a0cec <_ZN6SX15098writePinEhh+0x30>
 80a0ce6:	ea45 0200 	orr.w	r2, r5, r0
 80a0cea:	e001      	b.n	80a0cf0 <_ZN6SX15098writePinEhh+0x34>
		else			tempRegData &= ~(1<<pin);
 80a0cec:	ea20 0205 	bic.w	r2, r0, r5
		writeWord(REG_DATA_B, tempRegData);
 80a0cf0:	2110      	movs	r1, #16
 80a0cf2:	e01c      	b.n	80a0d2e <_ZN6SX15098writePinEhh+0x72>
	}
	else	// Otherwise the pin is an input, pull-up/down
	{
		unsigned int tempPullUp = readWord(REG_PULL_UP_B);
 80a0cf4:	2106      	movs	r1, #6
 80a0cf6:	4620      	mov	r0, r4
 80a0cf8:	f7ff ff2e 	bl	80a0b58 <_ZN6SX15098readWordEh>
		unsigned int tempPullDown = readWord(REG_PULL_DOWN_B);
 80a0cfc:	2108      	movs	r1, #8
		else			tempRegData &= ~(1<<pin);
		writeWord(REG_DATA_B, tempRegData);
	}
	else	// Otherwise the pin is an input, pull-up/down
	{
		unsigned int tempPullUp = readWord(REG_PULL_UP_B);
 80a0cfe:	4607      	mov	r7, r0
		unsigned int tempPullDown = readWord(REG_PULL_DOWN_B);
 80a0d00:	4620      	mov	r0, r4
 80a0d02:	f7ff ff29 	bl	80a0b58 <_ZN6SX15098readWordEh>
 80a0d06:	43ea      	mvns	r2, r5

		if (highLow)	// if HIGH, do pull-up, disable pull-down
 80a0d08:	b14e      	cbz	r6, 80a0d1e <_ZN6SX15098writePinEhh+0x62>
		{
			tempPullUp |= (1<<pin);
			tempPullDown &= ~(1<<pin);
 80a0d0a:	ea02 0600 	and.w	r6, r2, r0
			writeWord(REG_PULL_UP_B, tempPullUp);
 80a0d0e:	2106      	movs	r1, #6
 80a0d10:	ea45 0207 	orr.w	r2, r5, r7
 80a0d14:	4620      	mov	r0, r4
 80a0d16:	f7ff ffaf 	bl	80a0c78 <_ZN6SX15099writeWordEhj>
			writeWord(REG_PULL_DOWN_B, tempPullDown);
 80a0d1a:	4632      	mov	r2, r6
 80a0d1c:	e006      	b.n	80a0d2c <_ZN6SX15098writePinEhh+0x70>
		}
		else	// If LOW do pull-down, disable pull-up
		{
			tempPullDown |= (1<<pin);
 80a0d1e:	4305      	orrs	r5, r0
			tempPullUp &= ~(1<<pin);
			writeWord(REG_PULL_UP_B, tempPullUp);
 80a0d20:	403a      	ands	r2, r7
 80a0d22:	2106      	movs	r1, #6
 80a0d24:	4620      	mov	r0, r4
 80a0d26:	f7ff ffa7 	bl	80a0c78 <_ZN6SX15099writeWordEhj>
			writeWord(REG_PULL_DOWN_B, tempPullDown);
 80a0d2a:	462a      	mov	r2, r5
 80a0d2c:	2108      	movs	r1, #8
 80a0d2e:	4620      	mov	r0, r4
		}
	}
}
 80a0d30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		else	// If LOW do pull-down, disable pull-up
		{
			tempPullDown |= (1<<pin);
			tempPullUp &= ~(1<<pin);
			writeWord(REG_PULL_UP_B, tempPullUp);
			writeWord(REG_PULL_DOWN_B, tempPullDown);
 80a0d34:	f7ff bfa0 	b.w	80a0c78 <_ZN6SX15099writeWordEhj>

080a0d38 <_ZN6SX150913ledDriverInitEhhb>:
{
	return readPin(pin);
}

void SX1509::ledDriverInit(byte pin, byte freq /*= 1*/, bool log /*= false*/)
{
 80a0d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d3a:	460d      	mov	r5, r1
	unsigned int tempWord;
	byte tempByte;

	// Disable input buffer
	// Writing a 1 to the pin bit will disable that pins input buffer
	tempWord = readWord(REG_INPUT_DISABLE_B);
 80a0d3c:	2100      	movs	r1, #0
{
	return readPin(pin);
}

void SX1509::ledDriverInit(byte pin, byte freq /*= 1*/, bool log /*= false*/)
{
 80a0d3e:	4604      	mov	r4, r0
 80a0d40:	461f      	mov	r7, r3
	unsigned int tempWord;
	byte tempByte;

	// Disable input buffer
	// Writing a 1 to the pin bit will disable that pins input buffer
	tempWord = readWord(REG_INPUT_DISABLE_B);
 80a0d42:	f7ff ff09 	bl	80a0b58 <_ZN6SX15098readWordEh>
	tempWord |= (1<<pin);
 80a0d46:	2301      	movs	r3, #1
 80a0d48:	fa03 f505 	lsl.w	r5, r3, r5
	writeWord(REG_INPUT_DISABLE_B, tempWord);
 80a0d4c:	ea40 0205 	orr.w	r2, r0, r5
 80a0d50:	2100      	movs	r1, #0
 80a0d52:	4620      	mov	r0, r4
 80a0d54:	f7ff ff90 	bl	80a0c78 <_ZN6SX15099writeWordEhj>

	// Disable pull-up
	// Writing a 0 to the pin bit will disable that pull-up resistor
	tempWord = readWord(REG_PULL_UP_B);
 80a0d58:	2106      	movs	r1, #6
 80a0d5a:	4620      	mov	r0, r4
 80a0d5c:	f7ff fefc 	bl	80a0b58 <_ZN6SX15098readWordEh>
	tempWord &= ~(1<<pin);
 80a0d60:	43ee      	mvns	r6, r5
	writeWord(REG_PULL_UP_B, tempWord);
 80a0d62:	2106      	movs	r1, #6
 80a0d64:	ea00 0206 	and.w	r2, r0, r6
 80a0d68:	4620      	mov	r0, r4
 80a0d6a:	f7ff ff85 	bl	80a0c78 <_ZN6SX15099writeWordEhj>

	// Set direction to output (REG_DIR_B)
	tempWord = readWord(REG_DIR_B);
 80a0d6e:	210e      	movs	r1, #14
 80a0d70:	4620      	mov	r0, r4
 80a0d72:	f7ff fef1 	bl	80a0b58 <_ZN6SX15098readWordEh>
	tempWord &= ~(1<<pin); // 0=output
	writeWord(REG_DIR_B, tempWord);
 80a0d76:	210e      	movs	r1, #14
 80a0d78:	ea06 0200 	and.w	r2, r6, r0
 80a0d7c:	4620      	mov	r0, r4
 80a0d7e:	f7ff ff7b 	bl	80a0c78 <_ZN6SX15099writeWordEhj>

	// Enable oscillator (REG_CLOCK)
	tempByte = readByte(REG_CLOCK);
 80a0d82:	211e      	movs	r1, #30
 80a0d84:	4620      	mov	r0, r4
 80a0d86:	f7ff feb8 	bl	80a0afa <_ZN6SX15098readByteEh>
 80a0d8a:	f000 02df 	and.w	r2, r0, #223	; 0xdf
	tempByte |= (1<<6);	// Internal 2MHz oscillator part 1 (set bit 6)
	tempByte &= ~(1<<5);	// Internal 2MHz oscillator part 2 (clear bit 5)
	writeByte(REG_CLOCK, tempByte);
 80a0d8e:	211e      	movs	r1, #30
 80a0d90:	4620      	mov	r0, r4
 80a0d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80a0d96:	f7ff ff18 	bl	80a0bca <_ZN6SX15099writeByteEhh>

	// Configure LED driver clock and mode (REG_MISC)
	tempByte = readByte(REG_MISC);
 80a0d9a:	211f      	movs	r1, #31
 80a0d9c:	4620      	mov	r0, r4
 80a0d9e:	f7ff feac 	bl	80a0afa <_ZN6SX15098readByteEh>
	if (log)
 80a0da2:	b11f      	cbz	r7, 80a0dac <_ZN6SX150913ledDriverInitEhhb+0x74>
	{
		tempByte |= (1<<7);	// set logarithmic mode bank B
		tempByte |= (1<<3);	// set logarithmic mode bank A
 80a0da4:	f060 0277 	orn	r2, r0, #119	; 0x77
 80a0da8:	b2d2      	uxtb	r2, r2
 80a0daa:	e001      	b.n	80a0db0 <_ZN6SX150913ledDriverInitEhhb+0x78>
	}
	else
	{
		tempByte &= ~(1<<7);	// set linear mode bank B
		tempByte &= ~(1<<3);	// set linear mode bank A
 80a0dac:	f000 0277 	and.w	r2, r0, #119	; 0x77
	}

	// Use configClock to setup the clock divder
	if (_clkX == 0) // Make clckX non-zero
 80a0db0:	6863      	ldr	r3, [r4, #4]
 80a0db2:	b91b      	cbnz	r3, 80a0dbc <_ZN6SX150913ledDriverInitEhhb+0x84>
	{
		_clkX = 2000000.0 / (1<<(1 - 1)); // Update private clock variable
 80a0db4:	4b0e      	ldr	r3, [pc, #56]	; (80a0df0 <_ZN6SX150913ledDriverInitEhhb+0xb8>)

		byte freq = (1 & 0x07) << 4;	// freq should only be 3 bits from 6:4
		tempByte |= freq;
 80a0db6:	f042 0210 	orr.w	r2, r2, #16
	}

	// Use configClock to setup the clock divder
	if (_clkX == 0) // Make clckX non-zero
	{
		_clkX = 2000000.0 / (1<<(1 - 1)); // Update private clock variable
 80a0dba:	6063      	str	r3, [r4, #4]

		byte freq = (1 & 0x07) << 4;	// freq should only be 3 bits from 6:4
		tempByte |= freq;
	}
	writeByte(REG_MISC, tempByte);
 80a0dbc:	4620      	mov	r0, r4
 80a0dbe:	211f      	movs	r1, #31
 80a0dc0:	f7ff ff03 	bl	80a0bca <_ZN6SX15099writeByteEhh>

	// Enable LED driver operation (REG_LED_DRIVER_ENABLE)
	tempWord = readWord(REG_LED_DRIVER_ENABLE_B);
 80a0dc4:	2120      	movs	r1, #32
 80a0dc6:	4620      	mov	r0, r4
 80a0dc8:	f7ff fec6 	bl	80a0b58 <_ZN6SX15098readWordEh>
	tempWord |= (1<<pin);
	writeWord(REG_LED_DRIVER_ENABLE_B, tempWord);
 80a0dcc:	2120      	movs	r1, #32
 80a0dce:	ea45 0200 	orr.w	r2, r5, r0
 80a0dd2:	4620      	mov	r0, r4
 80a0dd4:	f7ff ff50 	bl	80a0c78 <_ZN6SX15099writeWordEhj>

	// Set REG_DATA bit low ~ LED driver started
	tempWord = readWord(REG_DATA_B);
 80a0dd8:	2110      	movs	r1, #16
 80a0dda:	4620      	mov	r0, r4
 80a0ddc:	f7ff febc 	bl	80a0b58 <_ZN6SX15098readWordEh>
	tempWord &= ~(1<<pin);
	writeWord(REG_DATA_B, tempWord);
 80a0de0:	2110      	movs	r1, #16
 80a0de2:	ea06 0200 	and.w	r2, r6, r0
 80a0de6:	4620      	mov	r0, r4
}
 80a0de8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	writeWord(REG_LED_DRIVER_ENABLE_B, tempWord);

	// Set REG_DATA bit low ~ LED driver started
	tempWord = readWord(REG_DATA_B);
	tempWord &= ~(1<<pin);
	writeWord(REG_DATA_B, tempWord);
 80a0dec:	f7ff bf44 	b.w	80a0c78 <_ZN6SX15099writeWordEhj>
 80a0df0:	001e8480 	.word	0x001e8480

080a0df4 <_ZN6SX15096pinDirEhh>:
		writeByte(REG_RESET, 0x34);
	}
}

void SX1509::pinDir(byte pin, byte inOut)
{
 80a0df4:	b570      	push	{r4, r5, r6, lr}
 80a0df6:	4616      	mov	r6, r2
 80a0df8:	460c      	mov	r4, r1
	if ((inOut == OUTPUT) || (inOut == ANALOG_OUTPUT))
		modeBit = 0;
	else
		modeBit = 1;

	unsigned int tempRegDir = readWord(REG_DIR_B);
 80a0dfa:	210e      	movs	r1, #14
		writeByte(REG_RESET, 0x34);
	}
}

void SX1509::pinDir(byte pin, byte inOut)
{
 80a0dfc:	4605      	mov	r5, r0
	if ((inOut == OUTPUT) || (inOut == ANALOG_OUTPUT))
		modeBit = 0;
	else
		modeBit = 1;

	unsigned int tempRegDir = readWord(REG_DIR_B);
 80a0dfe:	f7ff feab 	bl	80a0b58 <_ZN6SX15098readWordEh>
	if (modeBit)
 80a0e02:	f006 03fd 	and.w	r3, r6, #253	; 0xfd
 80a0e06:	2b01      	cmp	r3, #1
 80a0e08:	f04f 0301 	mov.w	r3, #1
		tempRegDir |= (1<<pin);
 80a0e0c:	fa03 f304 	lsl.w	r3, r3, r4
 80a0e10:	bf14      	ite	ne
 80a0e12:	ea43 0200 	orrne.w	r2, r3, r0
	else
		tempRegDir &= ~(1<<pin);
 80a0e16:	ea20 0203 	biceq.w	r2, r0, r3

	writeWord(REG_DIR_B, tempRegDir);
 80a0e1a:	210e      	movs	r1, #14
 80a0e1c:	4628      	mov	r0, r5
 80a0e1e:	f7ff ff2b 	bl	80a0c78 <_ZN6SX15099writeWordEhj>

	// If INPUT_PULLUP was called, set up the pullup too:
	if (inOut == INPUT_PULLUP)
 80a0e22:	2e02      	cmp	r6, #2
 80a0e24:	d106      	bne.n	80a0e34 <_ZN6SX15096pinDirEhh+0x40>
		writePin(pin, HIGH);
 80a0e26:	4621      	mov	r1, r4
 80a0e28:	4628      	mov	r0, r5

	if (inOut == ANALOG_OUTPUT)
	{
		ledDriverInit(pin);
	}
}
 80a0e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	writeWord(REG_DIR_B, tempRegDir);

	// If INPUT_PULLUP was called, set up the pullup too:
	if (inOut == INPUT_PULLUP)
		writePin(pin, HIGH);
 80a0e2e:	2201      	movs	r2, #1
 80a0e30:	f7ff bf44 	b.w	80a0cbc <_ZN6SX15098writePinEhh>

	if (inOut == ANALOG_OUTPUT)
 80a0e34:	2e03      	cmp	r6, #3
 80a0e36:	d107      	bne.n	80a0e48 <_ZN6SX15096pinDirEhh+0x54>
	{
		ledDriverInit(pin);
 80a0e38:	4621      	mov	r1, r4
 80a0e3a:	4628      	mov	r0, r5
	}
}
 80a0e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (inOut == INPUT_PULLUP)
		writePin(pin, HIGH);

	if (inOut == ANALOG_OUTPUT)
	{
		ledDriverInit(pin);
 80a0e40:	2300      	movs	r3, #0
 80a0e42:	2201      	movs	r2, #1
 80a0e44:	f7ff bf78 	b.w	80a0d38 <_ZN6SX150913ledDriverInitEhhb>
 80a0e48:	bd70      	pop	{r4, r5, r6, pc}

080a0e4a <_ZN6SX15097pinModeEhh>:
	}
}

void SX1509::pinMode(byte pin, byte inOut)
{
	pinDir(pin, inOut);
 80a0e4a:	f7ff bfd3 	b.w	80a0df4 <_ZN6SX15096pinDirEhh>

080a0e4e <_ZN6SX15095resetEb.part.1>:
	}

	return 0;
}

void SX1509::reset(bool hardware)
 80a0e4e:	b510      	push	{r4, lr}
	// if hardware bool is set
	if (hardware)
	{
		// Check if bit 2 of REG_MISC is set
		// if so nReset will not issue a POR, we'll need to clear that bit first
		byte regMisc = readByte(REG_MISC);
 80a0e50:	211f      	movs	r1, #31
	}

	return 0;
}

void SX1509::reset(bool hardware)
 80a0e52:	4604      	mov	r4, r0
	// if hardware bool is set
	if (hardware)
	{
		// Check if bit 2 of REG_MISC is set
		// if so nReset will not issue a POR, we'll need to clear that bit first
		byte regMisc = readByte(REG_MISC);
 80a0e54:	f7ff fe51 	bl	80a0afa <_ZN6SX15098readByteEh>
		if (regMisc & (1<<2))
 80a0e58:	0743      	lsls	r3, r0, #29
 80a0e5a:	d505      	bpl.n	80a0e68 <_ZN6SX15095resetEb.part.1+0x1a>
		{
			regMisc &= ~(1<<2);
			writeByte(REG_MISC, regMisc);
 80a0e5c:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
 80a0e60:	211f      	movs	r1, #31
 80a0e62:	4620      	mov	r0, r4
 80a0e64:	f7ff feb1 	bl	80a0bca <_ZN6SX15099writeByteEhh>
	}
}

void SX1509::pinMode(byte pin, byte inOut)
{
	pinDir(pin, inOut);
 80a0e68:	78e1      	ldrb	r1, [r4, #3]
 80a0e6a:	4620      	mov	r0, r4
 80a0e6c:	2201      	movs	r2, #1
 80a0e6e:	f7ff ffc1 	bl	80a0df4 <_ZN6SX15096pinDirEhh>
	}
}

void SX1509::digitalWrite(byte pin, byte highLow)
{
	writePin(pin, highLow);
 80a0e72:	78e1      	ldrb	r1, [r4, #3]
 80a0e74:	2200      	movs	r2, #0
 80a0e76:	4620      	mov	r0, r4
 80a0e78:	f7ff ff20 	bl	80a0cbc <_ZN6SX15098writePinEhh>
			writeByte(REG_MISC, regMisc);
		}
		// Reset the SX1509, the pin is active low
		pinMode(pinReset, OUTPUT);	// set reset pin as output
		digitalWrite(pinReset, LOW);	// pull reset pin low
		delay(1);	// Wait for the pin to settle
 80a0e7c:	2001      	movs	r0, #1
 80a0e7e:	f001 fc5d 	bl	80a273c <delay>
	}
}

void SX1509::digitalWrite(byte pin, byte highLow)
{
	writePin(pin, highLow);
 80a0e82:	78e1      	ldrb	r1, [r4, #3]
 80a0e84:	4620      	mov	r0, r4
	{
		// Software reset command sequence:
		writeByte(REG_RESET, 0x12);
		writeByte(REG_RESET, 0x34);
	}
}
 80a0e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
}

void SX1509::digitalWrite(byte pin, byte highLow)
{
	writePin(pin, highLow);
 80a0e8a:	2201      	movs	r2, #1
 80a0e8c:	f7ff bf16 	b.w	80a0cbc <_ZN6SX15098writePinEhh>

080a0e90 <_ZN6SX15095resetEb>:

	return 0;
}

void SX1509::reset(bool hardware)
{
 80a0e90:	b510      	push	{r4, lr}
 80a0e92:	4604      	mov	r4, r0
	// if hardware bool is set
	if (hardware)
 80a0e94:	b119      	cbz	r1, 80a0e9e <_ZN6SX15095resetEb+0xe>
	{
		// Software reset command sequence:
		writeByte(REG_RESET, 0x12);
		writeByte(REG_RESET, 0x34);
	}
}
 80a0e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0e9a:	f7ff bfd8 	b.w	80a0e4e <_ZN6SX15095resetEb.part.1>
		digitalWrite(pinReset, HIGH);	// pull reset pin back high
	}
	else
	{
		// Software reset command sequence:
		writeByte(REG_RESET, 0x12);
 80a0e9e:	2212      	movs	r2, #18
 80a0ea0:	217d      	movs	r1, #125	; 0x7d
 80a0ea2:	f7ff fe92 	bl	80a0bca <_ZN6SX15099writeByteEhh>
		writeByte(REG_RESET, 0x34);
 80a0ea6:	4620      	mov	r0, r4
	}
}
 80a0ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	else
	{
		// Software reset command sequence:
		writeByte(REG_RESET, 0x12);
		writeByte(REG_RESET, 0x34);
 80a0eac:	2234      	movs	r2, #52	; 0x34
 80a0eae:	217d      	movs	r1, #125	; 0x7d
 80a0eb0:	f7ff be8b 	b.w	80a0bca <_ZN6SX15099writeByteEhh>

080a0eb4 <_ZN6SX15094initEv>:

	return init();
}

byte SX1509::init(void)
{
 80a0eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0eb6:	4605      	mov	r5, r0
	// Begin I2C
	Wire.begin();
 80a0eb8:	f002 fb7e 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a0ebc:	f002 f9de 	bl	80a327c <_ZN7TwoWire5beginEv>

	// If the reset pin is connected
	if (pinReset != 255)
 80a0ec0:	78eb      	ldrb	r3, [r5, #3]
 80a0ec2:	2bff      	cmp	r3, #255	; 0xff
 80a0ec4:	d003      	beq.n	80a0ece <_ZN6SX15094initEv+0x1a>
 80a0ec6:	4628      	mov	r0, r5
 80a0ec8:	f7ff ffc1 	bl	80a0e4e <_ZN6SX15095resetEb.part.1>
 80a0ecc:	e003      	b.n	80a0ed6 <_ZN6SX15094initEv+0x22>
		reset(1);
	else
		reset(0);
 80a0ece:	2100      	movs	r1, #0
 80a0ed0:	4628      	mov	r0, r5
 80a0ed2:	f7ff ffdd 	bl	80a0e90 <_ZN6SX15095resetEb>

	// Communication test. We'll read from two registers with different
	// default values to verify communication.
	unsigned int testRegisters = 0;
	testRegisters = readWord(REG_INTERRUPT_MASK_A);	// This should return 0xFF00
 80a0ed6:	2113      	movs	r1, #19
 80a0ed8:	4628      	mov	r0, r5
 80a0eda:	f7ff fe3d 	bl	80a0b58 <_ZN6SX15098readWordEh>

	// Then read a byte that should be 0x00
	if (testRegisters == 0xFF00)
 80a0ede:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 80a0ee2:	d109      	bne.n	80a0ef8 <_ZN6SX15094initEv+0x44>
	return false;
}

void SX1509::clock(byte oscSource, byte oscDivider, byte oscPinFunction, byte oscFreqOut)
{
	configClock(oscSource, oscPinFunction, oscFreqOut, oscDivider);
 80a0ee4:	2401      	movs	r4, #1
 80a0ee6:	2300      	movs	r3, #0
 80a0ee8:	4628      	mov	r0, r5
 80a0eea:	9400      	str	r4, [sp, #0]
 80a0eec:	461a      	mov	r2, r3
 80a0eee:	2102      	movs	r1, #2
 80a0ef0:	f7ff fe86 	bl	80a0c00 <_ZN6SX150911configClockEhhhh>
 80a0ef4:	4620      	mov	r0, r4
 80a0ef6:	e000      	b.n	80a0efa <_ZN6SX15094initEv+0x46>
		clock(INTERNAL_CLOCK_2MHZ);

		return 1;
	}

	return 0;
 80a0ef8:	2000      	movs	r0, #0
}
 80a0efa:	b003      	add	sp, #12
 80a0efc:	bd30      	pop	{r4, r5, pc}

080a0efe <_ZN6SX15095beginEhh>:
}

byte SX1509::begin(byte address, byte resetPin)
{
	// Store the received parameters into member variables
	deviceAddress =  address;
 80a0efe:	7001      	strb	r1, [r0, #0]
	pinReset = resetPin;
 80a0f00:	70c2      	strb	r2, [r0, #3]

	return init();
 80a0f02:	f7ff bfd7 	b.w	80a0eb4 <_ZN6SX15094initEv>

080a0f06 <_GLOBAL__sub_I_REG_I_ON>:
 80a0f06:	f001 b851 	b.w	80a1fac <HAL_Pin_Map>

080a0f0a <_ZN9SandTimerC1Ev>:
*******************************************************************************/


#include "SandTimer.h"

SandTimer::SandTimer()
 80a0f0a:	2200      	movs	r2, #0
 80a0f0c:	6002      	str	r2, [r0, #0]
 80a0f0e:	6042      	str	r2, [r0, #4]
 80a0f10:	7302      	strb	r2, [r0, #12]
{
  started_ = false;
  period_ = 1000;
 80a0f12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0f16:	6082      	str	r2, [r0, #8]
}
 80a0f18:	4770      	bx	lr

080a0f1a <_ZN9SandTimer5startEm>:
period_ = period;
}

/* start timer. if already started, do nothing */
void SandTimer::start(unsigned long period)
{
 80a0f1a:	b510      	push	{r4, lr}
    if (!started_)
 80a0f1c:	7b03      	ldrb	r3, [r0, #12]
period_ = period;
}

/* start timer. if already started, do nothing */
void SandTimer::start(unsigned long period)
{
 80a0f1e:	4604      	mov	r4, r0
    if (!started_)
 80a0f20:	b92b      	cbnz	r3, 80a0f2e <_ZN9SandTimer5startEm+0x14>
    {
        period_ = period;
 80a0f22:	6081      	str	r1, [r0, #8]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0f24:	f001 f892 	bl	80a204c <HAL_Timer_Get_Milli_Seconds>
        start_time_ = millis();
        started_ = true;
 80a0f28:	2301      	movs	r3, #1
void SandTimer::start(unsigned long period)
{
    if (!started_)
    {
        period_ = period;
        start_time_ = millis();
 80a0f2a:	6020      	str	r0, [r4, #0]
        started_ = true;
 80a0f2c:	7323      	strb	r3, [r4, #12]
 80a0f2e:	bd10      	pop	{r4, pc}

080a0f30 <_ZN9SandTimer9startOverEv>:
        started_ = true;
    }
}
/* override original start time, and start timer again */
void SandTimer::startOver()
{
 80a0f30:	b510      	push	{r4, lr}
 80a0f32:	4604      	mov	r4, r0
 80a0f34:	f001 f88a 	bl	80a204c <HAL_Timer_Get_Milli_Seconds>
    start_time_ = millis();
    if (!started_)
 80a0f38:	7b23      	ldrb	r3, [r4, #12]
    }
}
/* override original start time, and start timer again */
void SandTimer::startOver()
{
    start_time_ = millis();
 80a0f3a:	6020      	str	r0, [r4, #0]
    if (!started_)
 80a0f3c:	b90b      	cbnz	r3, 80a0f42 <_ZN9SandTimer9startOverEv+0x12>
        started_ = true;
 80a0f3e:	2301      	movs	r3, #1
 80a0f40:	7323      	strb	r3, [r4, #12]
 80a0f42:	bd10      	pop	{r4, pc}

080a0f44 <_ZN9SandTimer8finishedEv>:
}

/* return true if timer has finished */
bool SandTimer::finished()
{
 80a0f44:	b510      	push	{r4, lr}
    if (started_)
 80a0f46:	7b03      	ldrb	r3, [r0, #12]
        started_ = true;
}

/* return true if timer has finished */
bool SandTimer::finished()
{
 80a0f48:	4604      	mov	r4, r0
    if (started_)
 80a0f4a:	b14b      	cbz	r3, 80a0f60 <_ZN9SandTimer8finishedEv+0x1c>
 80a0f4c:	f001 f87e 	bl	80a204c <HAL_Timer_Get_Milli_Seconds>
    {
        end_time_ = millis();
        if (end_time_ - start_time_ >= period_)
 80a0f50:	6823      	ldr	r3, [r4, #0]
/* return true if timer has finished */
bool SandTimer::finished()
{
    if (started_)
    {
        end_time_ = millis();
 80a0f52:	6060      	str	r0, [r4, #4]
        if (end_time_ - start_time_ >= period_)
 80a0f54:	1ac0      	subs	r0, r0, r3
 80a0f56:	68a3      	ldr	r3, [r4, #8]
 80a0f58:	4298      	cmp	r0, r3
        {
            started_ = false;
 80a0f5a:	bf24      	itt	cs
 80a0f5c:	2300      	movcs	r3, #0
 80a0f5e:	7323      	strbcs	r3, [r4, #12]
        }
    }
    return !started_;
 80a0f60:	7b20      	ldrb	r0, [r4, #12]
}
 80a0f62:	f080 0001 	eor.w	r0, r0, #1
 80a0f66:	bd10      	pop	{r4, pc}

080a0f68 <_GLOBAL__sub_I__ZN9SandTimerC2Ev>:
 80a0f68:	f001 b820 	b.w	80a1fac <HAL_Pin_Map>

080a0f6c <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff>:
  q[1] = q2 * norm;
  q[2] = q3 * norm;
  q[3] = q4 * norm;
}

const float * getQ () { return q; }
 80a0f6c:	b508      	push	{r3, lr}
 80a0f6e:	f001 f81d 	bl	80a1fac <HAL_Pin_Map>
// noticed any reduction in solution accuracy. This is essentially the I
// coefficient in a PID control sense; the bigger the feedback coefficient,
// the faster the solution converges, usually at the expense of accuracy.
// In any case, this is the free parameter in the Madgwick filtering and
// fusion scheme.
static float beta = sqrt(3.0f / 4.0f) * GyroMeasError;   // Compute beta
 80a0f72:	4a02      	ldr	r2, [pc, #8]	; (80a0f7c <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x10>)
 80a0f74:	4b02      	ldr	r3, [pc, #8]	; (80a0f80 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x14>)
 80a0f76:	601a      	str	r2, [r3, #0]
 80a0f78:	bd08      	pop	{r3, pc}
 80a0f7a:	bf00      	nop
 80a0f7c:	3f1ac70d 	.word	0x3f1ac70d
 80a0f80:	200007a4 	.word	0x200007a4

080a0f84 <_ZN7MPU92507getGresEv>:
		break;
	}
}

void MPU9250::getGres() {
	switch (Gscale)
 80a0f84:	7803      	ldrb	r3, [r0, #0]
 80a0f86:	2b03      	cmp	r3, #3
 80a0f88:	d80b      	bhi.n	80a0fa2 <_ZN7MPU92507getGresEv+0x1e>
 80a0f8a:	e8df f003 	tbb	[pc, r3]
 80a0f8e:	0402      	.short	0x0402
 80a0f90:	0806      	.short	0x0806
	{
		// Possible gyro scales (and their register bit settings) are:
		// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
			  // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case GFS_250DPS:
		gRes = 250.0 / 32768.0;
 80a0f92:	4b04      	ldr	r3, [pc, #16]	; (80a0fa4 <_ZN7MPU92507getGresEv+0x20>)
 80a0f94:	e004      	b.n	80a0fa0 <_ZN7MPU92507getGresEv+0x1c>
		break;
	case GFS_500DPS:
		gRes = 500.0 / 32768.0;
 80a0f96:	4b04      	ldr	r3, [pc, #16]	; (80a0fa8 <_ZN7MPU92507getGresEv+0x24>)
 80a0f98:	e002      	b.n	80a0fa0 <_ZN7MPU92507getGresEv+0x1c>
		break;
	case GFS_1000DPS:
		gRes = 1000.0 / 32768.0;
 80a0f9a:	4b04      	ldr	r3, [pc, #16]	; (80a0fac <_ZN7MPU92507getGresEv+0x28>)
 80a0f9c:	e000      	b.n	80a0fa0 <_ZN7MPU92507getGresEv+0x1c>
		break;
	case GFS_2000DPS:
		gRes = 2000.0 / 32768.0;
 80a0f9e:	4b04      	ldr	r3, [pc, #16]	; (80a0fb0 <_ZN7MPU92507getGresEv+0x2c>)
 80a0fa0:	6483      	str	r3, [r0, #72]	; 0x48
 80a0fa2:	4770      	bx	lr
 80a0fa4:	3bfa0000 	.word	0x3bfa0000
 80a0fa8:	3c7a0000 	.word	0x3c7a0000
 80a0fac:	3cfa0000 	.word	0x3cfa0000
 80a0fb0:	3d7a0000 	.word	0x3d7a0000

080a0fb4 <_ZN7MPU92507getAresEv>:
		break;
	}
}

void MPU9250::getAres() {
	switch (Ascale)
 80a0fb4:	7843      	ldrb	r3, [r0, #1]
 80a0fb6:	2b03      	cmp	r3, #3
 80a0fb8:	d80f      	bhi.n	80a0fda <_ZN7MPU92507getAresEv+0x26>
 80a0fba:	e8df f003 	tbb	[pc, r3]
 80a0fbe:	0502      	.short	0x0502
 80a0fc0:	0b08      	.short	0x0b08
	{
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
			  // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case AFS_2G:
		aRes = 2.0 / 32768.0;
 80a0fc2:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 80a0fc6:	e007      	b.n	80a0fd8 <_ZN7MPU92507getAresEv+0x24>
		break;
	case AFS_4G:
		aRes = 4.0 / 32768.0;
 80a0fc8:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 80a0fcc:	e004      	b.n	80a0fd8 <_ZN7MPU92507getAresEv+0x24>
		break;
	case AFS_8G:
		aRes = 8.0 / 32768.0;
 80a0fce:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 80a0fd2:	e001      	b.n	80a0fd8 <_ZN7MPU92507getAresEv+0x24>
		break;
	case AFS_16G:
		aRes = 16.0 / 32768.0;
 80a0fd4:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 80a0fd8:	6443      	str	r3, [r0, #68]	; 0x44
 80a0fda:	4770      	bx	lr

080a0fdc <_ZN7MPU925010updateTimeEv>:
	return ((int16_t)rawData[0] << 8) | rawData[1];  // Turn the MSB and LSB into a 16-bit value
}

// Calculate the time the last update took for use in the quaternion filters
void MPU9250::updateTime()
{
 80a0fdc:	b538      	push	{r3, r4, r5, lr}
 80a0fde:	4604      	mov	r4, r0
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0fe0:	f001 f82c 	bl	80a203c <HAL_Timer_Get_Micro_Seconds>
 80a0fe4:	4605      	mov	r5, r0
	Now = micros();
 80a0fe6:	6360      	str	r0, [r4, #52]	; 0x34

	// Set integration time by time elapsed since last filter update
	deltat = ((Now - lastUpdate) / 1000000.0f);
 80a0fe8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a0fea:	1a28      	subs	r0, r5, r0
 80a0fec:	f004 fd88 	bl	80a5b00 <__aeabi_ui2f>
 80a0ff0:	4906      	ldr	r1, [pc, #24]	; (80a100c <_ZN7MPU925010updateTimeEv+0x30>)
 80a0ff2:	f004 fe91 	bl	80a5d18 <__aeabi_fdiv>
	lastUpdate = Now;
 80a0ff6:	62e5      	str	r5, [r4, #44]	; 0x2c
void MPU9250::updateTime()
{
	Now = micros();

	// Set integration time by time elapsed since last filter update
	deltat = ((Now - lastUpdate) / 1000000.0f);
 80a0ff8:	4601      	mov	r1, r0
 80a0ffa:	6260      	str	r0, [r4, #36]	; 0x24
	lastUpdate = Now;

	sum += deltat; // sum for averaging filter update rate
 80a0ffc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0ffe:	f004 fccf 	bl	80a59a0 <__addsf3>
	sumCount++;
 80a1002:	6a23      	ldr	r3, [r4, #32]

	// Set integration time by time elapsed since last filter update
	deltat = ((Now - lastUpdate) / 1000000.0f);
	lastUpdate = Now;

	sum += deltat; // sum for averaging filter update rate
 80a1004:	62a0      	str	r0, [r4, #40]	; 0x28
	sumCount++;
 80a1006:	3301      	adds	r3, #1
 80a1008:	6223      	str	r3, [r4, #32]
 80a100a:	bd38      	pop	{r3, r4, r5, pc}
 80a100c:	49742400 	.word	0x49742400

080a1010 <_ZN7MPU92509writeByteEhhh>:
}


// Wire.h read and write protocols
void MPU9250::writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80a1010:	b570      	push	{r4, r5, r6, lr}
 80a1012:	460e      	mov	r6, r1
 80a1014:	4615      	mov	r5, r2
 80a1016:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 80a1018:	f002 face 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a101c:	4631      	mov	r1, r6
 80a101e:	f002 f944 	bl	80a32aa <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 80a1022:	f002 fac9 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1026:	6803      	ldr	r3, [r0, #0]
 80a1028:	4629      	mov	r1, r5
 80a102a:	689b      	ldr	r3, [r3, #8]
 80a102c:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 80a102e:	f002 fac3 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1032:	6803      	ldr	r3, [r0, #0]
 80a1034:	4621      	mov	r1, r4
 80a1036:	689a      	ldr	r2, [r3, #8]
 80a1038:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 80a103a:	f002 fabd 	bl	80a35b8 <_Z19__fetch_global_Wirev>
}
 80a103e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MPU9250::writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 80a1042:	f002 b93d 	b.w	80a32c0 <_ZN7TwoWire15endTransmissionEv>

080a1046 <_ZN7MPU92508readByteEhh>:
}

uint8_t MPU9250::readByte(uint8_t address, uint8_t subAddress)
{
 80a1046:	b538      	push	{r3, r4, r5, lr}
 80a1048:	460c      	mov	r4, r1
 80a104a:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 80a104c:	f002 fab4 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1050:	4621      	mov	r1, r4
 80a1052:	f002 f92a 	bl	80a32aa <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);                  // Put slave register address in Tx buffer
 80a1056:	f002 faaf 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a105a:	6803      	ldr	r3, [r0, #0]
 80a105c:	4629      	mov	r1, r5
 80a105e:	689b      	ldr	r3, [r3, #8]
 80a1060:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 80a1062:	f002 faa9 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1066:	2100      	movs	r1, #0
 80a1068:	f002 f926 	bl	80a32b8 <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t)1);  // Read one byte from slave register address
 80a106c:	f002 faa4 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1070:	2201      	movs	r2, #1
 80a1072:	4621      	mov	r1, r4
 80a1074:	f002 f911 	bl	80a329a <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 80a1078:	f002 fa9e 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a107c:	6803      	ldr	r3, [r0, #0]
 80a107e:	695b      	ldr	r3, [r3, #20]
 80a1080:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 80a1082:	b2c0      	uxtb	r0, r0
 80a1084:	bd38      	pop	{r3, r4, r5, pc}

080a1086 <_ZN7MPU925011initMPU9250Ev>:
	writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
	delay(10);
}

void MPU9250::initMPU9250()
{
 80a1086:	b510      	push	{r4, lr}
 80a1088:	4604      	mov	r4, r0
	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80a108a:	2300      	movs	r3, #0
 80a108c:	226b      	movs	r2, #107	; 0x6b
 80a108e:	2168      	movs	r1, #104	; 0x68
 80a1090:	f7ff ffbe 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	delay(100); // Wait for all registers to reset
 80a1094:	2064      	movs	r0, #100	; 0x64
 80a1096:	f001 fb51 	bl	80a273c <delay>

   // get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 80a109a:	2301      	movs	r3, #1
 80a109c:	226b      	movs	r2, #107	; 0x6b
 80a109e:	2168      	movs	r1, #104	; 0x68
 80a10a0:	4620      	mov	r0, r4
 80a10a2:	f7ff ffb5 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	delay(200);
 80a10a6:	20c8      	movs	r0, #200	; 0xc8
 80a10a8:	f001 fb48 	bl	80a273c <delay>
	// Disable FSYNC and set thermometer and gyro bandwidth to 41 and 42 Hz, respectively;
	// minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	// be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
	writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 80a10ac:	4620      	mov	r0, r4
 80a10ae:	2303      	movs	r3, #3
 80a10b0:	221a      	movs	r2, #26
 80a10b2:	2168      	movs	r1, #104	; 0x68
 80a10b4:	f7ff ffac 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; a rate consistent with the filter update rate
 80a10b8:	2304      	movs	r3, #4
 80a10ba:	4620      	mov	r0, r4
 80a10bc:	2219      	movs	r2, #25
 80a10be:	2168      	movs	r1, #104	; 0x68
 80a10c0:	f7ff ffa6 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
									  // determined inset in CONFIG above

   // Set gyroscope full scale range
   // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 80a10c4:	221b      	movs	r2, #27
 80a10c6:	2168      	movs	r1, #104	; 0x68
 80a10c8:	4620      	mov	r0, r4
 80a10ca:	f7ff ffbc 	bl	80a1046 <_ZN7MPU92508readByteEhh>
   // c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x02; // Clear Fchoice bits [1:0]
	c = c & ~0x18; // Clear AFS bits [4:3]
	c = c | Gscale << 3; // Set full scale range for the gyro
 80a10ce:	7823      	ldrb	r3, [r4, #0]
 80a10d0:	f020 001a 	bic.w	r0, r0, #26
 80a10d4:	ea40 03c3 	orr.w	r3, r0, r3, lsl #3
   // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c); // Write new GYRO_CONFIG value to register
 80a10d8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80a10dc:	4620      	mov	r0, r4
 80a10de:	221b      	movs	r2, #27
 80a10e0:	2168      	movs	r1, #104	; 0x68
 80a10e2:	f7ff ff95 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>

   // Set accelerometer full-scale range configuration
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 80a10e6:	221c      	movs	r2, #28
 80a10e8:	2168      	movs	r1, #104	; 0x68
 80a10ea:	4620      	mov	r0, r4
 80a10ec:	f7ff ffab 	bl	80a1046 <_ZN7MPU92508readByteEhh>
   // c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x18;  // Clear AFS bits [4:3]
	c = c | Ascale << 3; // Set full scale range for the accelerometer
 80a10f0:	7863      	ldrb	r3, [r4, #1]
 80a10f2:	f020 0018 	bic.w	r0, r0, #24
 80a10f6:	ea40 03c3 	orr.w	r3, r0, r3, lsl #3
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 80a10fa:	b2db      	uxtb	r3, r3
 80a10fc:	4620      	mov	r0, r4
 80a10fe:	221c      	movs	r2, #28
 80a1100:	2168      	movs	r1, #104	; 0x68
 80a1102:	f7ff ff85 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>

   // Set accelerometer sample rate configuration
   // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
   // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 80a1106:	221d      	movs	r2, #29
 80a1108:	2168      	movs	r1, #104	; 0x68
 80a110a:	4620      	mov	r0, r4
 80a110c:	f7ff ff9b 	bl	80a1046 <_ZN7MPU92508readByteEhh>
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80a1110:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 80a1114:	f043 0303 	orr.w	r3, r3, #3
 80a1118:	4620      	mov	r0, r4
 80a111a:	221d      	movs	r2, #29
 80a111c:	2168      	movs	r1, #104	; 0x68
 80a111e:	f7ff ff77 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
	// clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 80a1122:	4620      	mov	r0, r4
 80a1124:	2322      	movs	r3, #34	; 0x22
 80a1126:	2237      	movs	r2, #55	; 0x37
 80a1128:	2168      	movs	r1, #104	; 0x68
 80a112a:	f7ff ff71 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 80a112e:	4620      	mov	r0, r4
 80a1130:	2301      	movs	r3, #1
 80a1132:	2238      	movs	r2, #56	; 0x38
 80a1134:	2168      	movs	r1, #104	; 0x68
 80a1136:	f7ff ff6b 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	delay(100);
}
 80a113a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
	// clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
	delay(100);
 80a113e:	2064      	movs	r0, #100	; 0x64
 80a1140:	f001 bafc 	b.w	80a273c <delay>

080a1144 <_ZN7MPU92509readBytesEhhhPh>:
	return data;                             // Return data read from slave register
}

void MPU9250::readBytes(uint8_t address, uint8_t subAddress, uint8_t count,
	uint8_t * dest)
{
 80a1144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1146:	460c      	mov	r4, r1
 80a1148:	4617      	mov	r7, r2
 80a114a:	461e      	mov	r6, r3
 80a114c:	9d06      	ldr	r5, [sp, #24]
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 80a114e:	f002 fa33 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1152:	4621      	mov	r1, r4
 80a1154:	f002 f8a9 	bl	80a32aa <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);            // Put slave register address in Tx buffer
 80a1158:	f002 fa2e 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a115c:	6803      	ldr	r3, [r0, #0]
 80a115e:	4639      	mov	r1, r7
 80a1160:	689b      	ldr	r3, [r3, #8]
 80a1162:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 80a1164:	f002 fa28 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1168:	2100      	movs	r1, #0
 80a116a:	f002 f8a5 	bl	80a32b8 <_ZN7TwoWire15endTransmissionEh>
	uint8_t i = 0;
	Wire.requestFrom(address, count);  // Read bytes from slave register address
 80a116e:	f002 fa23 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1172:	4621      	mov	r1, r4
 80a1174:	4632      	mov	r2, r6
 80a1176:	f002 f890 	bl	80a329a <_ZN7TwoWire11requestFromEhh>
 80a117a:	2400      	movs	r4, #0
	while (Wire.available()) {
 80a117c:	f002 fa1c 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1180:	6803      	ldr	r3, [r0, #0]
 80a1182:	1c66      	adds	r6, r4, #1
 80a1184:	691b      	ldr	r3, [r3, #16]
 80a1186:	4798      	blx	r3
 80a1188:	b140      	cbz	r0, 80a119c <_ZN7MPU92509readBytesEhhhPh+0x58>
		dest[i++] = Wire.read();
 80a118a:	f002 fa15 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a118e:	6803      	ldr	r3, [r0, #0]
 80a1190:	b2e4      	uxtb	r4, r4
 80a1192:	695b      	ldr	r3, [r3, #20]
 80a1194:	4798      	blx	r3
 80a1196:	5528      	strb	r0, [r5, r4]
	Wire.beginTransmission(address);   // Initialize the Tx buffer
	Wire.write(subAddress);            // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	uint8_t i = 0;
	Wire.requestFrom(address, count);  // Read bytes from slave register address
	while (Wire.available()) {
 80a1198:	4634      	mov	r4, r6
 80a119a:	e7ef      	b.n	80a117c <_ZN7MPU92509readBytesEhhhPh+0x38>
 80a119c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a119e <_ZN7MPU925013readAccelDataEPs>:
	}
}


void MPU9250::readAccelData(int16_t * destination)
{
 80a119e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a11a0:	460c      	mov	r4, r1
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
 80a11a2:	ab02      	add	r3, sp, #8
 80a11a4:	9300      	str	r3, [sp, #0]
 80a11a6:	223b      	movs	r2, #59	; 0x3b
 80a11a8:	2306      	movs	r3, #6
 80a11aa:	2168      	movs	r1, #104	; 0x68
 80a11ac:	f7ff ffca 	bl	80a1144 <_ZN7MPU92509readBytesEhhhPh>
	destination[0] = ((int16_t)rawData[0] << 8) | rawData[1];  // Turn the MSB and LSB into a signed 16-bit value
 80a11b0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80a11b4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80a11b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a11bc:	8023      	strh	r3, [r4, #0]
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3];
 80a11be:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80a11c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a11c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a11ca:	8063      	strh	r3, [r4, #2]
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5];
 80a11cc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80a11d0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80a11d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a11d8:	80a3      	strh	r3, [r4, #4]
}
 80a11da:	b004      	add	sp, #16
 80a11dc:	bd10      	pop	{r4, pc}

080a11de <_ZN7MPU925012readGyroDataEPs>:


void MPU9250::readGyroData(int16_t * destination)
{
 80a11de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a11e0:	460c      	mov	r4, r1
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 80a11e2:	ab02      	add	r3, sp, #8
 80a11e4:	9300      	str	r3, [sp, #0]
 80a11e6:	2243      	movs	r2, #67	; 0x43
 80a11e8:	2306      	movs	r3, #6
 80a11ea:	2168      	movs	r1, #104	; 0x68
 80a11ec:	f7ff ffaa 	bl	80a1144 <_ZN7MPU92509readBytesEhhhPh>
	destination[0] = ((int16_t)rawData[0] << 8) | rawData[1];  // Turn the MSB and LSB into a signed 16-bit value
 80a11f0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80a11f4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80a11f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a11fc:	8023      	strh	r3, [r4, #0]
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3];
 80a11fe:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80a1202:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a1206:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a120a:	8063      	strh	r3, [r4, #2]
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5];
 80a120c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80a1210:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80a1214:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1218:	80a3      	strh	r3, [r4, #4]
}
 80a121a:	b004      	add	sp, #16
 80a121c:	bd10      	pop	{r4, pc}
	...

080a1220 <_ZN7MPU925016calibrateMPU9250EPfS0_>:

// Function which accumulates gyro and accelerometer data after device
// initialization. It calculates the average of the at-rest readings and then
// loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250::calibrateMPU9250(float * gyroBias, float * accelBias)
{
 80a1220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1224:	4604      	mov	r4, r0
 80a1226:	b08f      	sub	sp, #60	; 0x3c
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = { 0, 0, 0 }, accel_bias[3] = { 0, 0, 0 };

	// reset device
	// Write a one to bit 7 reset bit; toggle reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80);
 80a1228:	2380      	movs	r3, #128	; 0x80

// Function which accumulates gyro and accelerometer data after device
// initialization. It calculates the average of the at-rest readings and then
// loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250::calibrateMPU9250(float * gyroBias, float * accelBias)
{
 80a122a:	9104      	str	r1, [sp, #16]
 80a122c:	9205      	str	r2, [sp, #20]
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = { 0, 0, 0 }, accel_bias[3] = { 0, 0, 0 };

	// reset device
	// Write a one to bit 7 reset bit; toggle reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80);
 80a122e:	2168      	movs	r1, #104	; 0x68
 80a1230:	226b      	movs	r2, #107	; 0x6b
 80a1232:	f7ff feed 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	delay(100);
 80a1236:	2064      	movs	r0, #100	; 0x64
 80a1238:	f001 fa80 	bl	80a273c <delay>

	// get stable time source; Auto select clock source to be PLL gyroscope
	// reference if ready else use the internal oscillator, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 80a123c:	2301      	movs	r3, #1
 80a123e:	226b      	movs	r2, #107	; 0x6b
 80a1240:	2168      	movs	r1, #104	; 0x68
 80a1242:	4620      	mov	r0, r4
 80a1244:	f7ff fee4 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 80a1248:	2300      	movs	r3, #0
 80a124a:	226c      	movs	r2, #108	; 0x6c
 80a124c:	2168      	movs	r1, #104	; 0x68
 80a124e:	4620      	mov	r0, r4
 80a1250:	f7ff fede 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	delay(200);
 80a1254:	20c8      	movs	r0, #200	; 0xc8
 80a1256:	f001 fa71 	bl	80a273c <delay>

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 80a125a:	2300      	movs	r3, #0
 80a125c:	2238      	movs	r2, #56	; 0x38
 80a125e:	2168      	movs	r1, #104	; 0x68
 80a1260:	4620      	mov	r0, r4
 80a1262:	f7ff fed5 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 80a1266:	2300      	movs	r3, #0
 80a1268:	2223      	movs	r2, #35	; 0x23
 80a126a:	2168      	movs	r1, #104	; 0x68
 80a126c:	4620      	mov	r0, r4
 80a126e:	f7ff fecf 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 80a1272:	2300      	movs	r3, #0
 80a1274:	226b      	movs	r2, #107	; 0x6b
 80a1276:	2168      	movs	r1, #104	; 0x68
 80a1278:	4620      	mov	r0, r4
 80a127a:	f7ff fec9 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 80a127e:	2300      	movs	r3, #0
 80a1280:	2224      	movs	r2, #36	; 0x24
 80a1282:	2168      	movs	r1, #104	; 0x68
 80a1284:	4620      	mov	r0, r4
 80a1286:	f7ff fec3 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 80a128a:	2300      	movs	r3, #0
 80a128c:	226a      	movs	r2, #106	; 0x6a
 80a128e:	2168      	movs	r1, #104	; 0x68
 80a1290:	4620      	mov	r0, r4
 80a1292:	f7ff febd 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 80a1296:	230c      	movs	r3, #12
 80a1298:	226a      	movs	r2, #106	; 0x6a
 80a129a:	2168      	movs	r1, #104	; 0x68
 80a129c:	4620      	mov	r0, r4
 80a129e:	f7ff feb7 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	delay(15);
 80a12a2:	200f      	movs	r0, #15
 80a12a4:	f001 fa4a 	bl	80a273c <delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 80a12a8:	2301      	movs	r3, #1
 80a12aa:	221a      	movs	r2, #26
 80a12ac:	2168      	movs	r1, #104	; 0x68
 80a12ae:	4620      	mov	r0, r4
 80a12b0:	f7ff feae 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 80a12b4:	2300      	movs	r3, #0
 80a12b6:	2219      	movs	r2, #25
 80a12b8:	2168      	movs	r1, #104	; 0x68
 80a12ba:	4620      	mov	r0, r4
 80a12bc:	f7ff fea8 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 80a12c0:	2300      	movs	r3, #0
 80a12c2:	221b      	movs	r2, #27
 80a12c4:	2168      	movs	r1, #104	; 0x68
 80a12c6:	4620      	mov	r0, r4
 80a12c8:	f7ff fea2 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 80a12cc:	2300      	movs	r3, #0
 80a12ce:	221c      	movs	r2, #28
 80a12d0:	2168      	movs	r1, #104	; 0x68
 80a12d2:	4620      	mov	r0, r4
 80a12d4:	f7ff fe9c 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>

	uint16_t  gyrosensitivity = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	  // Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 80a12d8:	2340      	movs	r3, #64	; 0x40
 80a12da:	226a      	movs	r2, #106	; 0x6a
 80a12dc:	2168      	movs	r1, #104	; 0x68
 80a12de:	4620      	mov	r0, r4
 80a12e0:	f7ff fe96 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 80a12e4:	2378      	movs	r3, #120	; 0x78
 80a12e6:	2223      	movs	r2, #35	; 0x23
 80a12e8:	2168      	movs	r1, #104	; 0x68
 80a12ea:	4620      	mov	r0, r4
 80a12ec:	f7ff fe90 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 80a12f0:	2028      	movs	r0, #40	; 0x28
 80a12f2:	f001 fa23 	bl	80a273c <delay>

  // At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 80a12f6:	f10d 0b20 	add.w	fp, sp, #32
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
	delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes

  // At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 80a12fa:	2300      	movs	r3, #0
 80a12fc:	2223      	movs	r2, #35	; 0x23
 80a12fe:	2168      	movs	r1, #104	; 0x68
 80a1300:	4620      	mov	r0, r4
 80a1302:	f7ff fe85 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 80a1306:	2302      	movs	r3, #2
 80a1308:	f8cd b000 	str.w	fp, [sp]
 80a130c:	2272      	movs	r2, #114	; 0x72
 80a130e:	2168      	movs	r1, #104	; 0x68
 80a1310:	4620      	mov	r0, r4
 80a1312:	f7ff ff17 	bl	80a1144 <_ZN7MPU92509readBytesEhhhPh>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 80a1316:	f89d 6020 	ldrb.w	r6, [sp, #32]
 80a131a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80a131e:	2700      	movs	r7, #0
 80a1320:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80a1324:	260c      	movs	r6, #12
 80a1326:	fbb3 f6f6 	udiv	r6, r3, r6
// loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250::calibrateMPU9250(float * gyroBias, float * accelBias)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = { 0, 0, 0 }, accel_bias[3] = { 0, 0, 0 };
 80a132a:	463d      	mov	r5, r7
 80a132c:	46b8      	mov	r8, r7
 80a132e:	46b9      	mov	r9, r7
 80a1330:	46ba      	mov	sl, r7
 80a1332:	9702      	str	r7, [sp, #8]
 80a1334:	9703      	str	r7, [sp, #12]
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging

	for (ii = 0; ii < packet_count; ii++)
 80a1336:	b2bb      	uxth	r3, r7
 80a1338:	429e      	cmp	r6, r3
 80a133a:	d93d      	bls.n	80a13b8 <_ZN7MPU925016calibrateMPU9250EPfS0_+0x198>
	{
		int16_t accel_temp[3] = { 0, 0, 0 }, gyro_temp[3] = { 0, 0, 0 };
		readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 80a133c:	230c      	movs	r3, #12
 80a133e:	2274      	movs	r2, #116	; 0x74
 80a1340:	f8cd b000 	str.w	fp, [sp]
 80a1344:	2168      	movs	r1, #104	; 0x68
 80a1346:	4620      	mov	r0, r4
 80a1348:	f7ff fefc 	bl	80a1144 <_ZN7MPU92509readBytesEhhhPh>
		accel_temp[2] = (int16_t)(((int16_t)data[4] << 8) | data[5]);
		gyro_temp[0] = (int16_t)(((int16_t)data[6] << 8) | data[7]);
		gyro_temp[1] = (int16_t)(((int16_t)data[8] << 8) | data[9]);
		gyro_temp[2] = (int16_t)(((int16_t)data[10] << 8) | data[11]);

		accel_bias[0] += (int32_t)accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80a134c:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80a1350:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80a1354:	3701      	adds	r7, #1
 80a1356:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a135a:	b21b      	sxth	r3, r3
		accel_bias[1] += (int32_t)accel_temp[1];
 80a135c:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
		accel_temp[2] = (int16_t)(((int16_t)data[4] << 8) | data[5]);
		gyro_temp[0] = (int16_t)(((int16_t)data[6] << 8) | data[7]);
		gyro_temp[1] = (int16_t)(((int16_t)data[8] << 8) | data[9]);
		gyro_temp[2] = (int16_t)(((int16_t)data[10] << 8) | data[11]);

		accel_bias[0] += (int32_t)accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80a1360:	4499      	add	r9, r3
		accel_bias[1] += (int32_t)accel_temp[1];
 80a1362:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80a1366:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a136a:	b21b      	sxth	r3, r3
		accel_bias[2] += (int32_t)accel_temp[2];
 80a136c:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
		gyro_temp[0] = (int16_t)(((int16_t)data[6] << 8) | data[7]);
		gyro_temp[1] = (int16_t)(((int16_t)data[8] << 8) | data[9]);
		gyro_temp[2] = (int16_t)(((int16_t)data[10] << 8) | data[11]);

		accel_bias[0] += (int32_t)accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[1] += (int32_t)accel_temp[1];
 80a1370:	4498      	add	r8, r3
		accel_bias[2] += (int32_t)accel_temp[2];
 80a1372:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80a1376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a137a:	b21b      	sxth	r3, r3
		gyro_bias[0] += (int32_t)gyro_temp[0];
 80a137c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
		gyro_temp[1] = (int16_t)(((int16_t)data[8] << 8) | data[9]);
		gyro_temp[2] = (int16_t)(((int16_t)data[10] << 8) | data[11]);

		accel_bias[0] += (int32_t)accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[1] += (int32_t)accel_temp[1];
		accel_bias[2] += (int32_t)accel_temp[2];
 80a1380:	441d      	add	r5, r3
		gyro_bias[0] += (int32_t)gyro_temp[0];
 80a1382:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80a1386:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a138a:	b21b      	sxth	r3, r3
		gyro_bias[1] += (int32_t)gyro_temp[1];
 80a138c:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
		gyro_temp[2] = (int16_t)(((int16_t)data[10] << 8) | data[11]);

		accel_bias[0] += (int32_t)accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[1] += (int32_t)accel_temp[1];
		accel_bias[2] += (int32_t)accel_temp[2];
		gyro_bias[0] += (int32_t)gyro_temp[0];
 80a1390:	449a      	add	sl, r3
		gyro_bias[1] += (int32_t)gyro_temp[1];
 80a1392:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 80a1396:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a139a:	9a03      	ldr	r2, [sp, #12]
 80a139c:	b21b      	sxth	r3, r3
 80a139e:	441a      	add	r2, r3
 80a13a0:	9203      	str	r2, [sp, #12]
		gyro_bias[2] += (int32_t)gyro_temp[2];
 80a13a2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80a13a6:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 80a13aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a13ae:	9a02      	ldr	r2, [sp, #8]
 80a13b0:	b21b      	sxth	r3, r3
 80a13b2:	441a      	add	r2, r3
 80a13b4:	9202      	str	r2, [sp, #8]
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging

	for (ii = 0; ii < packet_count; ii++)
 80a13b6:	e7be      	b.n	80a1336 <_ZN7MPU925016calibrateMPU9250EPfS0_+0x116>
		gyro_bias[2] += (int32_t)gyro_temp[2];
	}
	accel_bias[0] /= (int32_t)packet_count; // Normalize sums to get average count biases
	accel_bias[1] /= (int32_t)packet_count;
	accel_bias[2] /= (int32_t)packet_count;
	gyro_bias[0] /= (int32_t)packet_count;
 80a13b8:	fb9a faf6 	sdiv	sl, sl, r6
	gyro_bias[1] /= (int32_t)packet_count;
 80a13bc:	9b03      	ldr	r3, [sp, #12]

	if (accel_bias[2] > 0L) { accel_bias[2] -= (int32_t)accelsensitivity; }  // Remove gravity from the z-axis accelerometer bias calculation
	else { accel_bias[2] += (int32_t)accelsensitivity; }

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80a13be:	2204      	movs	r2, #4
	}
	accel_bias[0] /= (int32_t)packet_count; // Normalize sums to get average count biases
	accel_bias[1] /= (int32_t)packet_count;
	accel_bias[2] /= (int32_t)packet_count;
	gyro_bias[0] /= (int32_t)packet_count;
	gyro_bias[1] /= (int32_t)packet_count;
 80a13c0:	fb93 f7f6 	sdiv	r7, r3, r6
	gyro_bias[2] /= (int32_t)packet_count;
 80a13c4:	9b02      	ldr	r3, [sp, #8]

	if (accel_bias[2] > 0L) { accel_bias[2] -= (int32_t)accelsensitivity; }  // Remove gravity from the z-axis accelerometer bias calculation
	else { accel_bias[2] += (int32_t)accelsensitivity; }

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80a13c6:	fb9a f1f2 	sdiv	r1, sl, r2
		gyro_bias[1] += (int32_t)gyro_temp[1];
		gyro_bias[2] += (int32_t)gyro_temp[2];
	}
	accel_bias[0] /= (int32_t)packet_count; // Normalize sums to get average count biases
	accel_bias[1] /= (int32_t)packet_count;
	accel_bias[2] /= (int32_t)packet_count;
 80a13ca:	fb95 f5f6 	sdiv	r5, r5, r6
		accel_bias[2] += (int32_t)accel_temp[2];
		gyro_bias[0] += (int32_t)gyro_temp[0];
		gyro_bias[1] += (int32_t)gyro_temp[1];
		gyro_bias[2] += (int32_t)gyro_temp[2];
	}
	accel_bias[0] /= (int32_t)packet_count; // Normalize sums to get average count biases
 80a13ce:	fb99 f9f6 	sdiv	r9, r9, r6
	accel_bias[1] /= (int32_t)packet_count;
 80a13d2:	fb98 f8f6 	sdiv	r8, r8, r6
	accel_bias[2] /= (int32_t)packet_count;
	gyro_bias[0] /= (int32_t)packet_count;
	gyro_bias[1] /= (int32_t)packet_count;
	gyro_bias[2] /= (int32_t)packet_count;
 80a13d6:	fb93 f6f6 	sdiv	r6, r3, r6

	if (accel_bias[2] > 0L) { accel_bias[2] -= (int32_t)accelsensitivity; }  // Remove gravity from the z-axis accelerometer bias calculation
	else { accel_bias[2] += (int32_t)accelsensitivity; }

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80a13da:	4249      	negs	r1, r1
 80a13dc:	f3c1 2307 	ubfx	r3, r1, #8, #8
	data[1] = (-gyro_bias[0] / 4) & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80a13e0:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 80a13e4:	fb97 f1f2 	sdiv	r1, r7, r2
	data[3] = (-gyro_bias[1] / 4) & 0xFF;
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 80a13e8:	fb96 f2f2 	sdiv	r2, r6, r2
	else { accel_bias[2] += (int32_t)accelsensitivity; }

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
	data[1] = (-gyro_bias[0] / 4) & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 80a13ec:	4249      	negs	r1, r1
	data[3] = (-gyro_bias[1] / 4) & 0xFF;
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 80a13ee:	4252      	negs	r2, r2
	else { accel_bias[2] += (int32_t)accelsensitivity; }

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
	data[1] = (-gyro_bias[0] / 4) & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 80a13f0:	1208      	asrs	r0, r1, #8
	data[3] = (-gyro_bias[1] / 4) & 0xFF;
 80a13f2:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 80a13f6:	1211      	asrs	r1, r2, #8
	accel_bias[2] /= (int32_t)packet_count;
	gyro_bias[0] /= (int32_t)packet_count;
	gyro_bias[1] /= (int32_t)packet_count;
	gyro_bias[2] /= (int32_t)packet_count;

	if (accel_bias[2] > 0L) { accel_bias[2] -= (int32_t)accelsensitivity; }  // Remove gravity from the z-axis accelerometer bias calculation
 80a13f8:	2d00      	cmp	r5, #0
	else { accel_bias[2] += (int32_t)accelsensitivity; }

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
	data[1] = (-gyro_bias[0] / 4) & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 80a13fa:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
	data[3] = (-gyro_bias[1] / 4) & 0xFF;
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 80a13fe:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
	data[5] = (-gyro_bias[2] / 4) & 0xFF;
 80a1402:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25

	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 80a1406:	f04f 0168 	mov.w	r1, #104	; 0x68
 80a140a:	f04f 0213 	mov.w	r2, #19
 80a140e:	4620      	mov	r0, r4
	accel_bias[2] /= (int32_t)packet_count;
	gyro_bias[0] /= (int32_t)packet_count;
	gyro_bias[1] /= (int32_t)packet_count;
	gyro_bias[2] /= (int32_t)packet_count;

	if (accel_bias[2] > 0L) { accel_bias[2] -= (int32_t)accelsensitivity; }  // Remove gravity from the z-axis accelerometer bias calculation
 80a1410:	bfcc      	ite	gt
 80a1412:	f5a5 4580 	subgt.w	r5, r5, #16384	; 0x4000
	else { accel_bias[2] += (int32_t)accelsensitivity; }
 80a1416:	f505 4580 	addle.w	r5, r5, #16384	; 0x4000

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80a141a:	f88d 3020 	strb.w	r3, [sp, #32]
	data[3] = (-gyro_bias[1] / 4) & 0xFF;
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
	data[5] = (-gyro_bias[2] / 4) & 0xFF;

	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 80a141e:	f7ff fdf7 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 80a1422:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80a1426:	2214      	movs	r2, #20
 80a1428:	2168      	movs	r1, #104	; 0x68
 80a142a:	4620      	mov	r0, r4
 80a142c:	f7ff fdf0 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 80a1430:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80a1434:	2215      	movs	r2, #21
 80a1436:	2168      	movs	r1, #104	; 0x68
 80a1438:	4620      	mov	r0, r4
 80a143a:	f7ff fde9 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 80a143e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80a1442:	2216      	movs	r2, #22
 80a1444:	2168      	movs	r1, #104	; 0x68
 80a1446:	4620      	mov	r0, r4
 80a1448:	f7ff fde2 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 80a144c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80a1450:	2217      	movs	r2, #23
 80a1452:	2168      	movs	r1, #104	; 0x68
 80a1454:	4620      	mov	r0, r4
 80a1456:	f7ff fddb 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 80a145a:	2218      	movs	r2, #24
 80a145c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80a1460:	2168      	movs	r1, #104	; 0x68
 80a1462:	4620      	mov	r0, r4
 80a1464:	f7ff fdd4 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>

	// Output scaled gyro biases for display in the main program
	gyroBias[0] = (float)gyro_bias[0] / (float)gyrosensitivity;
 80a1468:	4650      	mov	r0, sl
 80a146a:	f004 fb4d 	bl	80a5b08 <__aeabi_i2f>
 80a146e:	495b      	ldr	r1, [pc, #364]	; (80a15dc <_ZN7MPU925016calibrateMPU9250EPfS0_+0x3bc>)
 80a1470:	f004 fc52 	bl	80a5d18 <__aeabi_fdiv>
 80a1474:	9b04      	ldr	r3, [sp, #16]
 80a1476:	6018      	str	r0, [r3, #0]
	gyroBias[1] = (float)gyro_bias[1] / (float)gyrosensitivity;
 80a1478:	4638      	mov	r0, r7
 80a147a:	f004 fb45 	bl	80a5b08 <__aeabi_i2f>
 80a147e:	4957      	ldr	r1, [pc, #348]	; (80a15dc <_ZN7MPU925016calibrateMPU9250EPfS0_+0x3bc>)
 80a1480:	f004 fc4a 	bl	80a5d18 <__aeabi_fdiv>
 80a1484:	9b04      	ldr	r3, [sp, #16]
 80a1486:	6058      	str	r0, [r3, #4]
	gyroBias[2] = (float)gyro_bias[2] / (float)gyrosensitivity;
 80a1488:	4630      	mov	r0, r6
 80a148a:	f004 fb3d 	bl	80a5b08 <__aeabi_i2f>
 80a148e:	4953      	ldr	r1, [pc, #332]	; (80a15dc <_ZN7MPU925016calibrateMPU9250EPfS0_+0x3bc>)
 80a1490:	f004 fc42 	bl	80a5d18 <__aeabi_fdiv>
 80a1494:	9b04      	ldr	r3, [sp, #16]
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = { 0, 0, 0 }; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 80a1496:	2277      	movs	r2, #119	; 0x77
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);

	// Output scaled gyro biases for display in the main program
	gyroBias[0] = (float)gyro_bias[0] / (float)gyrosensitivity;
	gyroBias[1] = (float)gyro_bias[1] / (float)gyrosensitivity;
	gyroBias[2] = (float)gyro_bias[2] / (float)gyrosensitivity;
 80a1498:	6098      	str	r0, [r3, #8]
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = { 0, 0, 0 }; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 80a149a:	2168      	movs	r1, #104	; 0x68
 80a149c:	2302      	movs	r3, #2
 80a149e:	4620      	mov	r0, r4
 80a14a0:	f8cd b000 	str.w	fp, [sp]
 80a14a4:	f7ff fe4e 	bl	80a1144 <_ZN7MPU92509readBytesEhhhPh>
 80a14a8:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	accel_bias_reg[0] = (int32_t)(((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 80a14ac:	2302      	movs	r3, #2
 80a14ae:	ba7f      	rev16	r7, r7
 80a14b0:	227a      	movs	r2, #122	; 0x7a
 80a14b2:	2168      	movs	r1, #104	; 0x68
 80a14b4:	4620      	mov	r0, r4
 80a14b6:	b2bf      	uxth	r7, r7
 80a14b8:	f8cd b000 	str.w	fp, [sp]
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = { 0, 0, 0 }; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t)(((int16_t)data[0] << 8) | data[1]);
 80a14bc:	970b      	str	r7, [sp, #44]	; 0x2c
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 80a14be:	f7ff fe41 	bl	80a1144 <_ZN7MPU92509readBytesEhhhPh>
 80a14c2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	accel_bias_reg[1] = (int32_t)(((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 80a14c6:	2302      	movs	r3, #2
 80a14c8:	ba76      	rev16	r6, r6
 80a14ca:	227d      	movs	r2, #125	; 0x7d
 80a14cc:	2168      	movs	r1, #104	; 0x68
 80a14ce:	b2b6      	uxth	r6, r6
 80a14d0:	f8cd b000 	str.w	fp, [sp]
 80a14d4:	4620      	mov	r0, r4

	int32_t accel_bias_reg[3] = { 0, 0, 0 }; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t)(((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
	accel_bias_reg[1] = (int32_t)(((int16_t)data[0] << 8) | data[1]);
 80a14d6:	960c      	str	r6, [sp, #48]	; 0x30
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 80a14d8:	f7ff fe34 	bl	80a1144 <_ZN7MPU92509readBytesEhhhPh>
 80a14dc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
	accel_bias_reg[2] = (int32_t)(((int16_t)data[0] << 8) | data[1]);

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = { 0, 0, 0 }; // Define array to hold mask bit for each accelerometer bias axis
 80a14e0:	2300      	movs	r3, #0
 80a14e2:	ba52      	rev16	r2, r2
 80a14e4:	b292      	uxth	r2, r2
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t)(((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
	accel_bias_reg[1] = (int32_t)(((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
	accel_bias_reg[2] = (int32_t)(((int16_t)data[0] << 8) | data[1]);
 80a14e6:	920d      	str	r2, [sp, #52]	; 0x34

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = { 0, 0, 0 }; // Define array to hold mask bit for each accelerometer bias axis
 80a14e8:	f88d 301c 	strb.w	r3, [sp, #28]
 80a14ec:	f88d 301d 	strb.w	r3, [sp, #29]
 80a14f0:	f88d 301e 	strb.w	r3, [sp, #30]

	for (ii = 0; ii < 3; ii++) {
		if ((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 80a14f4:	2101      	movs	r1, #1
 80a14f6:	a80b      	add	r0, sp, #44	; 0x2c
 80a14f8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80a14fc:	07c0      	lsls	r0, r0, #31
 80a14fe:	bf44      	itt	mi
 80a1500:	a807      	addmi	r0, sp, #28
 80a1502:	5419      	strbmi	r1, [r3, r0]
 80a1504:	3301      	adds	r3, #1
	accel_bias_reg[2] = (int32_t)(((int16_t)data[0] << 8) | data[1]);

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = { 0, 0, 0 }; // Define array to hold mask bit for each accelerometer bias axis

	for (ii = 0; ii < 3; ii++) {
 80a1506:	2b03      	cmp	r3, #3
 80a1508:	d1f5      	bne.n	80a14f6 <_ZN7MPU925016calibrateMPU9250EPfS0_+0x2d6>
		if ((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}

	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0] / 8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80a150a:	2308      	movs	r3, #8
 80a150c:	fb99 f1f3 	sdiv	r1, r9, r3
 80a1510:	1a7f      	subs	r7, r7, r1
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 80a1512:	fb98 f1f3 	sdiv	r1, r8, r3
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 80a1516:	fb95 f3f3 	sdiv	r3, r5, r3
		if ((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}

	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0] / 8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 80a151a:	1a76      	subs	r6, r6, r1
	accel_bias_reg[2] -= (accel_bias[2] / 8);

	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
	data[1] = (accel_bias_reg[0]) & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a151c:	f89d 101c 	ldrb.w	r1, [sp, #28]
	}

	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0] / 8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
	accel_bias_reg[1] -= (accel_bias[1] / 8);
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 80a1520:	1ad2      	subs	r2, r2, r3

	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80a1522:	f3c7 2307 	ubfx	r3, r7, #8, #8
	data[1] = (accel_bias_reg[0]) & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a1526:	430f      	orrs	r7, r1
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80a1528:	1231      	asrs	r1, r6, #8
 80a152a:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
	data[3] = (accel_bias_reg[1]) & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a152e:	f89d 101d 	ldrb.w	r1, [sp, #29]
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers

  // Apparently this is not working for the acceleration biases in the MPU-9250
  // Are we handling the temperature correction bit properly?
  // Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
 80a1532:	4620      	mov	r0, r4
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
	data[1] = (accel_bias_reg[0]) & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
	data[3] = (accel_bias_reg[1]) & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a1534:	430e      	orrs	r6, r1
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80a1536:	1211      	asrs	r1, r2, #8
 80a1538:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
	data[5] = (accel_bias_reg[2]) & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a153c:	f89d 101e 	ldrb.w	r1, [sp, #30]
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0] / 8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
	accel_bias_reg[1] -= (accel_bias[1] / 8);
	accel_bias_reg[2] -= (accel_bias[2] / 8);

	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80a1540:	f88d 3020 	strb.w	r3, [sp, #32]
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
	data[3] = (accel_bias_reg[1]) & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
	data[5] = (accel_bias_reg[2]) & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a1544:	430a      	orrs	r2, r1
 80a1546:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25

  // Apparently this is not working for the acceleration biases in the MPU-9250
  // Are we handling the temperature correction bit properly?
  // Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
 80a154a:	2168      	movs	r1, #104	; 0x68
 80a154c:	2277      	movs	r2, #119	; 0x77
	accel_bias_reg[1] -= (accel_bias[1] / 8);
	accel_bias_reg[2] -= (accel_bias[2] / 8);

	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
	data[1] = (accel_bias_reg[0]) & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a154e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
	data[3] = (accel_bias_reg[1]) & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a1552:	f88d 6023 	strb.w	r6, [sp, #35]	; 0x23
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers

  // Apparently this is not working for the acceleration biases in the MPU-9250
  // Are we handling the temperature correction bit properly?
  // Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
 80a1556:	f7ff fd5b 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
 80a155a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80a155e:	4620      	mov	r0, r4
 80a1560:	2278      	movs	r2, #120	; 0x78
 80a1562:	2168      	movs	r1, #104	; 0x68
 80a1564:	f7ff fd54 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
 80a1568:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80a156c:	4620      	mov	r0, r4
 80a156e:	227a      	movs	r2, #122	; 0x7a
 80a1570:	2168      	movs	r1, #104	; 0x68
 80a1572:	f7ff fd4d 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
 80a1576:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80a157a:	4620      	mov	r0, r4
 80a157c:	227b      	movs	r2, #123	; 0x7b
 80a157e:	2168      	movs	r1, #104	; 0x68
 80a1580:	f7ff fd46 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
 80a1584:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80a1588:	4620      	mov	r0, r4
 80a158a:	227d      	movs	r2, #125	; 0x7d
 80a158c:	2168      	movs	r1, #104	; 0x68
 80a158e:	f7ff fd3f 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
 80a1592:	227e      	movs	r2, #126	; 0x7e
 80a1594:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80a1598:	2168      	movs	r1, #104	; 0x68
 80a159a:	4620      	mov	r0, r4
 80a159c:	f7ff fd38 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>

	// Output scaled accelerometer biases for display in the main program
	accelBias[0] = (float)accel_bias[0] / (float)accelsensitivity;
 80a15a0:	4648      	mov	r0, r9
 80a15a2:	f004 fab1 	bl	80a5b08 <__aeabi_i2f>
 80a15a6:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 80a15aa:	f004 fb01 	bl	80a5bb0 <__aeabi_fmul>
 80a15ae:	9b05      	ldr	r3, [sp, #20]
 80a15b0:	6018      	str	r0, [r3, #0]
	accelBias[1] = (float)accel_bias[1] / (float)accelsensitivity;
 80a15b2:	4640      	mov	r0, r8
 80a15b4:	f004 faa8 	bl	80a5b08 <__aeabi_i2f>
 80a15b8:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 80a15bc:	f004 faf8 	bl	80a5bb0 <__aeabi_fmul>
 80a15c0:	9b05      	ldr	r3, [sp, #20]
 80a15c2:	6058      	str	r0, [r3, #4]
	accelBias[2] = (float)accel_bias[2] / (float)accelsensitivity;
 80a15c4:	4628      	mov	r0, r5
 80a15c6:	f004 fa9f 	bl	80a5b08 <__aeabi_i2f>
 80a15ca:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 80a15ce:	f004 faef 	bl	80a5bb0 <__aeabi_fmul>
 80a15d2:	9b05      	ldr	r3, [sp, #20]
 80a15d4:	6098      	str	r0, [r3, #8]
}
 80a15d6:	b00f      	add	sp, #60	; 0x3c
 80a15d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a15dc:	43030000 	.word	0x43030000

080a15e0 <_ZN7MPU925015MPU9250SelfTestEPf>:


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250::MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 80a15e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a15e4:	4604      	mov	r4, r0
 80a15e6:	b095      	sub	sp, #84	; 0x54
	uint8_t rawData[6] = { 0, 0, 0, 0, 0, 0 };
 80a15e8:	2300      	movs	r3, #0
}


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250::MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 80a15ea:	9102      	str	r1, [sp, #8]
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;

	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);    // Set gyro sample rate to 1 kHz
 80a15ec:	2219      	movs	r2, #25
 80a15ee:	2168      	movs	r1, #104	; 0x68


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250::MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
	uint8_t rawData[6] = { 0, 0, 0, 0, 0, 0 };
 80a15f0:	ae04      	add	r6, sp, #16
 80a15f2:	9304      	str	r3, [sp, #16]
 80a15f4:	80b3      	strh	r3, [r6, #4]
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;

	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);    // Set gyro sample rate to 1 kHz
 80a15f6:	f7ff fd0b 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80a15fa:	2302      	movs	r3, #2
 80a15fc:	221a      	movs	r2, #26
 80a15fe:	2168      	movs	r1, #104	; 0x68
 80a1600:	4620      	mov	r0, r4
 80a1602:	f7ff fd05 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 1 << FS);  // Set full scale range for the gyro to 250 dps
 80a1606:	2301      	movs	r3, #1
 80a1608:	221b      	movs	r2, #27
 80a160a:	2168      	movs	r1, #104	; 0x68
 80a160c:	4620      	mov	r0, r4
 80a160e:	f7ff fcff 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80a1612:	2302      	movs	r3, #2
 80a1614:	221d      	movs	r2, #29
 80a1616:	2168      	movs	r1, #104	; 0x68
 80a1618:	4620      	mov	r0, r4
 80a161a:	f7ff fcf9 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g
 80a161e:	2301      	movs	r3, #1
 80a1620:	221c      	movs	r2, #28
 80a1622:	2168      	movs	r1, #104	; 0x68
 80a1624:	4620      	mov	r0, r4
 80a1626:	f7ff fcf3 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
 80a162a:	25c8      	movs	r5, #200	; 0xc8

	for (int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer

		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
 80a162c:	2306      	movs	r3, #6
 80a162e:	223b      	movs	r2, #59	; 0x3b
 80a1630:	2168      	movs	r1, #104	; 0x68
 80a1632:	4620      	mov	r0, r4
 80a1634:	9600      	str	r6, [sp, #0]
 80a1636:	f7ff fd85 	bl	80a1144 <_ZN7MPU92509readBytesEhhhPh>
		aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 80a163a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80a163e:	f89d 2010 	ldrb.w	r2, [sp, #16]
		aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
		aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);

		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
 80a1642:	9600      	str	r6, [sp, #0]
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g

	for (int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer

		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
		aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 80a1644:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a1648:	f8bd 3020 	ldrh.w	r3, [sp, #32]
		aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
		aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);

		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
 80a164c:	2168      	movs	r1, #104	; 0x68
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g

	for (int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer

		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
		aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 80a164e:	4413      	add	r3, r2
 80a1650:	f8ad 3020 	strh.w	r3, [sp, #32]
		aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
 80a1654:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a1658:	f89d 3013 	ldrb.w	r3, [sp, #19]
		aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);

		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
 80a165c:	4620      	mov	r0, r4

	for (int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer

		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
		aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
		aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
 80a165e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a1662:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80a1666:	4413      	add	r3, r2
 80a1668:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);
 80a166c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80a1670:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80a1674:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a1678:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80a167c:	4413      	add	r3, r2
 80a167e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
 80a1682:	2243      	movs	r2, #67	; 0x43
 80a1684:	2306      	movs	r3, #6
 80a1686:	f7ff fd5d 	bl	80a1144 <_ZN7MPU92509readBytesEhhhPh>
		gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 80a168a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80a168e:	f89d 2010 	ldrb.w	r2, [sp, #16]
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 1 << FS);  // Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g

	for (int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
 80a1692:	3d01      	subs	r5, #1
		aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
		aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
		aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);

		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 80a1694:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a1698:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80a169c:	4413      	add	r3, r2
 80a169e:	f8ad 3018 	strh.w	r3, [sp, #24]
		gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
 80a16a2:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a16a6:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80a16aa:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a16ae:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80a16b2:	4413      	add	r3, r2
 80a16b4:	f8ad 301a 	strh.w	r3, [sp, #26]
		gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);
 80a16b8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80a16bc:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80a16c0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a16c4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a16c8:	4413      	add	r3, r2
 80a16ca:	f8ad 301c 	strh.w	r3, [sp, #28]
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 1 << FS);  // Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g

	for (int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
 80a16ce:	d1ad      	bne.n	80a162c <_ZN7MPU925015MPU9250SelfTestEPf+0x4c>
 80a16d0:	462b      	mov	r3, r5
		gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
		gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);
	}

	for (int ii = 0; ii < 3; ii++) {  // Get average of 200 values and store as average current readings
		aAvg[ii] /= 200;
 80a16d2:	f10d 0a20 	add.w	sl, sp, #32
 80a16d6:	21c8      	movs	r1, #200	; 0xc8
 80a16d8:	f93a 2013 	ldrsh.w	r2, [sl, r3, lsl #1]
		gAvg[ii] /= 200;
 80a16dc:	a806      	add	r0, sp, #24
		gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
		gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);
	}

	for (int ii = 0; ii < 3; ii++) {  // Get average of 200 values and store as average current readings
		aAvg[ii] /= 200;
 80a16de:	fb92 f2f1 	sdiv	r2, r2, r1
 80a16e2:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
		gAvg[ii] /= 200;
 80a16e6:	aa06      	add	r2, sp, #24
 80a16e8:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80a16ec:	fb92 f2f1 	sdiv	r2, r2, r1
 80a16f0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
		gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
		gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);
	}

	for (int ii = 0; ii < 3; ii++) {  // Get average of 200 values and store as average current readings
 80a16f4:	3301      	adds	r3, #1
 80a16f6:	2b03      	cmp	r3, #3
 80a16f8:	d1ee      	bne.n	80a16d8 <_ZN7MPU925015MPU9250SelfTestEPf+0xf8>
		aAvg[ii] /= 200;
		gAvg[ii] /= 200;
	}

	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 80a16fa:	23e0      	movs	r3, #224	; 0xe0
 80a16fc:	221c      	movs	r2, #28
 80a16fe:	2168      	movs	r1, #104	; 0x68
 80a1700:	4620      	mov	r0, r4
 80a1702:	f7ff fc85 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80a1706:	23e0      	movs	r3, #224	; 0xe0
 80a1708:	221b      	movs	r2, #27
 80a170a:	2168      	movs	r1, #104	; 0x68
 80a170c:	4620      	mov	r0, r4
 80a170e:	f7ff fc7f 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	delay(25);  // Delay a while to let the device stabilize
 80a1712:	2019      	movs	r0, #25
 80a1714:	f001 f812 	bl	80a273c <delay>
 80a1718:	25c8      	movs	r5, #200	; 0xc8

	for (int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer

		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
 80a171a:	2306      	movs	r3, #6
 80a171c:	223b      	movs	r2, #59	; 0x3b
 80a171e:	2168      	movs	r1, #104	; 0x68
 80a1720:	4620      	mov	r0, r4
 80a1722:	9600      	str	r6, [sp, #0]
 80a1724:	f7ff fd0e 	bl	80a1144 <_ZN7MPU92509readBytesEhhhPh>
		aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 80a1728:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80a172c:	f89d 2010 	ldrb.w	r2, [sp, #16]
		aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
		aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);

		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 80a1730:	9600      	str	r6, [sp, #0]
	delay(25);  // Delay a while to let the device stabilize

	for (int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer

		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 80a1732:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a1736:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
		aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
		aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);

		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 80a173a:	2168      	movs	r1, #104	; 0x68
	delay(25);  // Delay a while to let the device stabilize

	for (int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer

		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 80a173c:	4413      	add	r3, r2
 80a173e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
 80a1742:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a1746:	f89d 3013 	ldrb.w	r3, [sp, #19]
		aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);

		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 80a174a:	4620      	mov	r0, r4

	for (int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer

		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
		aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
 80a174c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a1750:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80a1754:	4413      	add	r3, r2
 80a1756:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);
 80a175a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80a175e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80a1762:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a1766:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80a176a:	4413      	add	r3, r2
 80a176c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 80a1770:	2243      	movs	r2, #67	; 0x43
 80a1772:	2306      	movs	r3, #6
 80a1774:	f7ff fce6 	bl	80a1144 <_ZN7MPU92509readBytesEhhhPh>
		gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 80a1778:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80a177c:	f89d 2010 	ldrb.w	r2, [sp, #16]
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay(25);  // Delay a while to let the device stabilize

	for (int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer
 80a1780:	3d01      	subs	r5, #1
		aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
		aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
		aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);

		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
		gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 80a1782:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a1786:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80a178a:	4413      	add	r3, r2
 80a178c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
 80a1790:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a1794:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80a1798:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a179c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80a17a0:	4413      	add	r3, r2
 80a17a2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);
 80a17a6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80a17aa:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80a17ae:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a17b2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80a17b6:	4413      	add	r3, r2
 80a17b8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay(25);  // Delay a while to let the device stabilize

	for (int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer
 80a17bc:	d1ad      	bne.n	80a171a <_ZN7MPU925015MPU9250SelfTestEPf+0x13a>
 80a17be:	462b      	mov	r3, r5
		gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
		gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);
	}

	for (int ii = 0; ii < 3; ii++) {  // Get average of 200 values and store as average self-test readings
		aSTAvg[ii] /= 200;
 80a17c0:	21c8      	movs	r1, #200	; 0xc8
 80a17c2:	ad0a      	add	r5, sp, #40	; 0x28
		gSTAvg[ii] /= 200;
 80a17c4:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
		gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
		gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);
	}

	for (int ii = 0; ii < 3; ii++) {  // Get average of 200 values and store as average self-test readings
		aSTAvg[ii] /= 200;
 80a17c8:	f935 2013 	ldrsh.w	r2, [r5, r3, lsl #1]
 80a17cc:	fb92 f2f1 	sdiv	r2, r2, r1
 80a17d0:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
		gSTAvg[ii] /= 200;
 80a17d4:	f93b 2013 	ldrsh.w	r2, [fp, r3, lsl #1]
 80a17d8:	fb92 f2f1 	sdiv	r2, r2, r1
 80a17dc:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
		gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
		gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);
		gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]);
	}

	for (int ii = 0; ii < 3; ii++) {  // Get average of 200 values and store as average self-test readings
 80a17e0:	3301      	adds	r3, #1
 80a17e2:	2b03      	cmp	r3, #3
 80a17e4:	d1f0      	bne.n	80a17c8 <_ZN7MPU925015MPU9250SelfTestEPf+0x1e8>
		aSTAvg[ii] /= 200;
		gSTAvg[ii] /= 200;
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
 80a17e6:	4620      	mov	r0, r4
 80a17e8:	2300      	movs	r3, #0
 80a17ea:	221c      	movs	r2, #28
 80a17ec:	2168      	movs	r1, #104	; 0x68
 80a17ee:	f7ff fc0f 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);
 80a17f2:	2300      	movs	r3, #0
 80a17f4:	221b      	movs	r2, #27
 80a17f6:	2168      	movs	r1, #104	; 0x68
 80a17f8:	4620      	mov	r0, r4
 80a17fa:	f7ff fc09 	bl	80a1010 <_ZN7MPU92509writeByteEhhh>
	delay(25);  // Delay a while to let the device stabilize
 80a17fe:	2019      	movs	r0, #25
 80a1800:	f000 ff9c 	bl	80a273c <delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
 80a1804:	220d      	movs	r2, #13
 80a1806:	2168      	movs	r1, #104	; 0x68
 80a1808:	4620      	mov	r0, r4
 80a180a:	f7ff fc1c 	bl	80a1046 <_ZN7MPU92508readByteEhh>
	selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 80a180e:	220e      	movs	r2, #14
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);
	delay(25);  // Delay a while to let the device stabilize

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
 80a1810:	9003      	str	r0, [sp, #12]
	selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 80a1812:	2168      	movs	r1, #104	; 0x68
 80a1814:	4620      	mov	r0, r4
 80a1816:	f7ff fc16 	bl	80a1046 <_ZN7MPU92508readByteEhh>
	selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 80a181a:	220f      	movs	r2, #15
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);
	delay(25);  // Delay a while to let the device stabilize

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 80a181c:	4607      	mov	r7, r0
	selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 80a181e:	2168      	movs	r1, #104	; 0x68
 80a1820:	4620      	mov	r0, r4
 80a1822:	f7ff fc10 	bl	80a1046 <_ZN7MPU92508readByteEhh>
	selfTest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
 80a1826:	2200      	movs	r2, #0
	delay(25);  // Delay a while to let the device stabilize

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 80a1828:	4680      	mov	r8, r0
	selfTest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
 80a182a:	2168      	movs	r1, #104	; 0x68
 80a182c:	4620      	mov	r0, r4
 80a182e:	f7ff fc0a 	bl	80a1046 <_ZN7MPU92508readByteEhh>
	selfTest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
 80a1832:	2201      	movs	r2, #1

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
 80a1834:	4681      	mov	r9, r0
	selfTest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
 80a1836:	2168      	movs	r1, #104	; 0x68
 80a1838:	4620      	mov	r0, r4
 80a183a:	f7ff fc04 	bl	80a1046 <_ZN7MPU92508readByteEhh>
	selfTest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
 80a183e:	2202      	movs	r2, #2
	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
	selfTest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
 80a1840:	4606      	mov	r6, r0
	selfTest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
 80a1842:	2168      	movs	r1, #104	; 0x68
 80a1844:	4620      	mov	r0, r4
 80a1846:	f7ff fbfe 	bl	80a1046 <_ZN7MPU92508readByteEhh>

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620 / 1 << FS)*(pow(1.01, ((float)selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 80a184a:	9b03      	ldr	r3, [sp, #12]
	selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
	selfTest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
	selfTest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
 80a184c:	4604      	mov	r4, r0

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620 / 1 << FS)*(pow(1.01, ((float)selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 80a184e:	4618      	mov	r0, r3
 80a1850:	f004 f956 	bl	80a5b00 <__aeabi_ui2f>
 80a1854:	f003 fd2a 	bl	80a52ac <__aeabi_f2d>
 80a1858:	2200      	movs	r2, #0
 80a185a:	4b6d      	ldr	r3, [pc, #436]	; (80a1a10 <_ZN7MPU925015MPU9250SelfTestEPf+0x430>)
 80a185c:	f003 fbc6 	bl	80a4fec <__aeabi_dsub>
 80a1860:	4602      	mov	r2, r0
 80a1862:	460b      	mov	r3, r1
 80a1864:	a166      	add	r1, pc, #408	; (adr r1, 80a1a00 <_ZN7MPU925015MPU9250SelfTestEPf+0x420>)
 80a1866:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a186a:	f002 f819 	bl	80a38a0 <pow>
 80a186e:	a366      	add	r3, pc, #408	; (adr r3, 80a1a08 <_ZN7MPU925015MPU9250SelfTestEPf+0x428>)
 80a1870:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1874:	f003 fd6e 	bl	80a5354 <__aeabi_dmul>
 80a1878:	f004 f83c 	bl	80a58f4 <__aeabi_d2f>
 80a187c:	900e      	str	r0, [sp, #56]	; 0x38
	factoryTrim[1] = (float)(2620 / 1 << FS)*(pow(1.01, ((float)selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 80a187e:	4638      	mov	r0, r7
 80a1880:	f004 f93e 	bl	80a5b00 <__aeabi_ui2f>
 80a1884:	f003 fd12 	bl	80a52ac <__aeabi_f2d>
 80a1888:	2200      	movs	r2, #0
 80a188a:	4b61      	ldr	r3, [pc, #388]	; (80a1a10 <_ZN7MPU925015MPU9250SelfTestEPf+0x430>)
 80a188c:	f003 fbae 	bl	80a4fec <__aeabi_dsub>
 80a1890:	4602      	mov	r2, r0
 80a1892:	460b      	mov	r3, r1
 80a1894:	a15a      	add	r1, pc, #360	; (adr r1, 80a1a00 <_ZN7MPU925015MPU9250SelfTestEPf+0x420>)
 80a1896:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a189a:	f002 f801 	bl	80a38a0 <pow>
 80a189e:	a35a      	add	r3, pc, #360	; (adr r3, 80a1a08 <_ZN7MPU925015MPU9250SelfTestEPf+0x428>)
 80a18a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a18a4:	f003 fd56 	bl	80a5354 <__aeabi_dmul>
 80a18a8:	f004 f824 	bl	80a58f4 <__aeabi_d2f>
 80a18ac:	900f      	str	r0, [sp, #60]	; 0x3c
	factoryTrim[2] = (float)(2620 / 1 << FS)*(pow(1.01, ((float)selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 80a18ae:	4640      	mov	r0, r8
 80a18b0:	f004 f926 	bl	80a5b00 <__aeabi_ui2f>
 80a18b4:	f003 fcfa 	bl	80a52ac <__aeabi_f2d>
 80a18b8:	2200      	movs	r2, #0
 80a18ba:	4b55      	ldr	r3, [pc, #340]	; (80a1a10 <_ZN7MPU925015MPU9250SelfTestEPf+0x430>)
 80a18bc:	f003 fb96 	bl	80a4fec <__aeabi_dsub>
 80a18c0:	4602      	mov	r2, r0
 80a18c2:	460b      	mov	r3, r1
 80a18c4:	a14e      	add	r1, pc, #312	; (adr r1, 80a1a00 <_ZN7MPU925015MPU9250SelfTestEPf+0x420>)
 80a18c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a18ca:	f001 ffe9 	bl	80a38a0 <pow>
 80a18ce:	a34e      	add	r3, pc, #312	; (adr r3, 80a1a08 <_ZN7MPU925015MPU9250SelfTestEPf+0x428>)
 80a18d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a18d4:	f003 fd3e 	bl	80a5354 <__aeabi_dmul>
 80a18d8:	f004 f80c 	bl	80a58f4 <__aeabi_d2f>
 80a18dc:	9010      	str	r0, [sp, #64]	; 0x40
	factoryTrim[3] = (float)(2620 / 1 << FS)*(pow(1.01, ((float)selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 80a18de:	4648      	mov	r0, r9
 80a18e0:	f004 f90e 	bl	80a5b00 <__aeabi_ui2f>
 80a18e4:	f003 fce2 	bl	80a52ac <__aeabi_f2d>
 80a18e8:	2200      	movs	r2, #0
 80a18ea:	4b49      	ldr	r3, [pc, #292]	; (80a1a10 <_ZN7MPU925015MPU9250SelfTestEPf+0x430>)
 80a18ec:	f003 fb7e 	bl	80a4fec <__aeabi_dsub>
 80a18f0:	4602      	mov	r2, r0
 80a18f2:	460b      	mov	r3, r1
 80a18f4:	a142      	add	r1, pc, #264	; (adr r1, 80a1a00 <_ZN7MPU925015MPU9250SelfTestEPf+0x420>)
 80a18f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a18fa:	f001 ffd1 	bl	80a38a0 <pow>
 80a18fe:	a342      	add	r3, pc, #264	; (adr r3, 80a1a08 <_ZN7MPU925015MPU9250SelfTestEPf+0x428>)
 80a1900:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1904:	f003 fd26 	bl	80a5354 <__aeabi_dmul>
 80a1908:	f003 fff4 	bl	80a58f4 <__aeabi_d2f>
 80a190c:	9011      	str	r0, [sp, #68]	; 0x44
	factoryTrim[4] = (float)(2620 / 1 << FS)*(pow(1.01, ((float)selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 80a190e:	4630      	mov	r0, r6
 80a1910:	f004 f8f6 	bl	80a5b00 <__aeabi_ui2f>
 80a1914:	f003 fcca 	bl	80a52ac <__aeabi_f2d>
 80a1918:	2200      	movs	r2, #0
 80a191a:	4b3d      	ldr	r3, [pc, #244]	; (80a1a10 <_ZN7MPU925015MPU9250SelfTestEPf+0x430>)
 80a191c:	f003 fb66 	bl	80a4fec <__aeabi_dsub>
 80a1920:	4602      	mov	r2, r0
 80a1922:	460b      	mov	r3, r1
 80a1924:	a136      	add	r1, pc, #216	; (adr r1, 80a1a00 <_ZN7MPU925015MPU9250SelfTestEPf+0x420>)
 80a1926:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a192a:	f001 ffb9 	bl	80a38a0 <pow>
 80a192e:	a336      	add	r3, pc, #216	; (adr r3, 80a1a08 <_ZN7MPU925015MPU9250SelfTestEPf+0x428>)
 80a1930:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1934:	f003 fd0e 	bl	80a5354 <__aeabi_dmul>
 80a1938:	f003 ffdc 	bl	80a58f4 <__aeabi_d2f>
 80a193c:	9012      	str	r0, [sp, #72]	; 0x48
	factoryTrim[5] = (float)(2620 / 1 << FS)*(pow(1.01, ((float)selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 80a193e:	4620      	mov	r0, r4
 80a1940:	f004 f8de 	bl	80a5b00 <__aeabi_ui2f>
 80a1944:	f003 fcb2 	bl	80a52ac <__aeabi_f2d>
 80a1948:	2200      	movs	r2, #0
 80a194a:	4b31      	ldr	r3, [pc, #196]	; (80a1a10 <_ZN7MPU925015MPU9250SelfTestEPf+0x430>)
 80a194c:	f003 fb4e 	bl	80a4fec <__aeabi_dsub>
 80a1950:	4602      	mov	r2, r0
 80a1952:	460b      	mov	r3, r1
 80a1954:	a12a      	add	r1, pc, #168	; (adr r1, 80a1a00 <_ZN7MPU925015MPU9250SelfTestEPf+0x420>)
 80a1956:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a195a:	f001 ffa1 	bl	80a38a0 <pow>
 80a195e:	a32a      	add	r3, pc, #168	; (adr r3, 80a1a08 <_ZN7MPU925015MPU9250SelfTestEPf+0x428>)
 80a1960:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1964:	f003 fcf6 	bl	80a5354 <__aeabi_dmul>
 80a1968:	f003 ffc4 	bl	80a58f4 <__aeabi_d2f>
 80a196c:	9b02      	ldr	r3, [sp, #8]
 80a196e:	9013      	str	r0, [sp, #76]	; 0x4c
 80a1970:	af10      	add	r7, sp, #64	; 0x40
 80a1972:	f103 0608 	add.w	r6, r3, #8

   // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
   // To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 80a1976:	2400      	movs	r4, #0
		destination[i] = 100.0*((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i];   // Report percent differences
 80a1978:	f93a 3014 	ldrsh.w	r3, [sl, r4, lsl #1]
 80a197c:	f935 0014 	ldrsh.w	r0, [r5, r4, lsl #1]
 80a1980:	1ac0      	subs	r0, r0, r3
 80a1982:	f004 f8c1 	bl	80a5b08 <__aeabi_i2f>
 80a1986:	f003 fc91 	bl	80a52ac <__aeabi_f2d>
 80a198a:	2200      	movs	r2, #0
 80a198c:	4b21      	ldr	r3, [pc, #132]	; (80a1a14 <_ZN7MPU925015MPU9250SelfTestEPf+0x434>)
 80a198e:	f003 fce1 	bl	80a5354 <__aeabi_dmul>
 80a1992:	ab0e      	add	r3, sp, #56	; 0x38
 80a1994:	4680      	mov	r8, r0
 80a1996:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a199a:	4689      	mov	r9, r1
 80a199c:	f003 fc86 	bl	80a52ac <__aeabi_f2d>
 80a19a0:	4602      	mov	r2, r0
 80a19a2:	460b      	mov	r3, r1
 80a19a4:	4640      	mov	r0, r8
 80a19a6:	4649      	mov	r1, r9
 80a19a8:	f003 fdfe 	bl	80a55a8 <__aeabi_ddiv>
 80a19ac:	f003 ffa2 	bl	80a58f4 <__aeabi_d2f>
 80a19b0:	9b02      	ldr	r3, [sp, #8]
 80a19b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		destination[i + 3] = 100.0*((float)(gSTAvg[i] - gAvg[i])) / factoryTrim[i + 3]; // Report percent differences
 80a19b6:	ab06      	add	r3, sp, #24
 80a19b8:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
 80a19bc:	f93b 0014 	ldrsh.w	r0, [fp, r4, lsl #1]
	factoryTrim[4] = (float)(2620 / 1 << FS)*(pow(1.01, ((float)selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
	factoryTrim[5] = (float)(2620 / 1 << FS)*(pow(1.01, ((float)selfTest[5] - 1.0))); // FT[Zg] factory trim calculation

   // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
   // To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 80a19c0:	3401      	adds	r4, #1
		destination[i] = 100.0*((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i];   // Report percent differences
		destination[i + 3] = 100.0*((float)(gSTAvg[i] - gAvg[i])) / factoryTrim[i + 3]; // Report percent differences
 80a19c2:	1ac0      	subs	r0, r0, r3
 80a19c4:	f004 f8a0 	bl	80a5b08 <__aeabi_i2f>
 80a19c8:	f003 fc70 	bl	80a52ac <__aeabi_f2d>
 80a19cc:	2200      	movs	r2, #0
 80a19ce:	4b11      	ldr	r3, [pc, #68]	; (80a1a14 <_ZN7MPU925015MPU9250SelfTestEPf+0x434>)
 80a19d0:	f003 fcc0 	bl	80a5354 <__aeabi_dmul>
 80a19d4:	4680      	mov	r8, r0
 80a19d6:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80a19da:	4689      	mov	r9, r1
 80a19dc:	f003 fc66 	bl	80a52ac <__aeabi_f2d>
 80a19e0:	4602      	mov	r2, r0
 80a19e2:	460b      	mov	r3, r1
 80a19e4:	4640      	mov	r0, r8
 80a19e6:	4649      	mov	r1, r9
 80a19e8:	f003 fdde 	bl	80a55a8 <__aeabi_ddiv>
 80a19ec:	f003 ff82 	bl	80a58f4 <__aeabi_d2f>
	factoryTrim[4] = (float)(2620 / 1 << FS)*(pow(1.01, ((float)selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
	factoryTrim[5] = (float)(2620 / 1 << FS)*(pow(1.01, ((float)selfTest[5] - 1.0))); // FT[Zg] factory trim calculation

   // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
   // To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 80a19f0:	2c03      	cmp	r4, #3
		destination[i] = 100.0*((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i];   // Report percent differences
		destination[i + 3] = 100.0*((float)(gSTAvg[i] - gAvg[i])) / factoryTrim[i + 3]; // Report percent differences
 80a19f2:	f846 0f04 	str.w	r0, [r6, #4]!
	factoryTrim[4] = (float)(2620 / 1 << FS)*(pow(1.01, ((float)selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
	factoryTrim[5] = (float)(2620 / 1 << FS)*(pow(1.01, ((float)selfTest[5] - 1.0))); // FT[Zg] factory trim calculation

   // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
   // To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 80a19f6:	d1bf      	bne.n	80a1978 <_ZN7MPU925015MPU9250SelfTestEPf+0x398>
		destination[i] = 100.0*((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i];   // Report percent differences
		destination[i + 3] = 100.0*((float)(gSTAvg[i] - gAvg[i])) / factoryTrim[i + 3]; // Report percent differences
	}
}
 80a19f8:	b015      	add	sp, #84	; 0x54
 80a19fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a19fe:	bf00      	nop
 80a1a00:	c28f5c29 	.word	0xc28f5c29
 80a1a04:	3ff028f5 	.word	0x3ff028f5
 80a1a08:	00000000 	.word	0x00000000
 80a1a0c:	40a47800 	.word	0x40a47800
 80a1a10:	3ff00000 	.word	0x3ff00000
 80a1a14:	40590000 	.word	0x40590000

080a1a18 <_GLOBAL__sub_I__ZN7MPU92507getMresEv>:
 80a1a18:	f000 bac8 	b.w	80a1fac <HAL_Pin_Map>

080a1a1c <_ZN17SparkFun_APDS9960C1Ev>:
/**
 * @brief Constructor - Instantiates SparkFun_APDS9960 object
 */
SparkFun_APDS9960::SparkFun_APDS9960()
{
    gesture_ud_delta_ = 0;
 80a1a1c:	2200      	movs	r2, #0
 80a1a1e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    gesture_lr_delta_ = 0;
 80a1a22:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

    gesture_ud_count_ = 0;
 80a1a26:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    gesture_lr_count_ = 0;
 80a1a2a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

    gesture_near_count_ = 0;
 80a1a2e:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    gesture_far_count_ = 0;
 80a1a32:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98

    gesture_state_ = 0;
 80a1a36:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    gesture_motion_ = DIR_NONE;
 80a1a3a:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
 80a1a3e:	4770      	bx	lr

080a1a40 <_ZN17SparkFun_APDS9960D1Ev>:
 * @brief Destructor
 */
SparkFun_APDS9960::~SparkFun_APDS9960()
{

}
 80a1a40:	4770      	bx	lr

080a1a42 <_ZN17SparkFun_APDS996013wireWriteByteEh>:
 *
 * @param[in] val the 1-byte value to write to the I2C device
 * @return True if successful write operation. False otherwise.
 */
bool SparkFun_APDS9960::wireWriteByte(uint8_t val)
{
 80a1a42:	b510      	push	{r4, lr}
 80a1a44:	460c      	mov	r4, r1
    Wire.beginTransmission(APDS9960_I2C_ADDR);
 80a1a46:	f001 fdb7 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1a4a:	2139      	movs	r1, #57	; 0x39
 80a1a4c:	f001 fc31 	bl	80a32b2 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(val);
 80a1a50:	f001 fdb2 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1a54:	6803      	ldr	r3, [r0, #0]
 80a1a56:	4621      	mov	r1, r4
 80a1a58:	689b      	ldr	r3, [r3, #8]
 80a1a5a:	4798      	blx	r3
    if( Wire.endTransmission() != 0 ) {
 80a1a5c:	f001 fdac 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1a60:	f001 fc2e 	bl	80a32c0 <_ZN7TwoWire15endTransmissionEv>
        return false;
    }

    return true;
}
 80a1a64:	fab0 f080 	clz	r0, r0
 80a1a68:	0940      	lsrs	r0, r0, #5
 80a1a6a:	bd10      	pop	{r4, pc}

080a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>:
 * @param[in] reg the register in the I2C device to write to
 * @param[in] val the 1-byte value to write to the I2C device
 * @return True if successful write operation. False otherwise.
 */
bool SparkFun_APDS9960::wireWriteDataByte(uint8_t reg, uint8_t val)
{
 80a1a6c:	b538      	push	{r3, r4, r5, lr}
 80a1a6e:	4614      	mov	r4, r2
 80a1a70:	460d      	mov	r5, r1
    Wire.beginTransmission(APDS9960_I2C_ADDR);
 80a1a72:	f001 fda1 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1a76:	2139      	movs	r1, #57	; 0x39
 80a1a78:	f001 fc1b 	bl	80a32b2 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a1a7c:	f001 fd9c 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1a80:	6803      	ldr	r3, [r0, #0]
 80a1a82:	4629      	mov	r1, r5
 80a1a84:	689b      	ldr	r3, [r3, #8]
 80a1a86:	4798      	blx	r3
    Wire.write(val);
 80a1a88:	f001 fd96 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1a8c:	6803      	ldr	r3, [r0, #0]
 80a1a8e:	4621      	mov	r1, r4
 80a1a90:	689b      	ldr	r3, [r3, #8]
 80a1a92:	4798      	blx	r3
    if( Wire.endTransmission() != 0 ) {
 80a1a94:	f001 fd90 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1a98:	f001 fc12 	bl	80a32c0 <_ZN7TwoWire15endTransmissionEv>
        return false;
    }

    return true;
}
 80a1a9c:	fab0 f080 	clz	r0, r0
 80a1aa0:	0940      	lsrs	r0, r0, #5
 80a1aa2:	bd38      	pop	{r3, r4, r5, pc}

080a1aa4 <_ZN17SparkFun_APDS996021setGestureEnterThreshEh>:
 * @param[in] threshold proximity value needed to start gesture mode
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureEnterThresh(uint8_t threshold)
{
    if( !wireWriteDataByte(APDS9960_GPENTH, threshold) ) {
 80a1aa4:	460a      	mov	r2, r1
 80a1aa6:	21a0      	movs	r1, #160	; 0xa0
 80a1aa8:	f7ff bfe0 	b.w	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>

080a1aac <_ZN17SparkFun_APDS996020setGestureExitThreshEh>:
 * @param[in] threshold proximity value needed to end gesture mode
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureExitThresh(uint8_t threshold)
{
    if( !wireWriteDataByte(APDS9960_GEXTH, threshold) ) {
 80a1aac:	460a      	mov	r2, r1
 80a1aae:	21a1      	movs	r1, #161	; 0xa1
 80a1ab0:	f7ff bfdc 	b.w	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>

080a1ab4 <_ZN17SparkFun_APDS996023setLightIntLowThresholdEt>:
 *
 * @param[in] threshold low threshold value for interrupt to trigger
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setLightIntLowThreshold(uint16_t threshold)
{
 80a1ab4:	b538      	push	{r3, r4, r5, lr}
    /* Break 16-bit threshold into 2 8-bit values */
    val_low = threshold & 0x00FF;
    val_high = (threshold & 0xFF00) >> 8;

    /* Write low byte */
    if( !wireWriteDataByte(APDS9960_AILTL, val_low) ) {
 80a1ab6:	b2ca      	uxtb	r2, r1
 *
 * @param[in] threshold low threshold value for interrupt to trigger
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setLightIntLowThreshold(uint16_t threshold)
{
 80a1ab8:	460c      	mov	r4, r1
    /* Break 16-bit threshold into 2 8-bit values */
    val_low = threshold & 0x00FF;
    val_high = (threshold & 0xFF00) >> 8;

    /* Write low byte */
    if( !wireWriteDataByte(APDS9960_AILTL, val_low) ) {
 80a1aba:	2184      	movs	r1, #132	; 0x84
 *
 * @param[in] threshold low threshold value for interrupt to trigger
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setLightIntLowThreshold(uint16_t threshold)
{
 80a1abc:	4605      	mov	r5, r0
    /* Break 16-bit threshold into 2 8-bit values */
    val_low = threshold & 0x00FF;
    val_high = (threshold & 0xFF00) >> 8;

    /* Write low byte */
    if( !wireWriteDataByte(APDS9960_AILTL, val_low) ) {
 80a1abe:	f7ff ffd5 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1ac2:	b130      	cbz	r0, 80a1ad2 <_ZN17SparkFun_APDS996023setLightIntLowThresholdEt+0x1e>
        return false;
    }

    /* Write high byte */
    if( !wireWriteDataByte(APDS9960_AILTH, val_high) ) {
 80a1ac4:	0a22      	lsrs	r2, r4, #8
 80a1ac6:	4628      	mov	r0, r5
        return false;
    }

    return true;
}
 80a1ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if( !wireWriteDataByte(APDS9960_AILTL, val_low) ) {
        return false;
    }

    /* Write high byte */
    if( !wireWriteDataByte(APDS9960_AILTH, val_high) ) {
 80a1acc:	2185      	movs	r1, #133	; 0x85
 80a1ace:	f7ff bfcd 	b.w	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
        return false;
    }

    return true;
}
 80a1ad2:	bd38      	pop	{r3, r4, r5, pc}

080a1ad4 <_ZN17SparkFun_APDS996024setLightIntHighThresholdEt>:
 *
 * @param[in] threshold high threshold value for interrupt to trigger
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setLightIntHighThreshold(uint16_t threshold)
{
 80a1ad4:	b538      	push	{r3, r4, r5, lr}
    /* Break 16-bit threshold into 2 8-bit values */
    val_low = threshold & 0x00FF;
    val_high = (threshold & 0xFF00) >> 8;

    /* Write low byte */
    if( !wireWriteDataByte(APDS9960_AIHTL, val_low) ) {
 80a1ad6:	b2ca      	uxtb	r2, r1
 *
 * @param[in] threshold high threshold value for interrupt to trigger
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setLightIntHighThreshold(uint16_t threshold)
{
 80a1ad8:	460c      	mov	r4, r1
    /* Break 16-bit threshold into 2 8-bit values */
    val_low = threshold & 0x00FF;
    val_high = (threshold & 0xFF00) >> 8;

    /* Write low byte */
    if( !wireWriteDataByte(APDS9960_AIHTL, val_low) ) {
 80a1ada:	2186      	movs	r1, #134	; 0x86
 *
 * @param[in] threshold high threshold value for interrupt to trigger
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setLightIntHighThreshold(uint16_t threshold)
{
 80a1adc:	4605      	mov	r5, r0
    /* Break 16-bit threshold into 2 8-bit values */
    val_low = threshold & 0x00FF;
    val_high = (threshold & 0xFF00) >> 8;

    /* Write low byte */
    if( !wireWriteDataByte(APDS9960_AIHTL, val_low) ) {
 80a1ade:	f7ff ffc5 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1ae2:	b130      	cbz	r0, 80a1af2 <_ZN17SparkFun_APDS996024setLightIntHighThresholdEt+0x1e>
        return false;
    }

    /* Write high byte */
    if( !wireWriteDataByte(APDS9960_AIHTH, val_high) ) {
 80a1ae4:	0a22      	lsrs	r2, r4, #8
 80a1ae6:	4628      	mov	r0, r5
        return false;
    }

    return true;
}
 80a1ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if( !wireWriteDataByte(APDS9960_AIHTL, val_low) ) {
        return false;
    }

    /* Write high byte */
    if( !wireWriteDataByte(APDS9960_AIHTH, val_high) ) {
 80a1aec:	2187      	movs	r1, #135	; 0x87
 80a1aee:	f7ff bfbd 	b.w	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
        return false;
    }

    return true;
}
 80a1af2:	bd38      	pop	{r3, r4, r5, pc}

080a1af4 <_ZN17SparkFun_APDS996027setProximityIntLowThresholdEh>:
 */
bool SparkFun_APDS9960::setProximityIntLowThreshold(uint8_t threshold)
{

    /* Write threshold value to register */
    if( !wireWriteDataByte(APDS9960_PILT, threshold) ) {
 80a1af4:	460a      	mov	r2, r1
 80a1af6:	2189      	movs	r1, #137	; 0x89
 80a1af8:	f7ff bfb8 	b.w	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>

080a1afc <_ZN17SparkFun_APDS996028setProximityIntHighThresholdEh>:
 */
bool SparkFun_APDS9960::setProximityIntHighThreshold(uint8_t threshold)
{

    /* Write threshold value to register */
    if( !wireWriteDataByte(APDS9960_PIHT, threshold) ) {
 80a1afc:	460a      	mov	r2, r1
 80a1afe:	218b      	movs	r1, #139	; 0x8b
 80a1b00:	f7ff bfb4 	b.w	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>

080a1b04 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>:
 * @param[in] reg the register to read from
 * @param[out] the value returned from the register
 * @return True if successful read operation. False otherwise.
 */
bool SparkFun_APDS9960::wireReadDataByte(uint8_t reg, uint8_t &val)
{
 80a1b04:	b538      	push	{r3, r4, r5, lr}
 80a1b06:	4615      	mov	r5, r2

    /* Indicate which register we want to read from */
    if (!wireWriteByte(reg)) {
 80a1b08:	f7ff ff9b 	bl	80a1a42 <_ZN17SparkFun_APDS996013wireWriteByteEh>
 80a1b0c:	4604      	mov	r4, r0
 80a1b0e:	b190      	cbz	r0, 80a1b36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh+0x32>
        return false;
    }

    /* Read from register */
    Wire.requestFrom(APDS9960_I2C_ADDR, 1);
 80a1b10:	f001 fd52 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1b14:	2201      	movs	r2, #1
 80a1b16:	2139      	movs	r1, #57	; 0x39
 80a1b18:	f001 fbc2 	bl	80a32a0 <_ZN7TwoWire11requestFromEii>
    while (Wire.available()) {
 80a1b1c:	f001 fd4c 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1b20:	6803      	ldr	r3, [r0, #0]
 80a1b22:	691b      	ldr	r3, [r3, #16]
 80a1b24:	4798      	blx	r3
 80a1b26:	b130      	cbz	r0, 80a1b36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh+0x32>
        val = Wire.read();
 80a1b28:	f001 fd46 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1b2c:	6803      	ldr	r3, [r0, #0]
 80a1b2e:	695b      	ldr	r3, [r3, #20]
 80a1b30:	4798      	blx	r3
 80a1b32:	7028      	strb	r0, [r5, #0]
 80a1b34:	e7f2      	b.n	80a1b1c <_ZN17SparkFun_APDS996016wireReadDataByteEhRh+0x18>
    }

    return true;
}
 80a1b36:	4620      	mov	r0, r4
 80a1b38:	bd38      	pop	{r3, r4, r5, pc}

080a1b3a <_ZN17SparkFun_APDS99607getModeEv>:
 * @brief Reads and returns the contents of the ENABLE register
 *
 * @return Contents of the ENABLE register. 0xFF if error.
 */
uint8_t SparkFun_APDS9960::getMode()
{
 80a1b3a:	b507      	push	{r0, r1, r2, lr}
    uint8_t enable_value;

    /* Read current ENABLE register */
    if( !wireReadDataByte(APDS9960_ENABLE, enable_value) ) {
 80a1b3c:	2180      	movs	r1, #128	; 0x80
 80a1b3e:	f10d 0207 	add.w	r2, sp, #7
 80a1b42:	f7ff ffdf 	bl	80a1b04 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80a1b46:	b110      	cbz	r0, 80a1b4e <_ZN17SparkFun_APDS99607getModeEv+0x14>
        return ERROR_APDS;
    }

    return enable_value;
 80a1b48:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a1b4c:	e000      	b.n	80a1b50 <_ZN17SparkFun_APDS99607getModeEv+0x16>
{
    uint8_t enable_value;

    /* Read current ENABLE register */
    if( !wireReadDataByte(APDS9960_ENABLE, enable_value) ) {
        return ERROR_APDS;
 80a1b4e:	20ff      	movs	r0, #255	; 0xff
    }

    return enable_value;
}
 80a1b50:	b003      	add	sp, #12
 80a1b52:	f85d fb04 	ldr.w	pc, [sp], #4

080a1b56 <_ZN17SparkFun_APDS99607setModeEhh>:
 * @param[in] mode which feature to enable
 * @param[in] enable ON (1) or OFF (0)
 * @return True if operation success. False otherwise.
 */
bool SparkFun_APDS9960::setMode(uint8_t mode, uint8_t enable)
{
 80a1b56:	b570      	push	{r4, r5, r6, lr}
 80a1b58:	4605      	mov	r5, r0
 80a1b5a:	460e      	mov	r6, r1
 80a1b5c:	4614      	mov	r4, r2
    uint8_t reg_val;

    /* Read current ENABLE register */
    reg_val = getMode();
 80a1b5e:	f7ff ffec 	bl	80a1b3a <_ZN17SparkFun_APDS99607getModeEv>
    if( reg_val == ERROR_APDS ) {
 80a1b62:	28ff      	cmp	r0, #255	; 0xff
 80a1b64:	d019      	beq.n	80a1b9a <_ZN17SparkFun_APDS99607setModeEhh+0x44>
        return false;
    }

    /* Change bit(s) in ENABLE register */
    enable = enable & 0x01;
    if( mode >= 0 && mode <= 6 ) {
 80a1b66:	2e06      	cmp	r6, #6
    if( reg_val == ERROR_APDS ) {
        return false;
    }

    /* Change bit(s) in ENABLE register */
    enable = enable & 0x01;
 80a1b68:	f004 0201 	and.w	r2, r4, #1
    if( mode >= 0 && mode <= 6 ) {
 80a1b6c:	d808      	bhi.n	80a1b80 <_ZN17SparkFun_APDS99607setModeEhh+0x2a>
 80a1b6e:	2301      	movs	r3, #1
        if (enable) {
            reg_val |= (1 << mode);
 80a1b70:	40b3      	lsls	r3, r6
    }

    /* Change bit(s) in ENABLE register */
    enable = enable & 0x01;
    if( mode >= 0 && mode <= 6 ) {
        if (enable) {
 80a1b72:	b10a      	cbz	r2, 80a1b78 <_ZN17SparkFun_APDS99607setModeEhh+0x22>
            reg_val |= (1 << mode);
 80a1b74:	4318      	orrs	r0, r3
 80a1b76:	e001      	b.n	80a1b7c <_ZN17SparkFun_APDS99607setModeEhh+0x26>
        } else {
            reg_val &= ~(1 << mode);
 80a1b78:	ea20 0003 	bic.w	r0, r0, r3
 80a1b7c:	b2c0      	uxtb	r0, r0
 80a1b7e:	e005      	b.n	80a1b8c <_ZN17SparkFun_APDS99607setModeEhh+0x36>
        }
    } else if( mode == ALL ) {
 80a1b80:	2e07      	cmp	r6, #7
 80a1b82:	d103      	bne.n	80a1b8c <_ZN17SparkFun_APDS99607setModeEhh+0x36>
        if (enable) {
 80a1b84:	2a00      	cmp	r2, #0
            reg_val = 0x7F;
        } else {
            reg_val = 0x00;
 80a1b86:	bf14      	ite	ne
 80a1b88:	207f      	movne	r0, #127	; 0x7f
 80a1b8a:	2000      	moveq	r0, #0
        }
    }

    /* Write value back to ENABLE register */
    if( !wireWriteDataByte(APDS9960_ENABLE, reg_val) ) {
 80a1b8c:	4602      	mov	r2, r0
 80a1b8e:	2180      	movs	r1, #128	; 0x80
 80a1b90:	4628      	mov	r0, r5
        return false;
    }

    return true;
}
 80a1b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            reg_val = 0x00;
        }
    }

    /* Write value back to ENABLE register */
    if( !wireWriteDataByte(APDS9960_ENABLE, reg_val) ) {
 80a1b96:	f7ff bf69 	b.w	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
        return false;
    }

    return true;
}
 80a1b9a:	2000      	movs	r0, #0
 80a1b9c:	bd70      	pop	{r4, r5, r6, pc}

080a1b9e <_ZN17SparkFun_APDS996011enablePowerEv>:
 *
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::enablePower()
{
    if( !setMode(POWER, 1) ) {
 80a1b9e:	2201      	movs	r2, #1
 80a1ba0:	2100      	movs	r1, #0
 80a1ba2:	f7ff bfd8 	b.w	80a1b56 <_ZN17SparkFun_APDS99607setModeEhh>

080a1ba6 <_ZN17SparkFun_APDS996011setLEDDriveEh>:
 *
 * @param[in] drive the value (0-3) for the LED drive strength
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setLEDDrive(uint8_t drive)
{
 80a1ba6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1ba8:	460d      	mov	r5, r1
    uint8_t val;

    /* Read value from CONTROL register */
    if( !wireReadDataByte(APDS9960_CONTROL, val) ) {
 80a1baa:	f10d 0207 	add.w	r2, sp, #7
 80a1bae:	218f      	movs	r1, #143	; 0x8f
 *
 * @param[in] drive the value (0-3) for the LED drive strength
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setLEDDrive(uint8_t drive)
{
 80a1bb0:	4604      	mov	r4, r0
    uint8_t val;

    /* Read value from CONTROL register */
    if( !wireReadDataByte(APDS9960_CONTROL, val) ) {
 80a1bb2:	f7ff ffa7 	bl	80a1b04 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80a1bb6:	b160      	cbz	r0, 80a1bd2 <_ZN17SparkFun_APDS996011setLEDDriveEh+0x2c>

    /* Set bits in register to given value */
    drive &= 0b00000011;
    drive = drive << 6;
    val &= 0b00111111;
    val |= drive;
 80a1bb8:	f89d 2007 	ldrb.w	r2, [sp, #7]

    /* Write register value back into CONTROL register */
    if( !wireWriteDataByte(APDS9960_CONTROL, val) ) {
 80a1bbc:	218f      	movs	r1, #143	; 0x8f

    /* Set bits in register to given value */
    drive &= 0b00000011;
    drive = drive << 6;
    val &= 0b00111111;
    val |= drive;
 80a1bbe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80a1bc2:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80a1bc6:	b2d2      	uxtb	r2, r2

    /* Write register value back into CONTROL register */
    if( !wireWriteDataByte(APDS9960_CONTROL, val) ) {
 80a1bc8:	4620      	mov	r0, r4

    /* Set bits in register to given value */
    drive &= 0b00000011;
    drive = drive << 6;
    val &= 0b00111111;
    val |= drive;
 80a1bca:	f88d 2007 	strb.w	r2, [sp, #7]

    /* Write register value back into CONTROL register */
    if( !wireWriteDataByte(APDS9960_CONTROL, val) ) {
 80a1bce:	f7ff ff4d 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
        return false;
    }

    return true;
}
 80a1bd2:	b003      	add	sp, #12
 80a1bd4:	bd30      	pop	{r4, r5, pc}

080a1bd6 <_ZN17SparkFun_APDS996016setProximityGainEh>:
 *
 * @param[in] drive the value (0-3) for the gain
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setProximityGain(uint8_t drive)
{
 80a1bd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1bd8:	460c      	mov	r4, r1
    uint8_t val;

    /* Read value from CONTROL register */
    if( !wireReadDataByte(APDS9960_CONTROL, val) ) {
 80a1bda:	f10d 0207 	add.w	r2, sp, #7
 80a1bde:	218f      	movs	r1, #143	; 0x8f
 *
 * @param[in] drive the value (0-3) for the gain
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setProximityGain(uint8_t drive)
{
 80a1be0:	4605      	mov	r5, r0
    uint8_t val;

    /* Read value from CONTROL register */
    if( !wireReadDataByte(APDS9960_CONTROL, val) ) {
 80a1be2:	f7ff ff8f 	bl	80a1b04 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80a1be6:	b168      	cbz	r0, 80a1c04 <_ZN17SparkFun_APDS996016setProximityGainEh+0x2e>

    /* Set bits in register to given value */
    drive &= 0b00000011;
    drive = drive << 2;
    val &= 0b11110011;
    val |= drive;
 80a1be8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a1bec:	00a4      	lsls	r4, r4, #2
 80a1bee:	f022 020c 	bic.w	r2, r2, #12
 80a1bf2:	f004 040c 	and.w	r4, r4, #12
 80a1bf6:	4322      	orrs	r2, r4

    /* Write register value back into CONTROL register */
    if( !wireWriteDataByte(APDS9960_CONTROL, val) ) {
 80a1bf8:	218f      	movs	r1, #143	; 0x8f
 80a1bfa:	4628      	mov	r0, r5

    /* Set bits in register to given value */
    drive &= 0b00000011;
    drive = drive << 2;
    val &= 0b11110011;
    val |= drive;
 80a1bfc:	f88d 2007 	strb.w	r2, [sp, #7]

    /* Write register value back into CONTROL register */
    if( !wireWriteDataByte(APDS9960_CONTROL, val) ) {
 80a1c00:	f7ff ff34 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
        return false;
    }

    return true;
}
 80a1c04:	b003      	add	sp, #12
 80a1c06:	bd30      	pop	{r4, r5, pc}

080a1c08 <_ZN17SparkFun_APDS996019setAmbientLightGainEh>:
 *
 * @param[in] drive the value (0-3) for the gain
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setAmbientLightGain(uint8_t drive)
{
 80a1c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1c0a:	460c      	mov	r4, r1
    uint8_t val;

    /* Read value from CONTROL register */
    if( !wireReadDataByte(APDS9960_CONTROL, val) ) {
 80a1c0c:	f10d 0207 	add.w	r2, sp, #7
 80a1c10:	218f      	movs	r1, #143	; 0x8f
 *
 * @param[in] drive the value (0-3) for the gain
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setAmbientLightGain(uint8_t drive)
{
 80a1c12:	4605      	mov	r5, r0
    uint8_t val;

    /* Read value from CONTROL register */
    if( !wireReadDataByte(APDS9960_CONTROL, val) ) {
 80a1c14:	f7ff ff76 	bl	80a1b04 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80a1c18:	b160      	cbz	r0, 80a1c34 <_ZN17SparkFun_APDS996019setAmbientLightGainEh+0x2c>
    }

    /* Set bits in register to given value */
    drive &= 0b00000011;
    val &= 0b11111100;
    val |= drive;
 80a1c1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a1c1e:	f004 0403 	and.w	r4, r4, #3
 80a1c22:	f022 0203 	bic.w	r2, r2, #3
 80a1c26:	4322      	orrs	r2, r4

    /* Write register value back into CONTROL register */
    if( !wireWriteDataByte(APDS9960_CONTROL, val) ) {
 80a1c28:	218f      	movs	r1, #143	; 0x8f
 80a1c2a:	4628      	mov	r0, r5
    }

    /* Set bits in register to given value */
    drive &= 0b00000011;
    val &= 0b11111100;
    val |= drive;
 80a1c2c:	f88d 2007 	strb.w	r2, [sp, #7]

    /* Write register value back into CONTROL register */
    if( !wireWriteDataByte(APDS9960_CONTROL, val) ) {
 80a1c30:	f7ff ff1c 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
        return false;
    }

    return true;
}
 80a1c34:	b003      	add	sp, #12
 80a1c36:	bd30      	pop	{r4, r5, pc}

080a1c38 <_ZN17SparkFun_APDS996014setGestureGainEh>:
 *
 * @param[in] gain the value for the photodiode gain
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureGain(uint8_t gain)
{
 80a1c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1c3a:	460c      	mov	r4, r1
    uint8_t val;

    /* Read value from GCONF2 register */
    if( !wireReadDataByte(APDS9960_GCONF2, val) ) {
 80a1c3c:	f10d 0207 	add.w	r2, sp, #7
 80a1c40:	21a3      	movs	r1, #163	; 0xa3
 *
 * @param[in] gain the value for the photodiode gain
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureGain(uint8_t gain)
{
 80a1c42:	4605      	mov	r5, r0
    uint8_t val;

    /* Read value from GCONF2 register */
    if( !wireReadDataByte(APDS9960_GCONF2, val) ) {
 80a1c44:	f7ff ff5e 	bl	80a1b04 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80a1c48:	b168      	cbz	r0, 80a1c66 <_ZN17SparkFun_APDS996014setGestureGainEh+0x2e>

    /* Set bits in register to given value */
    gain &= 0b00000011;
    gain = gain << 5;
    val &= 0b10011111;
    val |= gain;
 80a1c4a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a1c4e:	0164      	lsls	r4, r4, #5
 80a1c50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80a1c54:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80a1c58:	4322      	orrs	r2, r4

    /* Write register value back into GCONF2 register */
    if( !wireWriteDataByte(APDS9960_GCONF2, val) ) {
 80a1c5a:	21a3      	movs	r1, #163	; 0xa3
 80a1c5c:	4628      	mov	r0, r5

    /* Set bits in register to given value */
    gain &= 0b00000011;
    gain = gain << 5;
    val &= 0b10011111;
    val |= gain;
 80a1c5e:	f88d 2007 	strb.w	r2, [sp, #7]

    /* Write register value back into GCONF2 register */
    if( !wireWriteDataByte(APDS9960_GCONF2, val) ) {
 80a1c62:	f7ff ff03 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
        return false;
    }

    return true;
}
 80a1c66:	b003      	add	sp, #12
 80a1c68:	bd30      	pop	{r4, r5, pc}

080a1c6a <_ZN17SparkFun_APDS996018setGestureLEDDriveEh>:
 *
 * @param[in] drive the value for the LED drive current
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureLEDDrive(uint8_t drive)
{
 80a1c6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1c6c:	460c      	mov	r4, r1
    uint8_t val;

    /* Read value from GCONF2 register */
    if( !wireReadDataByte(APDS9960_GCONF2, val) ) {
 80a1c6e:	f10d 0207 	add.w	r2, sp, #7
 80a1c72:	21a3      	movs	r1, #163	; 0xa3
 *
 * @param[in] drive the value for the LED drive current
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureLEDDrive(uint8_t drive)
{
 80a1c74:	4605      	mov	r5, r0
    uint8_t val;

    /* Read value from GCONF2 register */
    if( !wireReadDataByte(APDS9960_GCONF2, val) ) {
 80a1c76:	f7ff ff45 	bl	80a1b04 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80a1c7a:	b168      	cbz	r0, 80a1c98 <_ZN17SparkFun_APDS996018setGestureLEDDriveEh+0x2e>

    /* Set bits in register to given value */
    drive &= 0b00000011;
    drive = drive << 3;
    val &= 0b11100111;
    val |= drive;
 80a1c7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a1c80:	00e4      	lsls	r4, r4, #3
 80a1c82:	f022 0218 	bic.w	r2, r2, #24
 80a1c86:	f004 0418 	and.w	r4, r4, #24
 80a1c8a:	4322      	orrs	r2, r4

    /* Write register value back into GCONF2 register */
    if( !wireWriteDataByte(APDS9960_GCONF2, val) ) {
 80a1c8c:	21a3      	movs	r1, #163	; 0xa3
 80a1c8e:	4628      	mov	r0, r5

    /* Set bits in register to given value */
    drive &= 0b00000011;
    drive = drive << 3;
    val &= 0b11100111;
    val |= drive;
 80a1c90:	f88d 2007 	strb.w	r2, [sp, #7]

    /* Write register value back into GCONF2 register */
    if( !wireWriteDataByte(APDS9960_GCONF2, val) ) {
 80a1c94:	f7ff feea 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
        return false;
    }

    return true;
}
 80a1c98:	b003      	add	sp, #12
 80a1c9a:	bd30      	pop	{r4, r5, pc}

080a1c9c <_ZN17SparkFun_APDS996018setGestureWaitTimeEh>:
 *
 * @param[in] the value for the wait time
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureWaitTime(uint8_t time)
{
 80a1c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1c9e:	460c      	mov	r4, r1
    uint8_t val;

    /* Read value from GCONF2 register */
    if( !wireReadDataByte(APDS9960_GCONF2, val) ) {
 80a1ca0:	f10d 0207 	add.w	r2, sp, #7
 80a1ca4:	21a3      	movs	r1, #163	; 0xa3
 *
 * @param[in] the value for the wait time
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureWaitTime(uint8_t time)
{
 80a1ca6:	4605      	mov	r5, r0
    uint8_t val;

    /* Read value from GCONF2 register */
    if( !wireReadDataByte(APDS9960_GCONF2, val) ) {
 80a1ca8:	f7ff ff2c 	bl	80a1b04 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80a1cac:	b160      	cbz	r0, 80a1cc8 <_ZN17SparkFun_APDS996018setGestureWaitTimeEh+0x2c>
    }

    /* Set bits in register to given value */
    time &= 0b00000111;
    val &= 0b11111000;
    val |= time;
 80a1cae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a1cb2:	f004 0407 	and.w	r4, r4, #7
 80a1cb6:	f022 0207 	bic.w	r2, r2, #7
 80a1cba:	4322      	orrs	r2, r4

    /* Write register value back into GCONF2 register */
    if( !wireWriteDataByte(APDS9960_GCONF2, val) ) {
 80a1cbc:	21a3      	movs	r1, #163	; 0xa3
 80a1cbe:	4628      	mov	r0, r5
    }

    /* Set bits in register to given value */
    time &= 0b00000111;
    val &= 0b11111000;
    val |= time;
 80a1cc0:	f88d 2007 	strb.w	r2, [sp, #7]

    /* Write register value back into GCONF2 register */
    if( !wireWriteDataByte(APDS9960_GCONF2, val) ) {
 80a1cc4:	f7ff fed2 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
        return false;
    }

    return true;
}
 80a1cc8:	b003      	add	sp, #12
 80a1cca:	bd30      	pop	{r4, r5, pc}

080a1ccc <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh>:
 *
 * @param[in] enable 1 to enable interrupts, 0 to turn them off
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setAmbientLightIntEnable(uint8_t enable)
{
 80a1ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1cce:	460c      	mov	r4, r1
    uint8_t val;

    /* Read value from ENABLE register */
    if( !wireReadDataByte(APDS9960_ENABLE, val) ) {
 80a1cd0:	f10d 0207 	add.w	r2, sp, #7
 80a1cd4:	2180      	movs	r1, #128	; 0x80
 *
 * @param[in] enable 1 to enable interrupts, 0 to turn them off
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setAmbientLightIntEnable(uint8_t enable)
{
 80a1cd6:	4605      	mov	r5, r0
    uint8_t val;

    /* Read value from ENABLE register */
    if( !wireReadDataByte(APDS9960_ENABLE, val) ) {
 80a1cd8:	f7ff ff14 	bl	80a1b04 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80a1cdc:	b168      	cbz	r0, 80a1cfa <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh+0x2e>

    /* Set bits in register to given value */
    enable &= 0b00000001;
    enable = enable << 4;
    val &= 0b11101111;
    val |= enable;
 80a1cde:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a1ce2:	0124      	lsls	r4, r4, #4
 80a1ce4:	f022 0210 	bic.w	r2, r2, #16
 80a1ce8:	f004 0410 	and.w	r4, r4, #16
 80a1cec:	4322      	orrs	r2, r4

    /* Write register value back into ENABLE register */
    if( !wireWriteDataByte(APDS9960_ENABLE, val) ) {
 80a1cee:	2180      	movs	r1, #128	; 0x80
 80a1cf0:	4628      	mov	r0, r5

    /* Set bits in register to given value */
    enable &= 0b00000001;
    enable = enable << 4;
    val &= 0b11101111;
    val |= enable;
 80a1cf2:	f88d 2007 	strb.w	r2, [sp, #7]

    /* Write register value back into ENABLE register */
    if( !wireWriteDataByte(APDS9960_ENABLE, val) ) {
 80a1cf6:	f7ff feb9 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
        return false;
    }

    return true;
}
 80a1cfa:	b003      	add	sp, #12
 80a1cfc:	bd30      	pop	{r4, r5, pc}

080a1cfe <_ZN17SparkFun_APDS996017enableLightSensorEb>:
 *
 * @param[in] interrupts true to enable hardware interrupt on high or low light
 * @return True if sensor enabled correctly. False on error.
 */
bool SparkFun_APDS9960::enableLightSensor(bool interrupts)
{
 80a1cfe:	b538      	push	{r3, r4, r5, lr}
 80a1d00:	460d      	mov	r5, r1

    /* Set default gain, interrupts, enable power, and enable sensor */
    if( !setAmbientLightGain(DEFAULT_AGAIN) ) {
 80a1d02:	2101      	movs	r1, #1
 *
 * @param[in] interrupts true to enable hardware interrupt on high or low light
 * @return True if sensor enabled correctly. False on error.
 */
bool SparkFun_APDS9960::enableLightSensor(bool interrupts)
{
 80a1d04:	4604      	mov	r4, r0

    /* Set default gain, interrupts, enable power, and enable sensor */
    if( !setAmbientLightGain(DEFAULT_AGAIN) ) {
 80a1d06:	f7ff ff7f 	bl	80a1c08 <_ZN17SparkFun_APDS996019setAmbientLightGainEh>
 80a1d0a:	b190      	cbz	r0, 80a1d32 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x34>
        return false;
    }
    if( interrupts ) {
 80a1d0c:	b17d      	cbz	r5, 80a1d2e <_ZN17SparkFun_APDS996017enableLightSensorEb+0x30>
        if( !setAmbientLightIntEnable(1) ) {
 80a1d0e:	2101      	movs	r1, #1
 80a1d10:	4620      	mov	r0, r4
 80a1d12:	f7ff ffdb 	bl	80a1ccc <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh>
 80a1d16:	b160      	cbz	r0, 80a1d32 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x34>
    } else {
        if( !setAmbientLightIntEnable(0) ) {
            return false;
        }
    }
    if( !enablePower() ){
 80a1d18:	4620      	mov	r0, r4
 80a1d1a:	f7ff ff40 	bl	80a1b9e <_ZN17SparkFun_APDS996011enablePowerEv>
 80a1d1e:	b140      	cbz	r0, 80a1d32 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x34>
        return false;
    }
    if( !setMode(AMBIENT_LIGHT, 1) ) {
 80a1d20:	2201      	movs	r2, #1
 80a1d22:	4620      	mov	r0, r4
        return false;
    }

    return true;

}
 80a1d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
    }
    if( !enablePower() ){
        return false;
    }
    if( !setMode(AMBIENT_LIGHT, 1) ) {
 80a1d28:	4611      	mov	r1, r2
 80a1d2a:	f7ff bf14 	b.w	80a1b56 <_ZN17SparkFun_APDS99607setModeEhh>
    if( interrupts ) {
        if( !setAmbientLightIntEnable(1) ) {
            return false;
        }
    } else {
        if( !setAmbientLightIntEnable(0) ) {
 80a1d2e:	4629      	mov	r1, r5
 80a1d30:	e7ee      	b.n	80a1d10 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x12>
        return false;
    }

    return true;

}
 80a1d32:	2000      	movs	r0, #0
 80a1d34:	bd38      	pop	{r3, r4, r5, pc}

080a1d36 <_ZN17SparkFun_APDS996021setProximityIntEnableEh>:
 *
 * @param[in] enable 1 to enable interrupts, 0 to turn them off
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setProximityIntEnable(uint8_t enable)
{
 80a1d36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1d38:	460c      	mov	r4, r1
    uint8_t val;

    /* Read value from ENABLE register */
    if( !wireReadDataByte(APDS9960_ENABLE, val) ) {
 80a1d3a:	f10d 0207 	add.w	r2, sp, #7
 80a1d3e:	2180      	movs	r1, #128	; 0x80
 *
 * @param[in] enable 1 to enable interrupts, 0 to turn them off
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setProximityIntEnable(uint8_t enable)
{
 80a1d40:	4605      	mov	r5, r0
    uint8_t val;

    /* Read value from ENABLE register */
    if( !wireReadDataByte(APDS9960_ENABLE, val) ) {
 80a1d42:	f7ff fedf 	bl	80a1b04 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80a1d46:	b168      	cbz	r0, 80a1d64 <_ZN17SparkFun_APDS996021setProximityIntEnableEh+0x2e>

    /* Set bits in register to given value */
    enable &= 0b00000001;
    enable = enable << 5;
    val &= 0b11011111;
    val |= enable;
 80a1d48:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a1d4c:	0164      	lsls	r4, r4, #5
 80a1d4e:	f022 0220 	bic.w	r2, r2, #32
 80a1d52:	f004 0420 	and.w	r4, r4, #32
 80a1d56:	4322      	orrs	r2, r4

    /* Write register value back into ENABLE register */
    if( !wireWriteDataByte(APDS9960_ENABLE, val) ) {
 80a1d58:	2180      	movs	r1, #128	; 0x80
 80a1d5a:	4628      	mov	r0, r5

    /* Set bits in register to given value */
    enable &= 0b00000001;
    enable = enable << 5;
    val &= 0b11011111;
    val |= enable;
 80a1d5c:	f88d 2007 	strb.w	r2, [sp, #7]

    /* Write register value back into ENABLE register */
    if( !wireWriteDataByte(APDS9960_ENABLE, val) ) {
 80a1d60:	f7ff fe84 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
        return false;
    }

    return true;
}
 80a1d64:	b003      	add	sp, #12
 80a1d66:	bd30      	pop	{r4, r5, pc}

080a1d68 <_ZN17SparkFun_APDS996021enableProximitySensorEb>:
 *
 * @param[in] interrupts true to enable hardware external interrupt on proximity
 * @return True if sensor enabled correctly. False on error.
 */
bool SparkFun_APDS9960::enableProximitySensor(bool interrupts)
{
 80a1d68:	b538      	push	{r3, r4, r5, lr}
 80a1d6a:	460d      	mov	r5, r1
    /* Set default gain, LED, interrupts, enable power, and enable sensor */
    if( !setProximityGain(DEFAULT_PGAIN) ) {
 80a1d6c:	2102      	movs	r1, #2
 *
 * @param[in] interrupts true to enable hardware external interrupt on proximity
 * @return True if sensor enabled correctly. False on error.
 */
bool SparkFun_APDS9960::enableProximitySensor(bool interrupts)
{
 80a1d6e:	4604      	mov	r4, r0
    /* Set default gain, LED, interrupts, enable power, and enable sensor */
    if( !setProximityGain(DEFAULT_PGAIN) ) {
 80a1d70:	f7ff ff31 	bl	80a1bd6 <_ZN17SparkFun_APDS996016setProximityGainEh>
 80a1d74:	b1b8      	cbz	r0, 80a1da6 <_ZN17SparkFun_APDS996021enableProximitySensorEb+0x3e>
        return false;
    }
    if( !setLEDDrive(DEFAULT_LDRIVE) ) {
 80a1d76:	2100      	movs	r1, #0
 80a1d78:	4620      	mov	r0, r4
 80a1d7a:	f7ff ff14 	bl	80a1ba6 <_ZN17SparkFun_APDS996011setLEDDriveEh>
 80a1d7e:	b190      	cbz	r0, 80a1da6 <_ZN17SparkFun_APDS996021enableProximitySensorEb+0x3e>
        return false;
    }
    if( interrupts ) {
 80a1d80:	b17d      	cbz	r5, 80a1da2 <_ZN17SparkFun_APDS996021enableProximitySensorEb+0x3a>
        if( !setProximityIntEnable(1) ) {
 80a1d82:	2101      	movs	r1, #1
 80a1d84:	4620      	mov	r0, r4
 80a1d86:	f7ff ffd6 	bl	80a1d36 <_ZN17SparkFun_APDS996021setProximityIntEnableEh>
 80a1d8a:	b160      	cbz	r0, 80a1da6 <_ZN17SparkFun_APDS996021enableProximitySensorEb+0x3e>
    } else {
        if( !setProximityIntEnable(0) ) {
            return false;
        }
    }
    if( !enablePower() ){
 80a1d8c:	4620      	mov	r0, r4
 80a1d8e:	f7ff ff06 	bl	80a1b9e <_ZN17SparkFun_APDS996011enablePowerEv>
 80a1d92:	b140      	cbz	r0, 80a1da6 <_ZN17SparkFun_APDS996021enableProximitySensorEb+0x3e>
        return false;
    }
    if( !setMode(PROXIMITY, 1) ) {
 80a1d94:	4620      	mov	r0, r4
        return false;
    }

    return true;
}
 80a1d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
    }
    if( !enablePower() ){
        return false;
    }
    if( !setMode(PROXIMITY, 1) ) {
 80a1d9a:	2201      	movs	r2, #1
 80a1d9c:	2102      	movs	r1, #2
 80a1d9e:	f7ff beda 	b.w	80a1b56 <_ZN17SparkFun_APDS99607setModeEhh>
    if( interrupts ) {
        if( !setProximityIntEnable(1) ) {
            return false;
        }
    } else {
        if( !setProximityIntEnable(0) ) {
 80a1da2:	4629      	mov	r1, r5
 80a1da4:	e7ee      	b.n	80a1d84 <_ZN17SparkFun_APDS996021enableProximitySensorEb+0x1c>
    if( !setMode(PROXIMITY, 1) ) {
        return false;
    }

    return true;
}
 80a1da6:	2000      	movs	r0, #0
 80a1da8:	bd38      	pop	{r3, r4, r5, pc}

080a1daa <_ZN17SparkFun_APDS996019setGestureIntEnableEh>:
 *
 * @param[in] enable 1 to enable interrupts, 0 to turn them off
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureIntEnable(uint8_t enable)
{
 80a1daa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1dac:	460c      	mov	r4, r1
    uint8_t val;

    /* Read value from GCONF4 register */
    if( !wireReadDataByte(APDS9960_GCONF4, val) ) {
 80a1dae:	f10d 0207 	add.w	r2, sp, #7
 80a1db2:	21ab      	movs	r1, #171	; 0xab
 *
 * @param[in] enable 1 to enable interrupts, 0 to turn them off
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureIntEnable(uint8_t enable)
{
 80a1db4:	4605      	mov	r5, r0
    uint8_t val;

    /* Read value from GCONF4 register */
    if( !wireReadDataByte(APDS9960_GCONF4, val) ) {
 80a1db6:	f7ff fea5 	bl	80a1b04 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80a1dba:	b168      	cbz	r0, 80a1dd8 <_ZN17SparkFun_APDS996019setGestureIntEnableEh+0x2e>

    /* Set bits in register to given value */
    enable &= 0b00000001;
    enable = enable << 1;
    val &= 0b11111101;
    val |= enable;
 80a1dbc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a1dc0:	0064      	lsls	r4, r4, #1
 80a1dc2:	f022 0202 	bic.w	r2, r2, #2
 80a1dc6:	f004 0402 	and.w	r4, r4, #2
 80a1dca:	4322      	orrs	r2, r4

    /* Write register value back into GCONF4 register */
    if( !wireWriteDataByte(APDS9960_GCONF4, val) ) {
 80a1dcc:	21ab      	movs	r1, #171	; 0xab
 80a1dce:	4628      	mov	r0, r5

    /* Set bits in register to given value */
    enable &= 0b00000001;
    enable = enable << 1;
    val &= 0b11111101;
    val |= enable;
 80a1dd0:	f88d 2007 	strb.w	r2, [sp, #7]

    /* Write register value back into GCONF4 register */
    if( !wireWriteDataByte(APDS9960_GCONF4, val) ) {
 80a1dd4:	f7ff fe4a 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
        return false;
    }

    return true;
}
 80a1dd8:	b003      	add	sp, #12
 80a1dda:	bd30      	pop	{r4, r5, pc}

080a1ddc <_ZN17SparkFun_APDS99604initEv>:
 * @brief Configures I2C communications and initializes registers to defaults
 *
 * @return True if initialized successfully. False otherwise.
 */
bool SparkFun_APDS9960::init()
{
 80a1ddc:	b513      	push	{r0, r1, r4, lr}
 80a1dde:	4604      	mov	r4, r0
    uint8_t id;

    /* Initialize I2C */
    Wire.begin();
 80a1de0:	f001 fbea 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a1de4:	f001 fa4a 	bl	80a327c <_ZN7TwoWire5beginEv>

    /* Read ID register and check against known values for APDS-9960 */
    if( !wireReadDataByte(APDS9960_ID, id) ) {
 80a1de8:	f10d 0207 	add.w	r2, sp, #7
 80a1dec:	2192      	movs	r1, #146	; 0x92
 80a1dee:	4620      	mov	r0, r4
 80a1df0:	f7ff fe88 	bl	80a1b04 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80a1df4:	b908      	cbnz	r0, 80a1dfa <_ZN17SparkFun_APDS99604initEv+0x1e>
        return false;
 80a1df6:	2000      	movs	r0, #0
 80a1df8:	e0d4      	b.n	80a1fa4 <_ZN17SparkFun_APDS99604initEv+0x1c8>
    }
    if( !(id == APDS9960_ID_1 || id == APDS9960_ID_2) ) {
 80a1dfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a1dfe:	2bab      	cmp	r3, #171	; 0xab
 80a1e00:	d001      	beq.n	80a1e06 <_ZN17SparkFun_APDS99604initEv+0x2a>
 80a1e02:	2b9c      	cmp	r3, #156	; 0x9c
 80a1e04:	d1f7      	bne.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }

    /* Set ENABLE register to 0 (disable all features) */
    if( !setMode(ALL, OFF) ) {
 80a1e06:	2200      	movs	r2, #0
 80a1e08:	2107      	movs	r1, #7
 80a1e0a:	4620      	mov	r0, r4
 80a1e0c:	f7ff fea3 	bl	80a1b56 <_ZN17SparkFun_APDS99607setModeEhh>
 80a1e10:	2800      	cmp	r0, #0
 80a1e12:	d0f0      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }

    /* Set default values for ambient light and proximity registers */
    if( !wireWriteDataByte(APDS9960_ATIME, DEFAULT_ATIME) ) {
 80a1e14:	22db      	movs	r2, #219	; 0xdb
 80a1e16:	2181      	movs	r1, #129	; 0x81
 80a1e18:	4620      	mov	r0, r4
 80a1e1a:	f7ff fe27 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1e1e:	2800      	cmp	r0, #0
 80a1e20:	d0e9      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !wireWriteDataByte(APDS9960_WTIME, DEFAULT_WTIME) ) {
 80a1e22:	22f6      	movs	r2, #246	; 0xf6
 80a1e24:	2183      	movs	r1, #131	; 0x83
 80a1e26:	4620      	mov	r0, r4
 80a1e28:	f7ff fe20 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1e2c:	2800      	cmp	r0, #0
 80a1e2e:	d0e2      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !wireWriteDataByte(APDS9960_PPULSE, DEFAULT_PROX_PPULSE) ) {
 80a1e30:	2287      	movs	r2, #135	; 0x87
 80a1e32:	218e      	movs	r1, #142	; 0x8e
 80a1e34:	4620      	mov	r0, r4
 80a1e36:	f7ff fe19 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1e3a:	2800      	cmp	r0, #0
 80a1e3c:	d0db      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !wireWriteDataByte(APDS9960_POFFSET_UR, DEFAULT_POFFSET_UR) ) {
 80a1e3e:	2200      	movs	r2, #0
 80a1e40:	219d      	movs	r1, #157	; 0x9d
 80a1e42:	4620      	mov	r0, r4
 80a1e44:	f7ff fe12 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1e48:	2800      	cmp	r0, #0
 80a1e4a:	d0d4      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !wireWriteDataByte(APDS9960_POFFSET_DL, DEFAULT_POFFSET_DL) ) {
 80a1e4c:	2200      	movs	r2, #0
 80a1e4e:	219e      	movs	r1, #158	; 0x9e
 80a1e50:	4620      	mov	r0, r4
 80a1e52:	f7ff fe0b 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1e56:	2800      	cmp	r0, #0
 80a1e58:	d0cd      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !wireWriteDataByte(APDS9960_CONFIG1, DEFAULT_CONFIG1) ) {
 80a1e5a:	2260      	movs	r2, #96	; 0x60
 80a1e5c:	218d      	movs	r1, #141	; 0x8d
 80a1e5e:	4620      	mov	r0, r4
 80a1e60:	f7ff fe04 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1e64:	2800      	cmp	r0, #0
 80a1e66:	d0c6      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !setLEDDrive(DEFAULT_LDRIVE) ) {
 80a1e68:	2100      	movs	r1, #0
 80a1e6a:	4620      	mov	r0, r4
 80a1e6c:	f7ff fe9b 	bl	80a1ba6 <_ZN17SparkFun_APDS996011setLEDDriveEh>
 80a1e70:	2800      	cmp	r0, #0
 80a1e72:	d0c0      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !setProximityGain(DEFAULT_PGAIN) ) {
 80a1e74:	2102      	movs	r1, #2
 80a1e76:	4620      	mov	r0, r4
 80a1e78:	f7ff fead 	bl	80a1bd6 <_ZN17SparkFun_APDS996016setProximityGainEh>
 80a1e7c:	2800      	cmp	r0, #0
 80a1e7e:	d0ba      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !setAmbientLightGain(DEFAULT_AGAIN) ) {
 80a1e80:	2101      	movs	r1, #1
 80a1e82:	4620      	mov	r0, r4
 80a1e84:	f7ff fec0 	bl	80a1c08 <_ZN17SparkFun_APDS996019setAmbientLightGainEh>
 80a1e88:	2800      	cmp	r0, #0
 80a1e8a:	d0b4      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !setProxIntLowThresh(DEFAULT_PILT) ) {
 80a1e8c:	2100      	movs	r1, #0
 80a1e8e:	4620      	mov	r0, r4
 80a1e90:	f7ff fe30 	bl	80a1af4 <_ZN17SparkFun_APDS996027setProximityIntLowThresholdEh>
 80a1e94:	2800      	cmp	r0, #0
 80a1e96:	d0ae      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !setProxIntHighThresh(DEFAULT_PIHT) ) {
 80a1e98:	2132      	movs	r1, #50	; 0x32
 80a1e9a:	4620      	mov	r0, r4
 80a1e9c:	f7ff fe2e 	bl	80a1afc <_ZN17SparkFun_APDS996028setProximityIntHighThresholdEh>
 80a1ea0:	2800      	cmp	r0, #0
 80a1ea2:	d0a8      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !setLightIntLowThreshold(DEFAULT_AILT) ) {
 80a1ea4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1ea8:	4620      	mov	r0, r4
 80a1eaa:	f7ff fe03 	bl	80a1ab4 <_ZN17SparkFun_APDS996023setLightIntLowThresholdEt>
 80a1eae:	2800      	cmp	r0, #0
 80a1eb0:	d0a1      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !setLightIntHighThreshold(DEFAULT_AIHT) ) {
 80a1eb2:	2100      	movs	r1, #0
 80a1eb4:	4620      	mov	r0, r4
 80a1eb6:	f7ff fe0d 	bl	80a1ad4 <_ZN17SparkFun_APDS996024setLightIntHighThresholdEt>
 80a1eba:	2800      	cmp	r0, #0
 80a1ebc:	d09b      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !wireWriteDataByte(APDS9960_PERS, DEFAULT_PERS) ) {
 80a1ebe:	2211      	movs	r2, #17
 80a1ec0:	218c      	movs	r1, #140	; 0x8c
 80a1ec2:	4620      	mov	r0, r4
 80a1ec4:	f7ff fdd2 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1ec8:	2800      	cmp	r0, #0
 80a1eca:	d094      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !wireWriteDataByte(APDS9960_CONFIG2, DEFAULT_CONFIG2) ) {
 80a1ecc:	2201      	movs	r2, #1
 80a1ece:	2190      	movs	r1, #144	; 0x90
 80a1ed0:	4620      	mov	r0, r4
 80a1ed2:	f7ff fdcb 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1ed6:	2800      	cmp	r0, #0
 80a1ed8:	d08d      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !wireWriteDataByte(APDS9960_CONFIG3, DEFAULT_CONFIG3) ) {
 80a1eda:	2200      	movs	r2, #0
 80a1edc:	219f      	movs	r1, #159	; 0x9f
 80a1ede:	4620      	mov	r0, r4
 80a1ee0:	f7ff fdc4 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1ee4:	2800      	cmp	r0, #0
 80a1ee6:	d086      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }

    /* Set default values for gesture sense registers */
    if( !setGestureEnterThresh(DEFAULT_GPENTH) ) {
 80a1ee8:	2128      	movs	r1, #40	; 0x28
 80a1eea:	4620      	mov	r0, r4
 80a1eec:	f7ff fdda 	bl	80a1aa4 <_ZN17SparkFun_APDS996021setGestureEnterThreshEh>
 80a1ef0:	2800      	cmp	r0, #0
 80a1ef2:	d080      	beq.n	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !setGestureExitThresh(DEFAULT_GEXTH) ) {
 80a1ef4:	211e      	movs	r1, #30
 80a1ef6:	4620      	mov	r0, r4
 80a1ef8:	f7ff fdd8 	bl	80a1aac <_ZN17SparkFun_APDS996020setGestureExitThreshEh>
 80a1efc:	2800      	cmp	r0, #0
 80a1efe:	f43f af7a 	beq.w	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !wireWriteDataByte(APDS9960_GCONF1, DEFAULT_GCONF1) ) {
 80a1f02:	2240      	movs	r2, #64	; 0x40
 80a1f04:	21a2      	movs	r1, #162	; 0xa2
 80a1f06:	4620      	mov	r0, r4
 80a1f08:	f7ff fdb0 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1f0c:	2800      	cmp	r0, #0
 80a1f0e:	f43f af72 	beq.w	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !setGestureGain(DEFAULT_GGAIN) ) {
 80a1f12:	2102      	movs	r1, #2
 80a1f14:	4620      	mov	r0, r4
 80a1f16:	f7ff fe8f 	bl	80a1c38 <_ZN17SparkFun_APDS996014setGestureGainEh>
 80a1f1a:	2800      	cmp	r0, #0
 80a1f1c:	f43f af6b 	beq.w	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !setGestureLEDDrive(DEFAULT_GLDRIVE) ) {
 80a1f20:	2100      	movs	r1, #0
 80a1f22:	4620      	mov	r0, r4
 80a1f24:	f7ff fea1 	bl	80a1c6a <_ZN17SparkFun_APDS996018setGestureLEDDriveEh>
 80a1f28:	2800      	cmp	r0, #0
 80a1f2a:	f43f af64 	beq.w	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !setGestureWaitTime(DEFAULT_GWTIME) ) {
 80a1f2e:	2101      	movs	r1, #1
 80a1f30:	4620      	mov	r0, r4
 80a1f32:	f7ff feb3 	bl	80a1c9c <_ZN17SparkFun_APDS996018setGestureWaitTimeEh>
 80a1f36:	2800      	cmp	r0, #0
 80a1f38:	f43f af5d 	beq.w	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !wireWriteDataByte(APDS9960_GOFFSET_U, DEFAULT_GOFFSET) ) {
 80a1f3c:	2200      	movs	r2, #0
 80a1f3e:	21a4      	movs	r1, #164	; 0xa4
 80a1f40:	4620      	mov	r0, r4
 80a1f42:	f7ff fd93 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1f46:	2800      	cmp	r0, #0
 80a1f48:	f43f af55 	beq.w	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !wireWriteDataByte(APDS9960_GOFFSET_D, DEFAULT_GOFFSET) ) {
 80a1f4c:	2200      	movs	r2, #0
 80a1f4e:	21a5      	movs	r1, #165	; 0xa5
 80a1f50:	4620      	mov	r0, r4
 80a1f52:	f7ff fd8b 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1f56:	2800      	cmp	r0, #0
 80a1f58:	f43f af4d 	beq.w	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !wireWriteDataByte(APDS9960_GOFFSET_L, DEFAULT_GOFFSET) ) {
 80a1f5c:	2200      	movs	r2, #0
 80a1f5e:	21a7      	movs	r1, #167	; 0xa7
 80a1f60:	4620      	mov	r0, r4
 80a1f62:	f7ff fd83 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1f66:	2800      	cmp	r0, #0
 80a1f68:	f43f af45 	beq.w	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !wireWriteDataByte(APDS9960_GOFFSET_R, DEFAULT_GOFFSET) ) {
 80a1f6c:	2200      	movs	r2, #0
 80a1f6e:	21a9      	movs	r1, #169	; 0xa9
 80a1f70:	4620      	mov	r0, r4
 80a1f72:	f7ff fd7b 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1f76:	2800      	cmp	r0, #0
 80a1f78:	f43f af3d 	beq.w	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !wireWriteDataByte(APDS9960_GPULSE, DEFAULT_GPULSE) ) {
 80a1f7c:	22c9      	movs	r2, #201	; 0xc9
 80a1f7e:	21a6      	movs	r1, #166	; 0xa6
 80a1f80:	4620      	mov	r0, r4
 80a1f82:	f7ff fd73 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1f86:	2800      	cmp	r0, #0
 80a1f88:	f43f af35 	beq.w	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !wireWriteDataByte(APDS9960_GCONF3, DEFAULT_GCONF3) ) {
 80a1f8c:	2200      	movs	r2, #0
 80a1f8e:	21aa      	movs	r1, #170	; 0xaa
 80a1f90:	4620      	mov	r0, r4
 80a1f92:	f7ff fd6b 	bl	80a1a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80a1f96:	2800      	cmp	r0, #0
 80a1f98:	f43f af2d 	beq.w	80a1df6 <_ZN17SparkFun_APDS99604initEv+0x1a>
        return false;
    }
    if( !setGestureIntEnable(DEFAULT_GIEN) ) {
 80a1f9c:	2100      	movs	r1, #0
 80a1f9e:	4620      	mov	r0, r4
 80a1fa0:	f7ff ff03 	bl	80a1daa <_ZN17SparkFun_APDS996019setGestureIntEnableEh>
        Serial.println(val, HEX);
    }
#endif

    return true;
}
 80a1fa4:	b002      	add	sp, #8
 80a1fa6:	bd10      	pop	{r4, pc}

080a1fa8 <_GLOBAL__sub_I__ZN17SparkFun_APDS9960C2Ev>:
 80a1fa8:	f000 b800 	b.w	80a1fac <HAL_Pin_Map>

080a1fac <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1fac:	b508      	push	{r3, lr}
 80a1fae:	4b02      	ldr	r3, [pc, #8]	; (80a1fb8 <HAL_Pin_Map+0xc>)
 80a1fb0:	681b      	ldr	r3, [r3, #0]
 80a1fb2:	681b      	ldr	r3, [r3, #0]
 80a1fb4:	9301      	str	r3, [sp, #4]
 80a1fb6:	bd08      	pop	{r3, pc}
 80a1fb8:	080601b0 	.word	0x080601b0

080a1fbc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1fbc:	b508      	push	{r3, lr}
 80a1fbe:	4b02      	ldr	r3, [pc, #8]	; (80a1fc8 <HAL_Validate_Pin_Function+0xc>)
 80a1fc0:	681b      	ldr	r3, [r3, #0]
 80a1fc2:	685b      	ldr	r3, [r3, #4]
 80a1fc4:	9301      	str	r3, [sp, #4]
 80a1fc6:	bd08      	pop	{r3, pc}
 80a1fc8:	080601b0 	.word	0x080601b0

080a1fcc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1fcc:	b508      	push	{r3, lr}
 80a1fce:	4b02      	ldr	r3, [pc, #8]	; (80a1fd8 <HAL_Pin_Mode+0xc>)
 80a1fd0:	681b      	ldr	r3, [r3, #0]
 80a1fd2:	689b      	ldr	r3, [r3, #8]
 80a1fd4:	9301      	str	r3, [sp, #4]
 80a1fd6:	bd08      	pop	{r3, pc}
 80a1fd8:	080601b0 	.word	0x080601b0

080a1fdc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1fdc:	b508      	push	{r3, lr}
 80a1fde:	4b02      	ldr	r3, [pc, #8]	; (80a1fe8 <HAL_Get_Pin_Mode+0xc>)
 80a1fe0:	681b      	ldr	r3, [r3, #0]
 80a1fe2:	68db      	ldr	r3, [r3, #12]
 80a1fe4:	9301      	str	r3, [sp, #4]
 80a1fe6:	bd08      	pop	{r3, pc}
 80a1fe8:	080601b0 	.word	0x080601b0

080a1fec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1fec:	b508      	push	{r3, lr}
 80a1fee:	4b02      	ldr	r3, [pc, #8]	; (80a1ff8 <HAL_GPIO_Write+0xc>)
 80a1ff0:	681b      	ldr	r3, [r3, #0]
 80a1ff2:	691b      	ldr	r3, [r3, #16]
 80a1ff4:	9301      	str	r3, [sp, #4]
 80a1ff6:	bd08      	pop	{r3, pc}
 80a1ff8:	080601b0 	.word	0x080601b0

080a1ffc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a1ffc:	b508      	push	{r3, lr}
 80a1ffe:	4b02      	ldr	r3, [pc, #8]	; (80a2008 <HAL_ADC_Read+0xc>)
 80a2000:	681b      	ldr	r3, [r3, #0]
 80a2002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2004:	9301      	str	r3, [sp, #4]
 80a2006:	bd08      	pop	{r3, pc}
 80a2008:	080601b0 	.word	0x080601b0

080a200c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a200c:	b508      	push	{r3, lr}
 80a200e:	4b02      	ldr	r3, [pc, #8]	; (80a2018 <HAL_SPI_Init+0xc>)
 80a2010:	681b      	ldr	r3, [r3, #0]
 80a2012:	69db      	ldr	r3, [r3, #28]
 80a2014:	9301      	str	r3, [sp, #4]
 80a2016:	bd08      	pop	{r3, pc}
 80a2018:	080601b4 	.word	0x080601b4

080a201c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a201c:	b508      	push	{r3, lr}
 80a201e:	4b02      	ldr	r3, [pc, #8]	; (80a2028 <HAL_SPI_Is_Enabled+0xc>)
 80a2020:	681b      	ldr	r3, [r3, #0]
 80a2022:	6a1b      	ldr	r3, [r3, #32]
 80a2024:	9301      	str	r3, [sp, #4]
 80a2026:	bd08      	pop	{r3, pc}
 80a2028:	080601b4 	.word	0x080601b4

080a202c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a202c:	b508      	push	{r3, lr}
 80a202e:	4b02      	ldr	r3, [pc, #8]	; (80a2038 <HAL_RNG_GetRandomNumber+0xc>)
 80a2030:	681b      	ldr	r3, [r3, #0]
 80a2032:	685b      	ldr	r3, [r3, #4]
 80a2034:	9301      	str	r3, [sp, #4]
 80a2036:	bd08      	pop	{r3, pc}
 80a2038:	0806019c 	.word	0x0806019c

080a203c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a203c:	b508      	push	{r3, lr}
 80a203e:	4b02      	ldr	r3, [pc, #8]	; (80a2048 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a2040:	681b      	ldr	r3, [r3, #0]
 80a2042:	691b      	ldr	r3, [r3, #16]
 80a2044:	9301      	str	r3, [sp, #4]
 80a2046:	bd08      	pop	{r3, pc}
 80a2048:	0806019c 	.word	0x0806019c

080a204c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a204c:	b508      	push	{r3, lr}
 80a204e:	4b02      	ldr	r3, [pc, #8]	; (80a2058 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2050:	681b      	ldr	r3, [r3, #0]
 80a2052:	695b      	ldr	r3, [r3, #20]
 80a2054:	9301      	str	r3, [sp, #4]
 80a2056:	bd08      	pop	{r3, pc}
 80a2058:	0806019c 	.word	0x0806019c

080a205c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a205c:	b508      	push	{r3, lr}
 80a205e:	4b02      	ldr	r3, [pc, #8]	; (80a2068 <HAL_EEPROM_Init+0xc>)
 80a2060:	681b      	ldr	r3, [r3, #0]
 80a2062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2064:	9301      	str	r3, [sp, #4]
 80a2066:	bd08      	pop	{r3, pc}
 80a2068:	0806019c 	.word	0x0806019c

080a206c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80a206c:	b508      	push	{r3, lr}
 80a206e:	4b02      	ldr	r3, [pc, #8]	; (80a2078 <HAL_EEPROM_Get+0xc>)
 80a2070:	681b      	ldr	r3, [r3, #0]
 80a2072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2074:	9301      	str	r3, [sp, #4]
 80a2076:	bd08      	pop	{r3, pc}
 80a2078:	0806019c 	.word	0x0806019c

080a207c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80a207c:	b508      	push	{r3, lr}
 80a207e:	4b02      	ldr	r3, [pc, #8]	; (80a2088 <HAL_Core_System_Reset_Ex+0xc>)
 80a2080:	681b      	ldr	r3, [r3, #0]
 80a2082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2084:	9301      	str	r3, [sp, #4]
 80a2086:	bd08      	pop	{r3, pc}
 80a2088:	080601b8 	.word	0x080601b8

080a208c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a208c:	b508      	push	{r3, lr}
 80a208e:	4b02      	ldr	r3, [pc, #8]	; (80a2098 <os_mutex_create+0xc>)
 80a2090:	681b      	ldr	r3, [r3, #0]
 80a2092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2094:	9301      	str	r3, [sp, #4]
 80a2096:	bd08      	pop	{r3, pc}
 80a2098:	080601d0 	.word	0x080601d0

080a209c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a209c:	b508      	push	{r3, lr}
 80a209e:	4b02      	ldr	r3, [pc, #8]	; (80a20a8 <HAL_USART_Init+0xc>)
 80a20a0:	681b      	ldr	r3, [r3, #0]
 80a20a2:	699b      	ldr	r3, [r3, #24]
 80a20a4:	9301      	str	r3, [sp, #4]
 80a20a6:	bd08      	pop	{r3, pc}
 80a20a8:	080601c4 	.word	0x080601c4

080a20ac <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a20ac:	b508      	push	{r3, lr}
 80a20ae:	4b02      	ldr	r3, [pc, #8]	; (80a20b8 <HAL_USART_Write_Data+0xc>)
 80a20b0:	681b      	ldr	r3, [r3, #0]
 80a20b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a20b4:	9301      	str	r3, [sp, #4]
 80a20b6:	bd08      	pop	{r3, pc}
 80a20b8:	080601c4 	.word	0x080601c4

080a20bc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a20bc:	b508      	push	{r3, lr}
 80a20be:	4b02      	ldr	r3, [pc, #8]	; (80a20c8 <HAL_USART_Available_Data+0xc>)
 80a20c0:	681b      	ldr	r3, [r3, #0]
 80a20c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a20c4:	9301      	str	r3, [sp, #4]
 80a20c6:	bd08      	pop	{r3, pc}
 80a20c8:	080601c4 	.word	0x080601c4

080a20cc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a20cc:	b508      	push	{r3, lr}
 80a20ce:	4b02      	ldr	r3, [pc, #8]	; (80a20d8 <HAL_USART_Read_Data+0xc>)
 80a20d0:	681b      	ldr	r3, [r3, #0]
 80a20d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a20d4:	9301      	str	r3, [sp, #4]
 80a20d6:	bd08      	pop	{r3, pc}
 80a20d8:	080601c4 	.word	0x080601c4

080a20dc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a20dc:	b508      	push	{r3, lr}
 80a20de:	4b02      	ldr	r3, [pc, #8]	; (80a20e8 <HAL_USART_Peek_Data+0xc>)
 80a20e0:	681b      	ldr	r3, [r3, #0]
 80a20e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a20e4:	9301      	str	r3, [sp, #4]
 80a20e6:	bd08      	pop	{r3, pc}
 80a20e8:	080601c4 	.word	0x080601c4

080a20ec <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a20ec:	b508      	push	{r3, lr}
 80a20ee:	4b02      	ldr	r3, [pc, #8]	; (80a20f8 <HAL_USART_Flush_Data+0xc>)
 80a20f0:	681b      	ldr	r3, [r3, #0]
 80a20f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a20f4:	9301      	str	r3, [sp, #4]
 80a20f6:	bd08      	pop	{r3, pc}
 80a20f8:	080601c4 	.word	0x080601c4

080a20fc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a20fc:	b508      	push	{r3, lr}
 80a20fe:	4b02      	ldr	r3, [pc, #8]	; (80a2108 <HAL_USART_Is_Enabled+0xc>)
 80a2100:	681b      	ldr	r3, [r3, #0]
 80a2102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2104:	9301      	str	r3, [sp, #4]
 80a2106:	bd08      	pop	{r3, pc}
 80a2108:	080601c4 	.word	0x080601c4

080a210c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a210c:	b508      	push	{r3, lr}
 80a210e:	4b02      	ldr	r3, [pc, #8]	; (80a2118 <HAL_USART_Available_Data_For_Write+0xc>)
 80a2110:	681b      	ldr	r3, [r3, #0]
 80a2112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2114:	9301      	str	r3, [sp, #4]
 80a2116:	bd08      	pop	{r3, pc}
 80a2118:	080601c4 	.word	0x080601c4

080a211c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a211c:	b508      	push	{r3, lr}
 80a211e:	4b02      	ldr	r3, [pc, #8]	; (80a2128 <HAL_I2C_Begin+0xc>)
 80a2120:	681b      	ldr	r3, [r3, #0]
 80a2122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2124:	9301      	str	r3, [sp, #4]
 80a2126:	bd08      	pop	{r3, pc}
 80a2128:	080601ac 	.word	0x080601ac

080a212c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a212c:	b508      	push	{r3, lr}
 80a212e:	4b02      	ldr	r3, [pc, #8]	; (80a2138 <HAL_I2C_Request_Data+0xc>)
 80a2130:	681b      	ldr	r3, [r3, #0]
 80a2132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2134:	9301      	str	r3, [sp, #4]
 80a2136:	bd08      	pop	{r3, pc}
 80a2138:	080601ac 	.word	0x080601ac

080a213c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a213c:	b508      	push	{r3, lr}
 80a213e:	4b02      	ldr	r3, [pc, #8]	; (80a2148 <HAL_I2C_Begin_Transmission+0xc>)
 80a2140:	681b      	ldr	r3, [r3, #0]
 80a2142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2144:	9301      	str	r3, [sp, #4]
 80a2146:	bd08      	pop	{r3, pc}
 80a2148:	080601ac 	.word	0x080601ac

080a214c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a214c:	b508      	push	{r3, lr}
 80a214e:	4b02      	ldr	r3, [pc, #8]	; (80a2158 <HAL_I2C_End_Transmission+0xc>)
 80a2150:	681b      	ldr	r3, [r3, #0]
 80a2152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2154:	9301      	str	r3, [sp, #4]
 80a2156:	bd08      	pop	{r3, pc}
 80a2158:	080601ac 	.word	0x080601ac

080a215c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a215c:	b508      	push	{r3, lr}
 80a215e:	4b02      	ldr	r3, [pc, #8]	; (80a2168 <HAL_I2C_Write_Data+0xc>)
 80a2160:	681b      	ldr	r3, [r3, #0]
 80a2162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2164:	9301      	str	r3, [sp, #4]
 80a2166:	bd08      	pop	{r3, pc}
 80a2168:	080601ac 	.word	0x080601ac

080a216c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a216c:	b508      	push	{r3, lr}
 80a216e:	4b02      	ldr	r3, [pc, #8]	; (80a2178 <HAL_I2C_Available_Data+0xc>)
 80a2170:	681b      	ldr	r3, [r3, #0]
 80a2172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2174:	9301      	str	r3, [sp, #4]
 80a2176:	bd08      	pop	{r3, pc}
 80a2178:	080601ac 	.word	0x080601ac

080a217c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a217c:	b508      	push	{r3, lr}
 80a217e:	4b02      	ldr	r3, [pc, #8]	; (80a2188 <HAL_I2C_Read_Data+0xc>)
 80a2180:	681b      	ldr	r3, [r3, #0]
 80a2182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2184:	9301      	str	r3, [sp, #4]
 80a2186:	bd08      	pop	{r3, pc}
 80a2188:	080601ac 	.word	0x080601ac

080a218c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a218c:	b508      	push	{r3, lr}
 80a218e:	4b02      	ldr	r3, [pc, #8]	; (80a2198 <HAL_I2C_Peek_Data+0xc>)
 80a2190:	681b      	ldr	r3, [r3, #0]
 80a2192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2194:	9301      	str	r3, [sp, #4]
 80a2196:	bd08      	pop	{r3, pc}
 80a2198:	080601ac 	.word	0x080601ac

080a219c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a219c:	b508      	push	{r3, lr}
 80a219e:	4b02      	ldr	r3, [pc, #8]	; (80a21a8 <HAL_I2C_Flush_Data+0xc>)
 80a21a0:	681b      	ldr	r3, [r3, #0]
 80a21a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a21a4:	9301      	str	r3, [sp, #4]
 80a21a6:	bd08      	pop	{r3, pc}
 80a21a8:	080601ac 	.word	0x080601ac

080a21ac <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a21ac:	b508      	push	{r3, lr}
 80a21ae:	4b02      	ldr	r3, [pc, #8]	; (80a21b8 <HAL_I2C_Is_Enabled+0xc>)
 80a21b0:	681b      	ldr	r3, [r3, #0]
 80a21b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a21b4:	9301      	str	r3, [sp, #4]
 80a21b6:	bd08      	pop	{r3, pc}
 80a21b8:	080601ac 	.word	0x080601ac

080a21bc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a21bc:	b508      	push	{r3, lr}
 80a21be:	4b03      	ldr	r3, [pc, #12]	; (80a21cc <HAL_I2C_Init+0x10>)
 80a21c0:	681b      	ldr	r3, [r3, #0]
 80a21c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a21c6:	9301      	str	r3, [sp, #4]
 80a21c8:	bd08      	pop	{r3, pc}
 80a21ca:	0000      	.short	0x0000
 80a21cc:	080601ac 	.word	0x080601ac

080a21d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a21d0:	b508      	push	{r3, lr}
 80a21d2:	4b02      	ldr	r3, [pc, #8]	; (80a21dc <HAL_USB_USART_Init+0xc>)
 80a21d4:	681b      	ldr	r3, [r3, #0]
 80a21d6:	681b      	ldr	r3, [r3, #0]
 80a21d8:	9301      	str	r3, [sp, #4]
 80a21da:	bd08      	pop	{r3, pc}
 80a21dc:	080601d8 	.word	0x080601d8

080a21e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a21e0:	b508      	push	{r3, lr}
 80a21e2:	4b02      	ldr	r3, [pc, #8]	; (80a21ec <HAL_USB_USART_Begin+0xc>)
 80a21e4:	681b      	ldr	r3, [r3, #0]
 80a21e6:	685b      	ldr	r3, [r3, #4]
 80a21e8:	9301      	str	r3, [sp, #4]
 80a21ea:	bd08      	pop	{r3, pc}
 80a21ec:	080601d8 	.word	0x080601d8

080a21f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a21f0:	b508      	push	{r3, lr}
 80a21f2:	4b02      	ldr	r3, [pc, #8]	; (80a21fc <HAL_USB_USART_Available_Data+0xc>)
 80a21f4:	681b      	ldr	r3, [r3, #0]
 80a21f6:	691b      	ldr	r3, [r3, #16]
 80a21f8:	9301      	str	r3, [sp, #4]
 80a21fa:	bd08      	pop	{r3, pc}
 80a21fc:	080601d8 	.word	0x080601d8

080a2200 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2200:	b508      	push	{r3, lr}
 80a2202:	4b02      	ldr	r3, [pc, #8]	; (80a220c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2204:	681b      	ldr	r3, [r3, #0]
 80a2206:	695b      	ldr	r3, [r3, #20]
 80a2208:	9301      	str	r3, [sp, #4]
 80a220a:	bd08      	pop	{r3, pc}
 80a220c:	080601d8 	.word	0x080601d8

080a2210 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2210:	b508      	push	{r3, lr}
 80a2212:	4b02      	ldr	r3, [pc, #8]	; (80a221c <HAL_USB_USART_Receive_Data+0xc>)
 80a2214:	681b      	ldr	r3, [r3, #0]
 80a2216:	699b      	ldr	r3, [r3, #24]
 80a2218:	9301      	str	r3, [sp, #4]
 80a221a:	bd08      	pop	{r3, pc}
 80a221c:	080601d8 	.word	0x080601d8

080a2220 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2220:	b508      	push	{r3, lr}
 80a2222:	4b02      	ldr	r3, [pc, #8]	; (80a222c <HAL_USB_USART_Send_Data+0xc>)
 80a2224:	681b      	ldr	r3, [r3, #0]
 80a2226:	69db      	ldr	r3, [r3, #28]
 80a2228:	9301      	str	r3, [sp, #4]
 80a222a:	bd08      	pop	{r3, pc}
 80a222c:	080601d8 	.word	0x080601d8

080a2230 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2230:	b508      	push	{r3, lr}
 80a2232:	4b02      	ldr	r3, [pc, #8]	; (80a223c <HAL_USB_USART_Flush_Data+0xc>)
 80a2234:	681b      	ldr	r3, [r3, #0]
 80a2236:	6a1b      	ldr	r3, [r3, #32]
 80a2238:	9301      	str	r3, [sp, #4]
 80a223a:	bd08      	pop	{r3, pc}
 80a223c:	080601d8 	.word	0x080601d8

080a2240 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2240:	b508      	push	{r3, lr}
 80a2242:	4b02      	ldr	r3, [pc, #8]	; (80a224c <inet_gethostbyname+0xc>)
 80a2244:	681b      	ldr	r3, [r3, #0]
 80a2246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2248:	9301      	str	r3, [sp, #4]
 80a224a:	bd08      	pop	{r3, pc}
 80a224c:	080601c0 	.word	0x080601c0

080a2250 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2250:	b508      	push	{r3, lr}
 80a2252:	4b02      	ldr	r3, [pc, #8]	; (80a225c <set_system_mode+0xc>)
 80a2254:	681b      	ldr	r3, [r3, #0]
 80a2256:	685b      	ldr	r3, [r3, #4]
 80a2258:	9301      	str	r3, [sp, #4]
 80a225a:	bd08      	pop	{r3, pc}
 80a225c:	080601a4 	.word	0x080601a4

080a2260 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2260:	b508      	push	{r3, lr}
 80a2262:	4b02      	ldr	r3, [pc, #8]	; (80a226c <system_delay_ms+0xc>)
 80a2264:	681b      	ldr	r3, [r3, #0]
 80a2266:	695b      	ldr	r3, [r3, #20]
 80a2268:	9301      	str	r3, [sp, #4]
 80a226a:	bd08      	pop	{r3, pc}
 80a226c:	080601a4 	.word	0x080601a4

080a2270 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a2270:	b508      	push	{r3, lr}
 80a2272:	4b02      	ldr	r3, [pc, #8]	; (80a227c <application_thread_current+0xc>)
 80a2274:	681b      	ldr	r3, [r3, #0]
 80a2276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2278:	9301      	str	r3, [sp, #4]
 80a227a:	bd08      	pop	{r3, pc}
 80a227c:	080601a4 	.word	0x080601a4

080a2280 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a2280:	b508      	push	{r3, lr}
 80a2282:	4b02      	ldr	r3, [pc, #8]	; (80a228c <application_thread_invoke+0xc>)
 80a2284:	681b      	ldr	r3, [r3, #0]
 80a2286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2288:	9301      	str	r3, [sp, #4]
 80a228a:	bd08      	pop	{r3, pc}
 80a228c:	080601a4 	.word	0x080601a4

080a2290 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2290:	b508      	push	{r3, lr}
 80a2292:	4b03      	ldr	r3, [pc, #12]	; (80a22a0 <system_ctrl_set_app_request_handler+0x10>)
 80a2294:	681b      	ldr	r3, [r3, #0]
 80a2296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a229a:	9301      	str	r3, [sp, #4]
 80a229c:	bd08      	pop	{r3, pc}
 80a229e:	0000      	.short	0x0000
 80a22a0:	080601a4 	.word	0x080601a4

080a22a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a22a4:	b508      	push	{r3, lr}
 80a22a6:	4b03      	ldr	r3, [pc, #12]	; (80a22b4 <system_ctrl_set_result+0x10>)
 80a22a8:	681b      	ldr	r3, [r3, #0]
 80a22aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a22ae:	9301      	str	r3, [sp, #4]
 80a22b0:	bd08      	pop	{r3, pc}
 80a22b2:	0000      	.short	0x0000
 80a22b4:	080601a4 	.word	0x080601a4

080a22b8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a22b8:	b508      	push	{r3, lr}
 80a22ba:	4b02      	ldr	r3, [pc, #8]	; (80a22c4 <network_connect+0xc>)
 80a22bc:	681b      	ldr	r3, [r3, #0]
 80a22be:	685b      	ldr	r3, [r3, #4]
 80a22c0:	9301      	str	r3, [sp, #4]
 80a22c2:	bd08      	pop	{r3, pc}
 80a22c4:	080601c8 	.word	0x080601c8

080a22c8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a22c8:	b508      	push	{r3, lr}
 80a22ca:	4b02      	ldr	r3, [pc, #8]	; (80a22d4 <network_connecting+0xc>)
 80a22cc:	681b      	ldr	r3, [r3, #0]
 80a22ce:	689b      	ldr	r3, [r3, #8]
 80a22d0:	9301      	str	r3, [sp, #4]
 80a22d2:	bd08      	pop	{r3, pc}
 80a22d4:	080601c8 	.word	0x080601c8

080a22d8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a22d8:	b508      	push	{r3, lr}
 80a22da:	4b02      	ldr	r3, [pc, #8]	; (80a22e4 <network_disconnect+0xc>)
 80a22dc:	681b      	ldr	r3, [r3, #0]
 80a22de:	68db      	ldr	r3, [r3, #12]
 80a22e0:	9301      	str	r3, [sp, #4]
 80a22e2:	bd08      	pop	{r3, pc}
 80a22e4:	080601c8 	.word	0x080601c8

080a22e8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a22e8:	b508      	push	{r3, lr}
 80a22ea:	4b02      	ldr	r3, [pc, #8]	; (80a22f4 <network_ready+0xc>)
 80a22ec:	681b      	ldr	r3, [r3, #0]
 80a22ee:	691b      	ldr	r3, [r3, #16]
 80a22f0:	9301      	str	r3, [sp, #4]
 80a22f2:	bd08      	pop	{r3, pc}
 80a22f4:	080601c8 	.word	0x080601c8

080a22f8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a22f8:	b508      	push	{r3, lr}
 80a22fa:	4b02      	ldr	r3, [pc, #8]	; (80a2304 <network_on+0xc>)
 80a22fc:	681b      	ldr	r3, [r3, #0]
 80a22fe:	695b      	ldr	r3, [r3, #20]
 80a2300:	9301      	str	r3, [sp, #4]
 80a2302:	bd08      	pop	{r3, pc}
 80a2304:	080601c8 	.word	0x080601c8

080a2308 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2308:	b508      	push	{r3, lr}
 80a230a:	4b02      	ldr	r3, [pc, #8]	; (80a2314 <network_off+0xc>)
 80a230c:	681b      	ldr	r3, [r3, #0]
 80a230e:	699b      	ldr	r3, [r3, #24]
 80a2310:	9301      	str	r3, [sp, #4]
 80a2312:	bd08      	pop	{r3, pc}
 80a2314:	080601c8 	.word	0x080601c8

080a2318 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2318:	b508      	push	{r3, lr}
 80a231a:	4b02      	ldr	r3, [pc, #8]	; (80a2324 <network_listen+0xc>)
 80a231c:	681b      	ldr	r3, [r3, #0]
 80a231e:	69db      	ldr	r3, [r3, #28]
 80a2320:	9301      	str	r3, [sp, #4]
 80a2322:	bd08      	pop	{r3, pc}
 80a2324:	080601c8 	.word	0x080601c8

080a2328 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a2328:	b508      	push	{r3, lr}
 80a232a:	4b02      	ldr	r3, [pc, #8]	; (80a2334 <network_listening+0xc>)
 80a232c:	681b      	ldr	r3, [r3, #0]
 80a232e:	6a1b      	ldr	r3, [r3, #32]
 80a2330:	9301      	str	r3, [sp, #4]
 80a2332:	bd08      	pop	{r3, pc}
 80a2334:	080601c8 	.word	0x080601c8

080a2338 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2338:	b508      	push	{r3, lr}
 80a233a:	4b02      	ldr	r3, [pc, #8]	; (80a2344 <network_set_listen_timeout+0xc>)
 80a233c:	681b      	ldr	r3, [r3, #0]
 80a233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2340:	9301      	str	r3, [sp, #4]
 80a2342:	bd08      	pop	{r3, pc}
 80a2344:	080601c8 	.word	0x080601c8

080a2348 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a2348:	b508      	push	{r3, lr}
 80a234a:	4b02      	ldr	r3, [pc, #8]	; (80a2354 <network_get_listen_timeout+0xc>)
 80a234c:	681b      	ldr	r3, [r3, #0]
 80a234e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2350:	9301      	str	r3, [sp, #4]
 80a2352:	bd08      	pop	{r3, pc}
 80a2354:	080601c8 	.word	0x080601c8

080a2358 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a2358:	b508      	push	{r3, lr}
 80a235a:	4b02      	ldr	r3, [pc, #8]	; (80a2364 <spark_cloud_flag_connected+0xc>)
 80a235c:	681b      	ldr	r3, [r3, #0]
 80a235e:	695b      	ldr	r3, [r3, #20]
 80a2360:	9301      	str	r3, [sp, #4]
 80a2362:	bd08      	pop	{r3, pc}
 80a2364:	080601cc 	.word	0x080601cc

080a2368 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a2368:	b508      	push	{r3, lr}
 80a236a:	4b02      	ldr	r3, [pc, #8]	; (80a2374 <spark_send_event+0xc>)
 80a236c:	681b      	ldr	r3, [r3, #0]
 80a236e:	6a1b      	ldr	r3, [r3, #32]
 80a2370:	9301      	str	r3, [sp, #4]
 80a2372:	bd08      	pop	{r3, pc}
 80a2374:	080601cc 	.word	0x080601cc

080a2378 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a2378:	b508      	push	{r3, lr}
 80a237a:	4b02      	ldr	r3, [pc, #8]	; (80a2384 <spark_subscribe+0xc>)
 80a237c:	681b      	ldr	r3, [r3, #0]
 80a237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2380:	9301      	str	r3, [sp, #4]
 80a2382:	bd08      	pop	{r3, pc}
 80a2384:	080601cc 	.word	0x080601cc

080a2388 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2388:	b508      	push	{r3, lr}
 80a238a:	4b02      	ldr	r3, [pc, #8]	; (80a2394 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a238c:	681b      	ldr	r3, [r3, #0]
 80a238e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2390:	9301      	str	r3, [sp, #4]
 80a2392:	bd08      	pop	{r3, pc}
 80a2394:	080601cc 	.word	0x080601cc

080a2398 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2398:	b508      	push	{r3, lr}
 80a239a:	4b02      	ldr	r3, [pc, #8]	; (80a23a4 <malloc+0xc>)
 80a239c:	681b      	ldr	r3, [r3, #0]
 80a239e:	681b      	ldr	r3, [r3, #0]
 80a23a0:	9301      	str	r3, [sp, #4]
 80a23a2:	bd08      	pop	{r3, pc}
 80a23a4:	080601a0 	.word	0x080601a0

080a23a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a23a8:	b508      	push	{r3, lr}
 80a23aa:	4b02      	ldr	r3, [pc, #8]	; (80a23b4 <free+0xc>)
 80a23ac:	681b      	ldr	r3, [r3, #0]
 80a23ae:	685b      	ldr	r3, [r3, #4]
 80a23b0:	9301      	str	r3, [sp, #4]
 80a23b2:	bd08      	pop	{r3, pc}
 80a23b4:	080601a0 	.word	0x080601a0

080a23b8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a23b8:	b508      	push	{r3, lr}
 80a23ba:	4b02      	ldr	r3, [pc, #8]	; (80a23c4 <realloc+0xc>)
 80a23bc:	681b      	ldr	r3, [r3, #0]
 80a23be:	689b      	ldr	r3, [r3, #8]
 80a23c0:	9301      	str	r3, [sp, #4]
 80a23c2:	bd08      	pop	{r3, pc}
 80a23c4:	080601a0 	.word	0x080601a0

080a23c8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a23c8:	b508      	push	{r3, lr}
 80a23ca:	4b02      	ldr	r3, [pc, #8]	; (80a23d4 <abort+0xc>)
 80a23cc:	681b      	ldr	r3, [r3, #0]
 80a23ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a23d0:	9301      	str	r3, [sp, #4]
 80a23d2:	bd08      	pop	{r3, pc}
 80a23d4:	080601a0 	.word	0x080601a0

080a23d8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a23d8:	b508      	push	{r3, lr}
 80a23da:	4b02      	ldr	r3, [pc, #8]	; (80a23e4 <_malloc_r+0xc>)
 80a23dc:	681b      	ldr	r3, [r3, #0]
 80a23de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a23e0:	9301      	str	r3, [sp, #4]
 80a23e2:	bd08      	pop	{r3, pc}
 80a23e4:	080601a0 	.word	0x080601a0

080a23e8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a23e8:	b508      	push	{r3, lr}
 80a23ea:	4b02      	ldr	r3, [pc, #8]	; (80a23f4 <__errno+0xc>)
 80a23ec:	681b      	ldr	r3, [r3, #0]
 80a23ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a23f0:	9301      	str	r3, [sp, #4]
 80a23f2:	bd08      	pop	{r3, pc}
 80a23f4:	080601a0 	.word	0x080601a0

080a23f8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a23f8:	4770      	bx	lr

080a23fa <_ZN8SPIClassD0Ev>:
 80a23fa:	b510      	push	{r4, lr}
 80a23fc:	4604      	mov	r4, r0
 80a23fe:	2110      	movs	r1, #16
 80a2400:	f001 f8ff 	bl	80a3602 <_ZdlPvj>
 80a2404:	4620      	mov	r0, r4
 80a2406:	bd10      	pop	{r4, pc}

080a2408 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2408:	b570      	push	{r4, r5, r6, lr}
 80a240a:	4604      	mov	r4, r0
 80a240c:	460e      	mov	r6, r1
 80a240e:	4b07      	ldr	r3, [pc, #28]	; (80a242c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a2410:	2500      	movs	r5, #0
 80a2412:	6003      	str	r3, [r0, #0]
 80a2414:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a2418:	f7ff fe38 	bl	80a208c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a241c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a241e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2420:	f7ff fdf4 	bl	80a200c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a2424:	60a5      	str	r5, [r4, #8]
}
 80a2426:	4620      	mov	r0, r4
 80a2428:	bd70      	pop	{r4, r5, r6, pc}
 80a242a:	bf00      	nop
 80a242c:	080a63c8 	.word	0x080a63c8

080a2430 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a2430:	7900      	ldrb	r0, [r0, #4]
 80a2432:	f7ff bdf3 	b.w	80a201c <HAL_SPI_Is_Enabled>

080a2436 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80a2436:	4601      	mov	r1, r0
 80a2438:	2200      	movs	r2, #0
 80a243a:	208c      	movs	r0, #140	; 0x8c
 80a243c:	f7ff be1e 	b.w	80a207c <HAL_Core_System_Reset_Ex>

080a2440 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80a2440:	2000      	movs	r0, #0
 80a2442:	f7ff bff8 	b.w	80a2436 <_ZN11SystemClass5resetEm>
	...

080a2448 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a244c:	4b03      	ldr	r3, [pc, #12]	; (80a245c <_GLOBAL__sub_I_System+0x14>)
 80a244e:	2000      	movs	r0, #0
 80a2450:	7018      	strb	r0, [r3, #0]
 80a2452:	8058      	strh	r0, [r3, #2]
 80a2454:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2456:	f7ff befb 	b.w	80a2250 <set_system_mode>
 80a245a:	bf00      	nop
 80a245c:	200007a8 	.word	0x200007a8

080a2460 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2460:	b510      	push	{r4, lr}
 80a2462:	4604      	mov	r4, r0
{
	free(buffer);
 80a2464:	6800      	ldr	r0, [r0, #0]
 80a2466:	f7ff ff9f 	bl	80a23a8 <free>
}
 80a246a:	4620      	mov	r0, r4
 80a246c:	bd10      	pop	{r4, pc}

080a246e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a246e:	b510      	push	{r4, lr}
 80a2470:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2472:	6800      	ldr	r0, [r0, #0]
 80a2474:	b108      	cbz	r0, 80a247a <_ZN6String10invalidateEv+0xc>
 80a2476:	f7ff ff97 	bl	80a23a8 <free>
	buffer = NULL;
 80a247a:	2300      	movs	r3, #0
 80a247c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a247e:	60a3      	str	r3, [r4, #8]
 80a2480:	6063      	str	r3, [r4, #4]
 80a2482:	bd10      	pop	{r4, pc}

080a2484 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2484:	b538      	push	{r3, r4, r5, lr}
 80a2486:	4604      	mov	r4, r0
 80a2488:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a248a:	6800      	ldr	r0, [r0, #0]
 80a248c:	3101      	adds	r1, #1
 80a248e:	f7ff ff93 	bl	80a23b8 <realloc>
	if (newbuffer) {
 80a2492:	b110      	cbz	r0, 80a249a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2494:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a2498:	2001      	movs	r0, #1
	}
	return 0;
}
 80a249a:	bd38      	pop	{r3, r4, r5, pc}

080a249c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a249c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a249e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a24a0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a24a2:	b113      	cbz	r3, 80a24aa <_ZN6String7reserveEj+0xe>
 80a24a4:	6843      	ldr	r3, [r0, #4]
 80a24a6:	428b      	cmp	r3, r1
 80a24a8:	d207      	bcs.n	80a24ba <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a24aa:	4620      	mov	r0, r4
 80a24ac:	f7ff ffea 	bl	80a2484 <_ZN6String12changeBufferEj>
 80a24b0:	b120      	cbz	r0, 80a24bc <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a24b2:	68a3      	ldr	r3, [r4, #8]
 80a24b4:	b90b      	cbnz	r3, 80a24ba <_ZN6String7reserveEj+0x1e>
 80a24b6:	6822      	ldr	r2, [r4, #0]
 80a24b8:	7013      	strb	r3, [r2, #0]
 80a24ba:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a24bc:	bd10      	pop	{r4, pc}

080a24be <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a24be:	b570      	push	{r4, r5, r6, lr}
 80a24c0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a24c2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a24c4:	4604      	mov	r4, r0
 80a24c6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a24c8:	f7ff ffe8 	bl	80a249c <_ZN6String7reserveEj>
 80a24cc:	b918      	cbnz	r0, 80a24d6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a24ce:	4620      	mov	r0, r4
 80a24d0:	f7ff ffcd 	bl	80a246e <_ZN6String10invalidateEv>
		return *this;
 80a24d4:	e009      	b.n	80a24ea <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a24d6:	462a      	mov	r2, r5
 80a24d8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a24da:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a24dc:	6820      	ldr	r0, [r4, #0]
 80a24de:	f003 fd3b 	bl	80a5f58 <memcpy>
	buffer[len] = 0;
 80a24e2:	6822      	ldr	r2, [r4, #0]
 80a24e4:	68a3      	ldr	r3, [r4, #8]
 80a24e6:	2100      	movs	r1, #0
 80a24e8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a24ea:	4620      	mov	r0, r4
 80a24ec:	bd70      	pop	{r4, r5, r6, pc}

080a24ee <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a24ee:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a24f0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a24f2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a24f4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a24f6:	6043      	str	r3, [r0, #4]
	len = 0;
 80a24f8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a24fa:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a24fc:	460d      	mov	r5, r1
 80a24fe:	b139      	cbz	r1, 80a2510 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a2500:	4608      	mov	r0, r1
 80a2502:	f003 fd92 	bl	80a602a <strlen>
 80a2506:	4629      	mov	r1, r5
 80a2508:	4602      	mov	r2, r0
 80a250a:	4620      	mov	r0, r4
 80a250c:	f7ff ffd7 	bl	80a24be <_ZN6String4copyEPKcj>
}
 80a2510:	4620      	mov	r0, r4
 80a2512:	bd38      	pop	{r3, r4, r5, pc}

080a2514 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a2514:	b538      	push	{r3, r4, r5, lr}
 80a2516:	4605      	mov	r5, r0
	if (buffer) {
 80a2518:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a251a:	460c      	mov	r4, r1
	if (buffer) {
 80a251c:	b160      	cbz	r0, 80a2538 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 80a251e:	686a      	ldr	r2, [r5, #4]
 80a2520:	688b      	ldr	r3, [r1, #8]
 80a2522:	429a      	cmp	r2, r3
 80a2524:	d306      	bcc.n	80a2534 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 80a2526:	6809      	ldr	r1, [r1, #0]
 80a2528:	f003 fd5c 	bl	80a5fe4 <strcpy>
			len = rhs.len;
 80a252c:	68a3      	ldr	r3, [r4, #8]
 80a252e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a2530:	2300      	movs	r3, #0
 80a2532:	e00a      	b.n	80a254a <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 80a2534:	f7ff ff38 	bl	80a23a8 <free>
		}
	}
	buffer = rhs.buffer;
 80a2538:	6823      	ldr	r3, [r4, #0]
 80a253a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a253c:	6863      	ldr	r3, [r4, #4]
 80a253e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a2540:	68a3      	ldr	r3, [r4, #8]
 80a2542:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a2544:	2300      	movs	r3, #0
 80a2546:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 80a2548:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 80a254a:	60a3      	str	r3, [r4, #8]
 80a254c:	bd38      	pop	{r3, r4, r5, pc}

080a254e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a254e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a2550:	b510      	push	{r4, lr}
 80a2552:	460b      	mov	r3, r1
 80a2554:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a2556:	d007      	beq.n	80a2568 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a2558:	6809      	ldr	r1, [r1, #0]
 80a255a:	b119      	cbz	r1, 80a2564 <_ZN6StringaSERKS_+0x16>
 80a255c:	689a      	ldr	r2, [r3, #8]
 80a255e:	f7ff ffae 	bl	80a24be <_ZN6String4copyEPKcj>
 80a2562:	e001      	b.n	80a2568 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a2564:	f7ff ff83 	bl	80a246e <_ZN6String10invalidateEv>

	return *this;
}
 80a2568:	4620      	mov	r0, r4
 80a256a:	bd10      	pop	{r4, pc}

080a256c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a256c:	b510      	push	{r4, lr}
 80a256e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2570:	2300      	movs	r3, #0
 80a2572:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2574:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2576:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2578:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a257a:	f7ff ffe8 	bl	80a254e <_ZN6StringaSERKS_>
}
 80a257e:	4620      	mov	r0, r4
 80a2580:	bd10      	pop	{r4, pc}

080a2582 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a2582:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80a2584:	b510      	push	{r4, lr}
 80a2586:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a2588:	d001      	beq.n	80a258e <_ZN6StringaSEOS_+0xc>
 80a258a:	f7ff ffc3 	bl	80a2514 <_ZN6String4moveERS_>
	return *this;
}
 80a258e:	4620      	mov	r0, r4
 80a2590:	bd10      	pop	{r4, pc}

080a2592 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2592:	b538      	push	{r3, r4, r5, lr}
 80a2594:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2596:	460c      	mov	r4, r1
 80a2598:	b141      	cbz	r1, 80a25ac <_ZN6StringaSEPKc+0x1a>
 80a259a:	4608      	mov	r0, r1
 80a259c:	f003 fd45 	bl	80a602a <strlen>
 80a25a0:	4621      	mov	r1, r4
 80a25a2:	4602      	mov	r2, r0
 80a25a4:	4628      	mov	r0, r5
 80a25a6:	f7ff ff8a 	bl	80a24be <_ZN6String4copyEPKcj>
 80a25aa:	e001      	b.n	80a25b0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a25ac:	f7ff ff5f 	bl	80a246e <_ZN6String10invalidateEv>

	return *this;
}
 80a25b0:	4628      	mov	r0, r5
 80a25b2:	bd38      	pop	{r3, r4, r5, pc}

080a25b4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a25b4:	b570      	push	{r4, r5, r6, lr}
 80a25b6:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a25b8:	460e      	mov	r6, r1
 80a25ba:	b909      	cbnz	r1, 80a25c0 <_ZN6String6concatEPKcj+0xc>
 80a25bc:	2000      	movs	r0, #0
 80a25be:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a25c0:	b16a      	cbz	r2, 80a25de <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a25c2:	6883      	ldr	r3, [r0, #8]
 80a25c4:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a25c6:	4629      	mov	r1, r5
 80a25c8:	f7ff ff68 	bl	80a249c <_ZN6String7reserveEj>
 80a25cc:	2800      	cmp	r0, #0
 80a25ce:	d0f5      	beq.n	80a25bc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a25d0:	6820      	ldr	r0, [r4, #0]
 80a25d2:	68a3      	ldr	r3, [r4, #8]
 80a25d4:	4631      	mov	r1, r6
 80a25d6:	4418      	add	r0, r3
 80a25d8:	f003 fd04 	bl	80a5fe4 <strcpy>
	len = newlen;
 80a25dc:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a25de:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a25e0:	bd70      	pop	{r4, r5, r6, pc}

080a25e2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a25e2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a25e4:	688a      	ldr	r2, [r1, #8]
 80a25e6:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a25e8:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a25ea:	f7ff ffe3 	bl	80a25b4 <_ZN6String6concatEPKcj>
 80a25ee:	b910      	cbnz	r0, 80a25f6 <_ZplRK15StringSumHelperRK6String+0x14>
 80a25f0:	4620      	mov	r0, r4
 80a25f2:	f7ff ff3c 	bl	80a246e <_ZN6String10invalidateEv>
	return a;
}
 80a25f6:	4620      	mov	r0, r4
 80a25f8:	bd10      	pop	{r4, pc}

080a25fa <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a25fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a25fc:	4606      	mov	r6, r0
 80a25fe:	460d      	mov	r5, r1
 80a2600:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2602:	2400      	movs	r4, #0
  while (size--) {
 80a2604:	42bd      	cmp	r5, r7
 80a2606:	d00c      	beq.n	80a2622 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2608:	6833      	ldr	r3, [r6, #0]
 80a260a:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a260e:	689b      	ldr	r3, [r3, #8]
 80a2610:	4630      	mov	r0, r6
 80a2612:	4798      	blx	r3
     if (chunk>=0)
 80a2614:	2800      	cmp	r0, #0
 80a2616:	db01      	blt.n	80a261c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2618:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a261a:	e7f3      	b.n	80a2604 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a261c:	2c00      	cmp	r4, #0
 80a261e:	bf08      	it	eq
 80a2620:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2622:	4620      	mov	r0, r4
 80a2624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2626 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2626:	b570      	push	{r4, r5, r6, lr}
 80a2628:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a262a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a262c:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a262e:	b149      	cbz	r1, 80a2644 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2630:	f003 fcfb 	bl	80a602a <strlen>
 80a2634:	682b      	ldr	r3, [r5, #0]
 80a2636:	4602      	mov	r2, r0
 80a2638:	4621      	mov	r1, r4
 80a263a:	4628      	mov	r0, r5
    }
 80a263c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2640:	68db      	ldr	r3, [r3, #12]
 80a2642:	4718      	bx	r3
    }
 80a2644:	bd70      	pop	{r4, r5, r6, pc}

080a2646 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2646:	6803      	ldr	r3, [r0, #0]
 80a2648:	689b      	ldr	r3, [r3, #8]
 80a264a:	4718      	bx	r3

080a264c <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a264c:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a264e:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2650:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2652:	f7ff fff8 	bl	80a2646 <_ZN5Print5printEc>
  n += print('\n');
 80a2656:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a2658:	4604      	mov	r4, r0
  n += print('\n');
 80a265a:	4628      	mov	r0, r5
 80a265c:	f7ff fff3 	bl	80a2646 <_ZN5Print5printEc>
  return n;
}
 80a2660:	4420      	add	r0, r4
 80a2662:	bd38      	pop	{r3, r4, r5, pc}

080a2664 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2664:	b538      	push	{r3, r4, r5, lr}
 80a2666:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2668:	f7ff ffdd 	bl	80a2626 <_ZN5Print5writeEPKc>
 80a266c:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a266e:	4628      	mov	r0, r5
 80a2670:	f7ff ffec 	bl	80a264c <_ZN5Print7printlnEv>
  return n;
}
 80a2674:	4420      	add	r0, r4
 80a2676:	bd38      	pop	{r3, r4, r5, pc}

080a2678 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2678:	2a01      	cmp	r2, #1
 80a267a:	bf98      	it	ls
 80a267c:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a267e:	b530      	push	{r4, r5, lr}
 80a2680:	460b      	mov	r3, r1
 80a2682:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2684:	2100      	movs	r1, #0
 80a2686:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a268a:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a268e:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a2692:	fb05 3312 	mls	r3, r5, r2, r3
 80a2696:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2698:	2b09      	cmp	r3, #9
 80a269a:	bf94      	ite	ls
 80a269c:	3330      	addls	r3, #48	; 0x30
 80a269e:	3337      	addhi	r3, #55	; 0x37
 80a26a0:	b2db      	uxtb	r3, r3
 80a26a2:	4621      	mov	r1, r4
 80a26a4:	f804 3901 	strb.w	r3, [r4], #-1
 80a26a8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a26aa:	2d00      	cmp	r5, #0
 80a26ac:	d1ef      	bne.n	80a268e <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a26ae:	f7ff ffba 	bl	80a2626 <_ZN5Print5writeEPKc>
}
 80a26b2:	b00b      	add	sp, #44	; 0x2c
 80a26b4:	bd30      	pop	{r4, r5, pc}

080a26b6 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a26b6:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a26b8:	b922      	cbnz	r2, 80a26c4 <_ZN5Print5printEmi+0xe>
 80a26ba:	6803      	ldr	r3, [r0, #0]
 80a26bc:	b2c9      	uxtb	r1, r1
 80a26be:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a26c0:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a26c2:	4718      	bx	r3
  else return printNumber(n, base);
 80a26c4:	b2d2      	uxtb	r2, r2
}
 80a26c6:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a26c8:	f7ff bfd6 	b.w	80a2678 <_ZN5Print11printNumberEmh>

080a26cc <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a26cc:	f7ff bff3 	b.w	80a26b6 <_ZN5Print5printEmi>

080a26d0 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a26d0:	2300      	movs	r3, #0
 80a26d2:	461a      	mov	r2, r3
 80a26d4:	4619      	mov	r1, r3
 80a26d6:	6840      	ldr	r0, [r0, #4]
 80a26d8:	f7ff be0e 	b.w	80a22f8 <network_on>

080a26dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a26dc:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a26de:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a26e0:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a26e2:	b17c      	cbz	r4, 80a2704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a26e4:	6863      	ldr	r3, [r4, #4]
 80a26e6:	3b01      	subs	r3, #1
 80a26e8:	6063      	str	r3, [r4, #4]
 80a26ea:	b95b      	cbnz	r3, 80a2704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a26ec:	6823      	ldr	r3, [r4, #0]
 80a26ee:	4620      	mov	r0, r4
 80a26f0:	689b      	ldr	r3, [r3, #8]
 80a26f2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a26f4:	68a3      	ldr	r3, [r4, #8]
 80a26f6:	3b01      	subs	r3, #1
 80a26f8:	60a3      	str	r3, [r4, #8]
 80a26fa:	b91b      	cbnz	r3, 80a2704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a26fc:	6823      	ldr	r3, [r4, #0]
 80a26fe:	4620      	mov	r0, r4
 80a2700:	68db      	ldr	r3, [r3, #12]
 80a2702:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a2704:	4628      	mov	r0, r5
 80a2706:	bd38      	pop	{r3, r4, r5, pc}

080a2708 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a2708:	680b      	ldr	r3, [r1, #0]
 80a270a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a270c:	b113      	cbz	r3, 80a2714 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a270e:	685a      	ldr	r2, [r3, #4]
 80a2710:	3201      	adds	r2, #1
 80a2712:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a2714:	4770      	bx	lr
	...

080a2718 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2718:	4a01      	ldr	r2, [pc, #4]	; (80a2720 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a271a:	4b02      	ldr	r3, [pc, #8]	; (80a2724 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a271c:	601a      	str	r2, [r3, #0]
 80a271e:	4770      	bx	lr
 80a2720:	080a6446 	.word	0x080a6446
 80a2724:	200007b0 	.word	0x200007b0

080a2728 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2728:	4b02      	ldr	r3, [pc, #8]	; (80a2734 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a272a:	681a      	ldr	r2, [r3, #0]
 80a272c:	4b02      	ldr	r3, [pc, #8]	; (80a2738 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a272e:	601a      	str	r2, [r3, #0]
 80a2730:	4770      	bx	lr
 80a2732:	bf00      	nop
 80a2734:	20000000 	.word	0x20000000
 80a2738:	200007b4 	.word	0x200007b4

080a273c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a273c:	2100      	movs	r1, #0
 80a273e:	f7ff bd8f 	b.w	80a2260 <system_delay_ms>

080a2742 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2742:	b510      	push	{r4, lr}
 80a2744:	4604      	mov	r4, r0
 80a2746:	f7fd fea7 	bl	80a0498 <_ZNSt14_Function_baseD1Ev>
 80a274a:	4620      	mov	r0, r4
 80a274c:	bd10      	pop	{r4, pc}

080a274e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a274e:	b513      	push	{r0, r1, r4, lr}
 80a2750:	460b      	mov	r3, r1
 80a2752:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2754:	c803      	ldmia	r0, {r0, r1}
 80a2756:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a275a:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a275e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a2762:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a2766:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a276a:	b002      	add	sp, #8
 80a276c:	bd10      	pop	{r4, pc}
	...

080a2770 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2770:	4803      	ldr	r0, [pc, #12]	; (80a2780 <_GLOBAL__sub_I_RGB+0x10>)
 80a2772:	2300      	movs	r3, #0
 80a2774:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2776:	4a03      	ldr	r2, [pc, #12]	; (80a2784 <_GLOBAL__sub_I_RGB+0x14>)
 80a2778:	4903      	ldr	r1, [pc, #12]	; (80a2788 <_GLOBAL__sub_I_RGB+0x18>)
 80a277a:	f000 bf3d 	b.w	80a35f8 <__aeabi_atexit>
 80a277e:	bf00      	nop
 80a2780:	200007b8 	.word	0x200007b8
 80a2784:	20000070 	.word	0x20000070
 80a2788:	080a2743 	.word	0x080a2743

080a278c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a278c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a278e:	4b14      	ldr	r3, [pc, #80]	; (80a27e0 <serialEventRun+0x54>)
 80a2790:	b133      	cbz	r3, 80a27a0 <serialEventRun+0x14>
 80a2792:	f000 fc3d 	bl	80a3010 <_Z16_fetch_usbserialv>
 80a2796:	6803      	ldr	r3, [r0, #0]
 80a2798:	691b      	ldr	r3, [r3, #16]
 80a279a:	4798      	blx	r3
 80a279c:	2800      	cmp	r0, #0
 80a279e:	dc16      	bgt.n	80a27ce <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a27a0:	4b10      	ldr	r3, [pc, #64]	; (80a27e4 <serialEventRun+0x58>)
 80a27a2:	b133      	cbz	r3, 80a27b2 <serialEventRun+0x26>
 80a27a4:	f000 fcf2 	bl	80a318c <_Z22__fetch_global_Serial1v>
 80a27a8:	6803      	ldr	r3, [r0, #0]
 80a27aa:	691b      	ldr	r3, [r3, #16]
 80a27ac:	4798      	blx	r3
 80a27ae:	2800      	cmp	r0, #0
 80a27b0:	dc10      	bgt.n	80a27d4 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a27b2:	4b0d      	ldr	r3, [pc, #52]	; (80a27e8 <serialEventRun+0x5c>)
 80a27b4:	b10b      	cbz	r3, 80a27ba <serialEventRun+0x2e>
 80a27b6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a27ba:	4b0c      	ldr	r3, [pc, #48]	; (80a27ec <serialEventRun+0x60>)
 80a27bc:	b17b      	cbz	r3, 80a27de <serialEventRun+0x52>
 80a27be:	f000 fc63 	bl	80a3088 <_Z17_fetch_usbserial1v>
 80a27c2:	6803      	ldr	r3, [r0, #0]
 80a27c4:	691b      	ldr	r3, [r3, #16]
 80a27c6:	4798      	blx	r3
 80a27c8:	2800      	cmp	r0, #0
 80a27ca:	dc06      	bgt.n	80a27da <serialEventRun+0x4e>
 80a27cc:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a27ce:	f3af 8000 	nop.w
 80a27d2:	e7e5      	b.n	80a27a0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a27d4:	f3af 8000 	nop.w
 80a27d8:	e7eb      	b.n	80a27b2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a27da:	f3af 8000 	nop.w
 80a27de:	bd08      	pop	{r3, pc}
	...

080a27f0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a27f0:	b508      	push	{r3, lr}
	serialEventRun();
 80a27f2:	f7ff ffcb 	bl	80a278c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a27f6:	f7ff fc29 	bl	80a204c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a27fa:	4b01      	ldr	r3, [pc, #4]	; (80a2800 <_post_loop+0x10>)
 80a27fc:	6018      	str	r0, [r3, #0]
 80a27fe:	bd08      	pop	{r3, pc}
 80a2800:	20000c5c 	.word	0x20000c5c

080a2804 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2804:	4802      	ldr	r0, [pc, #8]	; (80a2810 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2806:	4a03      	ldr	r2, [pc, #12]	; (80a2814 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2808:	4903      	ldr	r1, [pc, #12]	; (80a2818 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a280a:	1a12      	subs	r2, r2, r0
 80a280c:	f003 bba4 	b.w	80a5f58 <memcpy>
 80a2810:	40024000 	.word	0x40024000
 80a2814:	40024004 	.word	0x40024004
 80a2818:	080a6720 	.word	0x080a6720

080a281c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a281c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a281e:	2300      	movs	r3, #0
 80a2820:	9300      	str	r3, [sp, #0]
 80a2822:	461a      	mov	r2, r3
 80a2824:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2828:	f7ff fd3c 	bl	80a22a4 <system_ctrl_set_result>
}
 80a282c:	b003      	add	sp, #12
 80a282e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2834 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2834:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2836:	8843      	ldrh	r3, [r0, #2]
 80a2838:	2b0a      	cmp	r3, #10
 80a283a:	d008      	beq.n	80a284e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a283c:	2b50      	cmp	r3, #80	; 0x50
 80a283e:	d109      	bne.n	80a2854 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2840:	4b09      	ldr	r3, [pc, #36]	; (80a2868 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2842:	681b      	ldr	r3, [r3, #0]
 80a2844:	b13b      	cbz	r3, 80a2856 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2846:	b003      	add	sp, #12
 80a2848:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a284c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a284e:	f7ff ffe5 	bl	80a281c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2852:	e006      	b.n	80a2862 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2854:	2300      	movs	r3, #0
 80a2856:	9300      	str	r3, [sp, #0]
 80a2858:	461a      	mov	r2, r3
 80a285a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a285e:	f7ff fd21 	bl	80a22a4 <system_ctrl_set_result>
        break;
    }
}
 80a2862:	b003      	add	sp, #12
 80a2864:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2868:	200007c8 	.word	0x200007c8

080a286c <module_user_init_hook>:

void module_user_init_hook()
{
 80a286c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a286e:	4c10      	ldr	r4, [pc, #64]	; (80a28b0 <module_user_init_hook+0x44>)
 80a2870:	4d10      	ldr	r5, [pc, #64]	; (80a28b4 <module_user_init_hook+0x48>)
 80a2872:	6823      	ldr	r3, [r4, #0]
 80a2874:	42ab      	cmp	r3, r5
 80a2876:	4b10      	ldr	r3, [pc, #64]	; (80a28b8 <module_user_init_hook+0x4c>)
 80a2878:	bf0c      	ite	eq
 80a287a:	2201      	moveq	r2, #1
 80a287c:	2200      	movne	r2, #0
 80a287e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2880:	d002      	beq.n	80a2888 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2882:	f7ff ffbf 	bl	80a2804 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2886:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2888:	f7ff fbd0 	bl	80a202c <HAL_RNG_GetRandomNumber>
 80a288c:	4604      	mov	r4, r0
    srand(seed);
 80a288e:	f003 fb77 	bl	80a5f80 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2892:	4b0a      	ldr	r3, [pc, #40]	; (80a28bc <module_user_init_hook+0x50>)
 80a2894:	b113      	cbz	r3, 80a289c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2896:	4620      	mov	r0, r4
 80a2898:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a289c:	2100      	movs	r1, #0
 80a289e:	4807      	ldr	r0, [pc, #28]	; (80a28bc <module_user_init_hook+0x50>)
 80a28a0:	f7ff fd72 	bl	80a2388 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a28a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a28a8:	2100      	movs	r1, #0
 80a28aa:	4805      	ldr	r0, [pc, #20]	; (80a28c0 <module_user_init_hook+0x54>)
 80a28ac:	f7ff bcf0 	b.w	80a2290 <system_ctrl_set_app_request_handler>
 80a28b0:	40024000 	.word	0x40024000
 80a28b4:	9a271c1e 	.word	0x9a271c1e
 80a28b8:	200007cc 	.word	0x200007cc
 80a28bc:	00000000 	.word	0x00000000
 80a28c0:	080a2835 	.word	0x080a2835

080a28c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a28c4:	4770      	bx	lr

080a28c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a28c6:	2000      	movs	r0, #0
 80a28c8:	4770      	bx	lr

080a28ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a28ca:	b510      	push	{r4, lr}
 80a28cc:	4604      	mov	r4, r0
 80a28ce:	2110      	movs	r1, #16
 80a28d0:	f000 fe97 	bl	80a3602 <_ZdlPvj>
 80a28d4:	4620      	mov	r0, r4
 80a28d6:	bd10      	pop	{r4, pc}

080a28d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a28d8:	b508      	push	{r3, lr}
      { delete this; }
 80a28da:	b108      	cbz	r0, 80a28e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a28dc:	f7ff fff5 	bl	80a28ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a28e0:	bd08      	pop	{r3, pc}

080a28e2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a28e2:	2200      	movs	r2, #0
 80a28e4:	6002      	str	r2, [r0, #0]
 80a28e6:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a28ea:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a28ec:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a28ee:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a28f2:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a28f4:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a28f6:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a28f8:	680c      	ldr	r4, [r1, #0]
 80a28fa:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a28fc:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a28fe:	bd10      	pop	{r4, pc}

080a2900 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a2900:	b510      	push	{r4, lr}
 80a2902:	4604      	mov	r4, r0
    free((void*)msg_);
 80a2904:	6800      	ldr	r0, [r0, #0]
 80a2906:	f7ff fd4f 	bl	80a23a8 <free>
}
 80a290a:	4620      	mov	r0, r4
 80a290c:	bd10      	pop	{r4, pc}

080a290e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a290e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a2910:	68c4      	ldr	r4, [r0, #12]
 80a2912:	b1f4      	cbz	r4, 80a2952 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a2914:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a2916:	2b02      	cmp	r3, #2
 80a2918:	d103      	bne.n	80a2922 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a291a:	f104 000c 	add.w	r0, r4, #12
 80a291e:	f7ff ffef 	bl	80a2900 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a2922:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a2924:	b135      	cbz	r5, 80a2934 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2926:	4628      	mov	r0, r5
 80a2928:	f7fd fdb6 	bl	80a0498 <_ZNSt14_Function_baseD1Ev>
 80a292c:	2110      	movs	r1, #16
 80a292e:	4628      	mov	r0, r5
 80a2930:	f000 fe67 	bl	80a3602 <_ZdlPvj>
 80a2934:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a2936:	b135      	cbz	r5, 80a2946 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a2938:	4628      	mov	r0, r5
 80a293a:	f7fd fdad 	bl	80a0498 <_ZNSt14_Function_baseD1Ev>
 80a293e:	2110      	movs	r1, #16
 80a2940:	4628      	mov	r0, r5
 80a2942:	f000 fe5e 	bl	80a3602 <_ZdlPvj>
 80a2946:	4620      	mov	r0, r4
 80a2948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a294c:	2114      	movs	r1, #20
 80a294e:	f000 be58 	b.w	80a3602 <_ZdlPvj>
 80a2952:	bd38      	pop	{r3, r4, r5, pc}

080a2954 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 80a2954:	b507      	push	{r0, r1, r2, lr}
 80a2956:	e88d 0006 	stmia.w	sp, {r1, r2}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a295a:	6882      	ldr	r2, [r0, #8]
 80a295c:	b90a      	cbnz	r2, 80a2962 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 80a295e:	f000 fe52 	bl	80a3606 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2962:	68c3      	ldr	r3, [r0, #12]
 80a2964:	aa01      	add	r2, sp, #4
 80a2966:	4669      	mov	r1, sp
 80a2968:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 80a296a:	b003      	add	sp, #12
 80a296c:	f85d fb04 	ldr.w	pc, [sp], #4

080a2970 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a2970:	b513      	push	{r0, r1, r4, lr}
 80a2972:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2974:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a2978:	2300      	movs	r3, #0
 80a297a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a297c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a297e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a2980:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2982:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a2984:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2986:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2988:	f7ff fea8 	bl	80a26dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a298c:	4620      	mov	r0, r4
 80a298e:	b002      	add	sp, #8
 80a2990:	bd10      	pop	{r4, pc}

080a2992 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a2992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2994:	460c      	mov	r4, r1
 80a2996:	4606      	mov	r6, r0
 80a2998:	460f      	mov	r7, r1
 80a299a:	f854 3b04 	ldr.w	r3, [r4], #4
 80a299e:	ad02      	add	r5, sp, #8
 80a29a0:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a29a4:	4621      	mov	r1, r4
 80a29a6:	a801      	add	r0, sp, #4
 80a29a8:	f7ff feae 	bl	80a2708 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a29ac:	4629      	mov	r1, r5
 80a29ae:	4630      	mov	r0, r6
 80a29b0:	f7ff ffde 	bl	80a2970 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a29b4:	a801      	add	r0, sp, #4
 80a29b6:	f7ff fe91 	bl	80a26dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a29ba:	4620      	mov	r0, r4
 80a29bc:	f7ff fe8e 	bl	80a26dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a29c0:	4638      	mov	r0, r7
 80a29c2:	2108      	movs	r1, #8
 80a29c4:	f000 fe1d 	bl	80a3602 <_ZdlPvj>
        return p;
    }
 80a29c8:	4630      	mov	r0, r6
 80a29ca:	b003      	add	sp, #12
 80a29cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a29d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a29d0:	b538      	push	{r3, r4, r5, lr}
 80a29d2:	2300      	movs	r3, #0
 80a29d4:	4604      	mov	r4, r0
 80a29d6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a29d8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a29da:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a29dc:	f7fd fb5f 	bl	80a009e <_Znwj>
 80a29e0:	b128      	cbz	r0, 80a29ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a29e2:	2301      	movs	r3, #1
 80a29e4:	6043      	str	r3, [r0, #4]
 80a29e6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a29e8:	4b02      	ldr	r3, [pc, #8]	; (80a29f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a29ea:	60c5      	str	r5, [r0, #12]
 80a29ec:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a29ee:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a29f0:	4620      	mov	r0, r4
 80a29f2:	bd38      	pop	{r3, r4, r5, pc}
 80a29f4:	080a64d8 	.word	0x080a64d8

080a29f8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a29f8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a29fa:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a29fc:	b90a      	cbnz	r2, 80a2a02 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a29fe:	f000 fe02 	bl	80a3606 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2a02:	68c3      	ldr	r3, [r0, #12]
    }
 80a2a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2a08:	4718      	bx	r3

080a2a0a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2a0a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2a0c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a2a0e:	f100 0110 	add.w	r1, r0, #16
 80a2a12:	f7ff fff1 	bl	80a29f8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a2a16:	bd08      	pop	{r3, pc}

080a2a18 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2a18:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a2a1a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2a1c:	b90a      	cbnz	r2, 80a2a22 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a2a1e:	f000 fdf2 	bl	80a3606 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2a22:	68c3      	ldr	r3, [r0, #12]
    }
 80a2a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2a28:	4718      	bx	r3

080a2a2a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2a2a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2a2c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a2a2e:	f100 0110 	add.w	r1, r0, #16
 80a2a32:	f7ff fff1 	bl	80a2a18 <_ZNKSt8functionIFvRKbEEclES1_>
 80a2a36:	bd08      	pop	{r3, pc}

080a2a38 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2a38:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2a3a:	2300      	movs	r3, #0
 80a2a3c:	6083      	str	r3, [r0, #8]
 80a2a3e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2a40:	4604      	mov	r4, r0
 80a2a42:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a2a44:	b12b      	cbz	r3, 80a2a52 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2a46:	2202      	movs	r2, #2
 80a2a48:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2a4a:	68eb      	ldr	r3, [r5, #12]
 80a2a4c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2a4e:	68ab      	ldr	r3, [r5, #8]
 80a2a50:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2a52:	4620      	mov	r0, r4
 80a2a54:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2a58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a2a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2a5a:	b089      	sub	sp, #36	; 0x24
 80a2a5c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a2a5e:	4668      	mov	r0, sp
 80a2a60:	f7ff ff3f 	bl	80a28e2 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a2a64:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2a68:	2300      	movs	r3, #0
 80a2a6a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2a6e:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a2a72:	2b00      	cmp	r3, #0
 80a2a74:	d103      	bne.n	80a2a7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a2a76:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a2a7a:	2900      	cmp	r1, #0
 80a2a7c:	d1f7      	bne.n	80a2a6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a2a7e:	d002      	beq.n	80a2a86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a2a80:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2a84:	e063      	b.n	80a2b4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a2a86:	f114 050c 	adds.w	r5, r4, #12
 80a2a8a:	d003      	beq.n	80a2a94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a2a8c:	4669      	mov	r1, sp
 80a2a8e:	4628      	mov	r0, r5
 80a2a90:	f7ff ff27 	bl	80a28e2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2a94:	f3bf 8f5f 	dmb	sy
 80a2a98:	2301      	movs	r3, #1
 80a2a9a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2a9c:	f3bf 8f5f 	dmb	sy
 80a2aa0:	f104 0308 	add.w	r3, r4, #8
 80a2aa4:	2000      	movs	r0, #0
 80a2aa6:	e853 6f00 	ldrex	r6, [r3]
 80a2aaa:	e843 0200 	strex	r2, r0, [r3]
 80a2aae:	2a00      	cmp	r2, #0
 80a2ab0:	d1f9      	bne.n	80a2aa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a2ab2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2ab6:	2e00      	cmp	r6, #0
 80a2ab8:	d049      	beq.n	80a2b4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2aba:	f7ff fbd9 	bl	80a2270 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a2abe:	b120      	cbz	r0, 80a2aca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2ac0:	4629      	mov	r1, r5
 80a2ac2:	4630      	mov	r0, r6
 80a2ac4:	f7ff ff98 	bl	80a29f8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a2ac8:	e03a      	b.n	80a2b40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2aca:	4631      	mov	r1, r6
 80a2acc:	a802      	add	r0, sp, #8
 80a2ace:	f7ff ffb3 	bl	80a2a38 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a2ad2:	68e0      	ldr	r0, [r4, #12]
 80a2ad4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2ad8:	b108      	cbz	r0, 80a2ade <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a2ada:	f003 fa8b 	bl	80a5ff4 <strdup>
 80a2ade:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2ae0:	2010      	movs	r0, #16
 80a2ae2:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a2ae6:	f7fd fada 	bl	80a009e <_Znwj>
 80a2aea:	4605      	mov	r5, r0
 80a2aec:	b1e8      	cbz	r0, 80a2b2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2aee:	2700      	movs	r7, #0
 80a2af0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2af2:	2018      	movs	r0, #24
 80a2af4:	f7fd fad3 	bl	80a009e <_Znwj>
 80a2af8:	4604      	mov	r4, r0
 80a2afa:	b188      	cbz	r0, 80a2b20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2afc:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2afe:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2b00:	a802      	add	r0, sp, #8
 80a2b02:	f7ff fe24 	bl	80a274e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2b06:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2b08:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2b0a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2b0c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2b0e:	9204      	str	r2, [sp, #16]
 80a2b10:	68e2      	ldr	r2, [r4, #12]
 80a2b12:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a2b14:	60e3      	str	r3, [r4, #12]
 80a2b16:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2b1a:	9205      	str	r2, [sp, #20]
 80a2b1c:	f7ff fee1 	bl	80a28e2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2b20:	4b0d      	ldr	r3, [pc, #52]	; (80a2b58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2b22:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2b24:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2b26:	4b0d      	ldr	r3, [pc, #52]	; (80a2b5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a2b28:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a2b2a:	a806      	add	r0, sp, #24
 80a2b2c:	f7ff fee8 	bl	80a2900 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2b30:	a802      	add	r0, sp, #8
 80a2b32:	f7fd fcb1 	bl	80a0498 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2b36:	2200      	movs	r2, #0
 80a2b38:	4629      	mov	r1, r5
 80a2b3a:	4809      	ldr	r0, [pc, #36]	; (80a2b60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a2b3c:	f7ff fba0 	bl	80a2280 <application_thread_invoke>
 80a2b40:	4630      	mov	r0, r6
 80a2b42:	f7fd fca9 	bl	80a0498 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a2b46:	2110      	movs	r1, #16
 80a2b48:	4630      	mov	r0, r6
 80a2b4a:	f000 fd5a 	bl	80a3602 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a2b4e:	4668      	mov	r0, sp
 80a2b50:	f7ff fed6 	bl	80a2900 <_ZN8particle5ErrorD1Ev>
    }
 80a2b54:	b009      	add	sp, #36	; 0x24
 80a2b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2b58:	080a2a0b 	.word	0x080a2a0b
 80a2b5c:	080a2c81 	.word	0x080a2c81
 80a2b60:	080a31d9 	.word	0x080a31d9

080a2b64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a2b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2b68:	b08b      	sub	sp, #44	; 0x2c
 80a2b6a:	4606      	mov	r6, r0
 80a2b6c:	460f      	mov	r7, r1
 80a2b6e:	4690      	mov	r8, r2
 80a2b70:	4699      	mov	r9, r3
 80a2b72:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2b76:	f7ff fbef 	bl	80a2358 <spark_cloud_flag_connected>
 80a2b7a:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a2b7c:	4683      	mov	fp, r0
 80a2b7e:	bb30      	cbnz	r0, 80a2bce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2b80:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a2b84:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2b86:	a905      	add	r1, sp, #20
 80a2b88:	4628      	mov	r0, r5
 80a2b8a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2b8e:	f7ff fea8 	bl	80a28e2 <_ZN8particle5ErrorC1EOS0_>
 80a2b92:	2014      	movs	r0, #20
 80a2b94:	f7fd fa83 	bl	80a009e <_Znwj>
 80a2b98:	4604      	mov	r4, r0
 80a2b9a:	b158      	cbz	r0, 80a2bb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a2b9c:	2302      	movs	r3, #2
 80a2b9e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2ba0:	2301      	movs	r3, #1
 80a2ba2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2ba4:	f8c0 b004 	str.w	fp, [r0, #4]
 80a2ba8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a2bac:	4629      	mov	r1, r5
 80a2bae:	300c      	adds	r0, #12
 80a2bb0:	f7ff fe97 	bl	80a28e2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a2bb4:	4630      	mov	r0, r6
 80a2bb6:	4621      	mov	r1, r4
 80a2bb8:	f840 4b04 	str.w	r4, [r0], #4
 80a2bbc:	f7ff ff08 	bl	80a29d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2bc0:	4628      	mov	r0, r5
 80a2bc2:	f7ff fe9d 	bl	80a2900 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a2bc6:	a805      	add	r0, sp, #20
 80a2bc8:	f7ff fe9a 	bl	80a2900 <_ZN8particle5ErrorD1Ev>
 80a2bcc:	e052      	b.n	80a2c74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a2bce:	2400      	movs	r4, #0
 80a2bd0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a2bd2:	2014      	movs	r0, #20
 80a2bd4:	606c      	str	r4, [r5, #4]
 80a2bd6:	60ac      	str	r4, [r5, #8]
 80a2bd8:	9307      	str	r3, [sp, #28]
 80a2bda:	f7fd fa60 	bl	80a009e <_Znwj>
 80a2bde:	4601      	mov	r1, r0
 80a2be0:	b118      	cbz	r0, 80a2bea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a2be2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2be4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2be6:	6044      	str	r4, [r0, #4]
 80a2be8:	6084      	str	r4, [r0, #8]
 80a2bea:	a804      	add	r0, sp, #16
 80a2bec:	9103      	str	r1, [sp, #12]
 80a2bee:	f7ff feef 	bl	80a29d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a2bf2:	4b22      	ldr	r3, [pc, #136]	; (80a2c7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a2bf4:	2008      	movs	r0, #8
 80a2bf6:	9308      	str	r3, [sp, #32]
 80a2bf8:	f7fd fa51 	bl	80a009e <_Znwj>
 80a2bfc:	4604      	mov	r4, r0
 80a2bfe:	b128      	cbz	r0, 80a2c0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2c00:	9b03      	ldr	r3, [sp, #12]
 80a2c02:	a904      	add	r1, sp, #16
 80a2c04:	f840 3b04 	str.w	r3, [r0], #4
 80a2c08:	f7ff fd7e 	bl	80a2708 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2c0c:	9500      	str	r5, [sp, #0]
 80a2c0e:	fa5f f38a 	uxtb.w	r3, sl
 80a2c12:	464a      	mov	r2, r9
 80a2c14:	4641      	mov	r1, r8
 80a2c16:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a2c18:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2c1a:	f7ff fba5 	bl	80a2368 <spark_send_event>
 80a2c1e:	b920      	cbnz	r0, 80a2c2a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a2c20:	9b03      	ldr	r3, [sp, #12]
 80a2c22:	785b      	ldrb	r3, [r3, #1]
 80a2c24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a2c28:	b183      	cbz	r3, 80a2c4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a2c2a:	9b03      	ldr	r3, [sp, #12]
 80a2c2c:	a904      	add	r1, sp, #16
 80a2c2e:	a806      	add	r0, sp, #24
 80a2c30:	9305      	str	r3, [sp, #20]
 80a2c32:	f7ff fd69 	bl	80a2708 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a2c36:	a905      	add	r1, sp, #20
 80a2c38:	4630      	mov	r0, r6
 80a2c3a:	f7ff fe99 	bl	80a2970 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2c3e:	a806      	add	r0, sp, #24
 80a2c40:	f7ff fd4c 	bl	80a26dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2c44:	a804      	add	r0, sp, #16
 80a2c46:	f7ff fd49 	bl	80a26dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2c4a:	e013      	b.n	80a2c74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a2c4c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a2c50:	a905      	add	r1, sp, #20
 80a2c52:	a803      	add	r0, sp, #12
 80a2c54:	9205      	str	r2, [sp, #20]
 80a2c56:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2c5a:	f7ff fefd 	bl	80a2a58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2c5e:	a805      	add	r0, sp, #20
 80a2c60:	f7ff fe4e 	bl	80a2900 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a2c64:	a805      	add	r0, sp, #20
 80a2c66:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a2c68:	f7ff fe93 	bl	80a2992 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a2c6c:	a806      	add	r0, sp, #24
 80a2c6e:	f7ff fd35 	bl	80a26dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2c72:	e7da      	b.n	80a2c2a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a2c74:	4630      	mov	r0, r6
 80a2c76:	b00b      	add	sp, #44	; 0x2c
 80a2c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2c7c:	080a2df1 	.word	0x080a2df1

080a2c80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2c80:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2c84:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2c86:	d006      	beq.n	80a2c96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a2c88:	2a03      	cmp	r2, #3
 80a2c8a:	d017      	beq.n	80a2cbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a2c8c:	2a01      	cmp	r2, #1
 80a2c8e:	d122      	bne.n	80a2cd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2c90:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2c92:	6003      	str	r3, [r0, #0]
	      break;
 80a2c94:	e01f      	b.n	80a2cd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2c96:	2018      	movs	r0, #24
 80a2c98:	680e      	ldr	r6, [r1, #0]
 80a2c9a:	f7fd fa00 	bl	80a009e <_Znwj>
 80a2c9e:	4605      	mov	r5, r0
 80a2ca0:	b150      	cbz	r0, 80a2cb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2ca2:	4631      	mov	r1, r6
 80a2ca4:	f7ff fec8 	bl	80a2a38 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a2ca8:	6930      	ldr	r0, [r6, #16]
 80a2caa:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2cae:	b108      	cbz	r0, 80a2cb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a2cb0:	f003 f9a0 	bl	80a5ff4 <strdup>
 80a2cb4:	6128      	str	r0, [r5, #16]
 80a2cb6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2cb8:	6025      	str	r5, [r4, #0]
 80a2cba:	e00c      	b.n	80a2cd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2cbc:	6804      	ldr	r4, [r0, #0]
 80a2cbe:	b154      	cbz	r4, 80a2cd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a2cc0:	f104 0010 	add.w	r0, r4, #16
 80a2cc4:	f7ff fe1c 	bl	80a2900 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2cc8:	4620      	mov	r0, r4
 80a2cca:	f7fd fbe5 	bl	80a0498 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2cce:	2118      	movs	r1, #24
 80a2cd0:	4620      	mov	r0, r4
 80a2cd2:	f000 fc96 	bl	80a3602 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a2cd6:	2000      	movs	r0, #0
 80a2cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2cda <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2cda:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2cdc:	2300      	movs	r3, #0
 80a2cde:	6083      	str	r3, [r0, #8]
 80a2ce0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2ce2:	4604      	mov	r4, r0
 80a2ce4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a2ce6:	b12b      	cbz	r3, 80a2cf4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2ce8:	2202      	movs	r2, #2
 80a2cea:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2cec:	68eb      	ldr	r3, [r5, #12]
 80a2cee:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2cf0:	68ab      	ldr	r3, [r5, #8]
 80a2cf2:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2cf4:	4620      	mov	r0, r4
 80a2cf6:	bd38      	pop	{r3, r4, r5, pc}

080a2cf8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2cf8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2cfa:	b570      	push	{r4, r5, r6, lr}
 80a2cfc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2cfe:	d006      	beq.n	80a2d0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a2d00:	2a03      	cmp	r2, #3
 80a2d02:	d011      	beq.n	80a2d28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a2d04:	2a01      	cmp	r2, #1
 80a2d06:	d118      	bne.n	80a2d3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2d08:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2d0a:	6003      	str	r3, [r0, #0]
	      break;
 80a2d0c:	e015      	b.n	80a2d3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2d0e:	2014      	movs	r0, #20
 80a2d10:	680e      	ldr	r6, [r1, #0]
 80a2d12:	f7fd f9c4 	bl	80a009e <_Znwj>
 80a2d16:	4605      	mov	r5, r0
 80a2d18:	b120      	cbz	r0, 80a2d24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2d1a:	4631      	mov	r1, r6
 80a2d1c:	f7ff ffdd 	bl	80a2cda <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a2d20:	7c33      	ldrb	r3, [r6, #16]
 80a2d22:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2d24:	6025      	str	r5, [r4, #0]
 80a2d26:	e008      	b.n	80a2d3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2d28:	6804      	ldr	r4, [r0, #0]
 80a2d2a:	b134      	cbz	r4, 80a2d3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2d2c:	4620      	mov	r0, r4
 80a2d2e:	f7fd fbb3 	bl	80a0498 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2d32:	2114      	movs	r1, #20
 80a2d34:	4620      	mov	r0, r4
 80a2d36:	f000 fc64 	bl	80a3602 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a2d3a:	2000      	movs	r0, #0
 80a2d3c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2d40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a2d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2d42:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2d44:	f3bf 8f5f 	dmb	sy
 80a2d48:	b087      	sub	sp, #28
 80a2d4a:	2300      	movs	r3, #0
 80a2d4c:	e850 6f00 	ldrex	r6, [r0]
 80a2d50:	e840 3200 	strex	r2, r3, [r0]
 80a2d54:	2a00      	cmp	r2, #0
 80a2d56:	d1f9      	bne.n	80a2d4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a2d58:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2d5c:	2e00      	cmp	r6, #0
 80a2d5e:	d03f      	beq.n	80a2de0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2d60:	4618      	mov	r0, r3
 80a2d62:	f7ff fa85 	bl	80a2270 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a2d66:	4607      	mov	r7, r0
 80a2d68:	b120      	cbz	r0, 80a2d74 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2d6a:	4621      	mov	r1, r4
 80a2d6c:	4630      	mov	r0, r6
 80a2d6e:	f7ff fe53 	bl	80a2a18 <_ZNKSt8functionIFvRKbEEclES1_>
 80a2d72:	e02e      	b.n	80a2dd2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2d74:	4631      	mov	r1, r6
 80a2d76:	a801      	add	r0, sp, #4
 80a2d78:	f7ff ffaf 	bl	80a2cda <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2d7c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2d7e:	2010      	movs	r0, #16
 80a2d80:	f88d 3014 	strb.w	r3, [sp, #20]
 80a2d84:	f7fd f98b 	bl	80a009e <_Znwj>
 80a2d88:	4605      	mov	r5, r0
 80a2d8a:	b1d0      	cbz	r0, 80a2dc2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2d8c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2d8e:	2014      	movs	r0, #20
 80a2d90:	f7fd f985 	bl	80a009e <_Znwj>
 80a2d94:	4604      	mov	r4, r0
 80a2d96:	b178      	cbz	r0, 80a2db8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2d98:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2d9a:	4601      	mov	r1, r0
 80a2d9c:	a801      	add	r0, sp, #4
 80a2d9e:	f7ff fcd6 	bl	80a274e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2da2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2da4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2da6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2da8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2daa:	9203      	str	r2, [sp, #12]
 80a2dac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2dae:	60e3      	str	r3, [r4, #12]
 80a2db0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2db4:	9204      	str	r2, [sp, #16]
 80a2db6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2db8:	4b0a      	ldr	r3, [pc, #40]	; (80a2de4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2dba:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2dbc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2dbe:	4b0a      	ldr	r3, [pc, #40]	; (80a2de8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a2dc0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2dc2:	a801      	add	r0, sp, #4
 80a2dc4:	f7fd fb68 	bl	80a0498 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2dc8:	2200      	movs	r2, #0
 80a2dca:	4629      	mov	r1, r5
 80a2dcc:	4807      	ldr	r0, [pc, #28]	; (80a2dec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a2dce:	f7ff fa57 	bl	80a2280 <application_thread_invoke>
 80a2dd2:	4630      	mov	r0, r6
 80a2dd4:	f7fd fb60 	bl	80a0498 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a2dd8:	2110      	movs	r1, #16
 80a2dda:	4630      	mov	r0, r6
 80a2ddc:	f000 fc11 	bl	80a3602 <_ZdlPvj>
        }
    }
 80a2de0:	b007      	add	sp, #28
 80a2de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2de4:	080a2a2b 	.word	0x080a2a2b
 80a2de8:	080a2cf9 	.word	0x080a2cf9
 80a2dec:	080a31d9 	.word	0x080a31d9

080a2df0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a2df0:	b530      	push	{r4, r5, lr}
 80a2df2:	4604      	mov	r4, r0
 80a2df4:	b085      	sub	sp, #20
 80a2df6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a2df8:	4668      	mov	r0, sp
 80a2dfa:	4611      	mov	r1, r2
 80a2dfc:	f7ff fdc9 	bl	80a2992 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a2e00:	b17c      	cbz	r4, 80a2e22 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a2e02:	b224      	sxth	r4, r4
 80a2e04:	4628      	mov	r0, r5
 80a2e06:	b10d      	cbz	r5, 80a2e0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a2e08:	f003 f8f4 	bl	80a5ff4 <strdup>
 80a2e0c:	9002      	str	r0, [sp, #8]
 80a2e0e:	a902      	add	r1, sp, #8
 80a2e10:	4668      	mov	r0, sp
 80a2e12:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a2e16:	f7ff fe1f 	bl	80a2a58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2e1a:	a802      	add	r0, sp, #8
 80a2e1c:	f7ff fd70 	bl	80a2900 <_ZN8particle5ErrorD1Ev>
 80a2e20:	e01d      	b.n	80a2e5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a2e22:	f04f 0201 	mov.w	r2, #1
 80a2e26:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2e28:	f88d 4008 	strb.w	r4, [sp, #8]
 80a2e2c:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a2e30:	42a3      	cmp	r3, r4
 80a2e32:	d103      	bne.n	80a2e3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a2e34:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a2e38:	2900      	cmp	r1, #0
 80a2e3a:	d1f7      	bne.n	80a2e2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a2e3c:	d002      	beq.n	80a2e44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a2e3e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2e42:	e00c      	b.n	80a2e5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a2e44:	f110 010c 	adds.w	r1, r0, #12
 80a2e48:	f04f 0301 	mov.w	r3, #1
 80a2e4c:	bf18      	it	ne
 80a2e4e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2e50:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a2e54:	3004      	adds	r0, #4
 80a2e56:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a2e5a:	f7ff ff71 	bl	80a2d40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a2e5e:	a801      	add	r0, sp, #4
 80a2e60:	f7ff fc3c 	bl	80a26dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a2e64:	b005      	add	sp, #20
 80a2e66:	bd30      	pop	{r4, r5, pc}

080a2e68 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2e68:	4770      	bx	lr

080a2e6a <_ZN9IPAddressD0Ev>:
 80a2e6a:	b510      	push	{r4, lr}
 80a2e6c:	4604      	mov	r4, r0
 80a2e6e:	2118      	movs	r1, #24
 80a2e70:	f000 fbc7 	bl	80a3602 <_ZdlPvj>
 80a2e74:	4620      	mov	r0, r4
 80a2e76:	bd10      	pop	{r4, pc}

080a2e78 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2e7a:	460f      	mov	r7, r1
 80a2e7c:	f100 0608 	add.w	r6, r0, #8
 80a2e80:	1d05      	adds	r5, r0, #4
 80a2e82:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2e84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2e88:	220a      	movs	r2, #10
 80a2e8a:	4638      	mov	r0, r7
 80a2e8c:	f7ff fc1e 	bl	80a26cc <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2e90:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2e92:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2e94:	d007      	beq.n	80a2ea6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2e96:	2c00      	cmp	r4, #0
 80a2e98:	d0f4      	beq.n	80a2e84 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2e9a:	212e      	movs	r1, #46	; 0x2e
 80a2e9c:	4638      	mov	r0, r7
 80a2e9e:	f7ff fbd2 	bl	80a2646 <_ZN5Print5printEc>
 80a2ea2:	4404      	add	r4, r0
 80a2ea4:	e7ee      	b.n	80a2e84 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2ea6:	4620      	mov	r0, r4
 80a2ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2eac <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2eac:	b510      	push	{r4, lr}
 80a2eae:	4604      	mov	r4, r0
 80a2eb0:	4b04      	ldr	r3, [pc, #16]	; (80a2ec4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2eb2:	2211      	movs	r2, #17
 80a2eb4:	f840 3b04 	str.w	r3, [r0], #4
 80a2eb8:	2100      	movs	r1, #0
 80a2eba:	f003 f858 	bl	80a5f6e <memset>
{
    clear();
}
 80a2ebe:	4620      	mov	r0, r4
 80a2ec0:	bd10      	pop	{r4, pc}
 80a2ec2:	bf00      	nop
 80a2ec4:	080a64f4 	.word	0x080a64f4

080a2ec8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2ec8:	4603      	mov	r3, r0
 80a2eca:	4a07      	ldr	r2, [pc, #28]	; (80a2ee8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2ecc:	b510      	push	{r4, lr}
 80a2ece:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a2ed2:	f101 0210 	add.w	r2, r1, #16
 80a2ed6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2eda:	4291      	cmp	r1, r2
 80a2edc:	f843 4b04 	str.w	r4, [r3], #4
 80a2ee0:	d1f9      	bne.n	80a2ed6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2ee2:	780a      	ldrb	r2, [r1, #0]
 80a2ee4:	701a      	strb	r2, [r3, #0]
}
 80a2ee6:	bd10      	pop	{r4, pc}
 80a2ee8:	080a64f4 	.word	0x080a64f4

080a2eec <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2eec:	4a02      	ldr	r2, [pc, #8]	; (80a2ef8 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a2eee:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2ef0:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a2ef2:	2204      	movs	r2, #4
 80a2ef4:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2ef6:	4770      	bx	lr
 80a2ef8:	080a64f4 	.word	0x080a64f4

080a2efc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2efc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2efe:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2f02:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2f06:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2f0a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a2f0e:	2304      	movs	r3, #4
 80a2f10:	6041      	str	r1, [r0, #4]
 80a2f12:	7503      	strb	r3, [r0, #20]
 80a2f14:	bd10      	pop	{r4, pc}
	...

080a2f18 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2f1a:	4d04      	ldr	r5, [pc, #16]	; (80a2f2c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2f1c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2f1e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2f22:	9500      	str	r5, [sp, #0]
 80a2f24:	f7ff ffea 	bl	80a2efc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2f28:	b003      	add	sp, #12
 80a2f2a:	bd30      	pop	{r4, r5, pc}
 80a2f2c:	080a64f4 	.word	0x080a64f4

080a2f30 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2f30:	7441      	strb	r1, [r0, #17]
 80a2f32:	4770      	bx	lr

080a2f34 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2f34:	4770      	bx	lr

080a2f36 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2f36:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2f38:	2100      	movs	r1, #0
 80a2f3a:	7c00      	ldrb	r0, [r0, #16]
 80a2f3c:	f7ff f968 	bl	80a2210 <HAL_USB_USART_Receive_Data>
}
 80a2f40:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2f44:	bf28      	it	cs
 80a2f46:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2f4a:	bd08      	pop	{r3, pc}

080a2f4c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2f4c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2f4e:	2101      	movs	r1, #1
 80a2f50:	7c00      	ldrb	r0, [r0, #16]
 80a2f52:	f7ff f95d 	bl	80a2210 <HAL_USB_USART_Receive_Data>
}
 80a2f56:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2f5a:	bf28      	it	cs
 80a2f5c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2f60:	bd08      	pop	{r3, pc}

080a2f62 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2f62:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2f64:	7c00      	ldrb	r0, [r0, #16]
 80a2f66:	f7ff f94b 	bl	80a2200 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2f6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2f6e:	bd08      	pop	{r3, pc}

080a2f70 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2f70:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2f72:	7c00      	ldrb	r0, [r0, #16]
 80a2f74:	f7ff f93c 	bl	80a21f0 <HAL_USB_USART_Available_Data>
}
 80a2f78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2f7c:	bd08      	pop	{r3, pc}

080a2f7e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2f7e:	7c00      	ldrb	r0, [r0, #16]
 80a2f80:	f7ff b956 	b.w	80a2230 <HAL_USB_USART_Flush_Data>

080a2f84 <_ZN9USBSerialD0Ev>:
 80a2f84:	b510      	push	{r4, lr}
 80a2f86:	4604      	mov	r4, r0
 80a2f88:	2114      	movs	r1, #20
 80a2f8a:	f000 fb3a 	bl	80a3602 <_ZdlPvj>
 80a2f8e:	4620      	mov	r0, r4
 80a2f90:	bd10      	pop	{r4, pc}

080a2f92 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2f92:	b538      	push	{r3, r4, r5, lr}
 80a2f94:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2f96:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2f98:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2f9a:	f7ff f931 	bl	80a2200 <HAL_USB_USART_Available_Data_For_Write>
 80a2f9e:	2800      	cmp	r0, #0
 80a2fa0:	dc01      	bgt.n	80a2fa6 <_ZN9USBSerial5writeEh+0x14>
 80a2fa2:	7c60      	ldrb	r0, [r4, #17]
 80a2fa4:	b128      	cbz	r0, 80a2fb2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2fa6:	4629      	mov	r1, r5
 80a2fa8:	7c20      	ldrb	r0, [r4, #16]
 80a2faa:	f7ff f939 	bl	80a2220 <HAL_USB_USART_Send_Data>
 80a2fae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2fb2:	bd38      	pop	{r3, r4, r5, pc}

080a2fb4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2fb4:	b510      	push	{r4, lr}
 80a2fb6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2fb8:	2300      	movs	r3, #0
 80a2fba:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2fc0:	60a3      	str	r3, [r4, #8]
 80a2fc2:	4b05      	ldr	r3, [pc, #20]	; (80a2fd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2fc4:	4608      	mov	r0, r1
 80a2fc6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2fc8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2fca:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2fcc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2fce:	4611      	mov	r1, r2
 80a2fd0:	f7ff f8fe 	bl	80a21d0 <HAL_USB_USART_Init>
}
 80a2fd4:	4620      	mov	r0, r4
 80a2fd6:	bd10      	pop	{r4, pc}
 80a2fd8:	080a6508 	.word	0x080a6508

080a2fdc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2fdc:	2200      	movs	r2, #0
 80a2fde:	7c00      	ldrb	r0, [r0, #16]
 80a2fe0:	f7ff b8fe 	b.w	80a21e0 <HAL_USB_USART_Begin>

080a2fe4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2fe4:	b510      	push	{r4, lr}
 80a2fe6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2fe8:	2214      	movs	r2, #20
 80a2fea:	2100      	movs	r1, #0
 80a2fec:	f002 ffbf 	bl	80a5f6e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2ff0:	4b05      	ldr	r3, [pc, #20]	; (80a3008 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2ff2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2ff4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2ff6:	4b05      	ldr	r3, [pc, #20]	; (80a300c <_Z19acquireSerialBufferv+0x28>)
 80a2ff8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2ffa:	f240 1301 	movw	r3, #257	; 0x101
 80a2ffe:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3000:	2381      	movs	r3, #129	; 0x81
 80a3002:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3004:	bd10      	pop	{r4, pc}
 80a3006:	bf00      	nop
 80a3008:	20000855 	.word	0x20000855
 80a300c:	200007d4 	.word	0x200007d4

080a3010 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3010:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3012:	4d0e      	ldr	r5, [pc, #56]	; (80a304c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3014:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3016:	a801      	add	r0, sp, #4
 80a3018:	f7ff ffe4 	bl	80a2fe4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a301c:	6829      	ldr	r1, [r5, #0]
 80a301e:	f011 0401 	ands.w	r4, r1, #1
 80a3022:	d110      	bne.n	80a3046 <_Z16_fetch_usbserialv+0x36>
 80a3024:	4628      	mov	r0, r5
 80a3026:	f7fd f83e 	bl	80a00a6 <__cxa_guard_acquire>
 80a302a:	b160      	cbz	r0, 80a3046 <_Z16_fetch_usbserialv+0x36>
 80a302c:	aa01      	add	r2, sp, #4
 80a302e:	4621      	mov	r1, r4
 80a3030:	4807      	ldr	r0, [pc, #28]	; (80a3050 <_Z16_fetch_usbserialv+0x40>)
 80a3032:	f7ff ffbf 	bl	80a2fb4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3036:	4628      	mov	r0, r5
 80a3038:	f7fd f83a 	bl	80a00b0 <__cxa_guard_release>
 80a303c:	4a05      	ldr	r2, [pc, #20]	; (80a3054 <_Z16_fetch_usbserialv+0x44>)
 80a303e:	4906      	ldr	r1, [pc, #24]	; (80a3058 <_Z16_fetch_usbserialv+0x48>)
 80a3040:	4803      	ldr	r0, [pc, #12]	; (80a3050 <_Z16_fetch_usbserialv+0x40>)
 80a3042:	f000 fad9 	bl	80a35f8 <__aeabi_atexit>
	return _usbserial;
}
 80a3046:	4802      	ldr	r0, [pc, #8]	; (80a3050 <_Z16_fetch_usbserialv+0x40>)
 80a3048:	b007      	add	sp, #28
 80a304a:	bd30      	pop	{r4, r5, pc}
 80a304c:	200007d0 	.word	0x200007d0
 80a3050:	20000958 	.word	0x20000958
 80a3054:	20000070 	.word	0x20000070
 80a3058:	080a2f35 	.word	0x080a2f35

080a305c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a305c:	b510      	push	{r4, lr}
 80a305e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3060:	2214      	movs	r2, #20
 80a3062:	2100      	movs	r1, #0
 80a3064:	f002 ff83 	bl	80a5f6e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3068:	4b05      	ldr	r3, [pc, #20]	; (80a3080 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a306a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a306c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a306e:	4b05      	ldr	r3, [pc, #20]	; (80a3084 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3070:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3072:	f240 1301 	movw	r3, #257	; 0x101
 80a3076:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3078:	2381      	movs	r3, #129	; 0x81
 80a307a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a307c:	bd10      	pop	{r4, pc}
 80a307e:	bf00      	nop
 80a3080:	20000a08 	.word	0x20000a08
 80a3084:	20000970 	.word	0x20000970

080a3088 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3088:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a308a:	4c0e      	ldr	r4, [pc, #56]	; (80a30c4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a308c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a308e:	a801      	add	r0, sp, #4
 80a3090:	f7ff ffe4 	bl	80a305c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3094:	6823      	ldr	r3, [r4, #0]
 80a3096:	07db      	lsls	r3, r3, #31
 80a3098:	d410      	bmi.n	80a30bc <_Z17_fetch_usbserial1v+0x34>
 80a309a:	4620      	mov	r0, r4
 80a309c:	f7fd f803 	bl	80a00a6 <__cxa_guard_acquire>
 80a30a0:	b160      	cbz	r0, 80a30bc <_Z17_fetch_usbserial1v+0x34>
 80a30a2:	aa01      	add	r2, sp, #4
 80a30a4:	2101      	movs	r1, #1
 80a30a6:	4808      	ldr	r0, [pc, #32]	; (80a30c8 <_Z17_fetch_usbserial1v+0x40>)
 80a30a8:	f7ff ff84 	bl	80a2fb4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a30ac:	4620      	mov	r0, r4
 80a30ae:	f7fc ffff 	bl	80a00b0 <__cxa_guard_release>
 80a30b2:	4a06      	ldr	r2, [pc, #24]	; (80a30cc <_Z17_fetch_usbserial1v+0x44>)
 80a30b4:	4906      	ldr	r1, [pc, #24]	; (80a30d0 <_Z17_fetch_usbserial1v+0x48>)
 80a30b6:	4804      	ldr	r0, [pc, #16]	; (80a30c8 <_Z17_fetch_usbserial1v+0x40>)
 80a30b8:	f000 fa9e 	bl	80a35f8 <__aeabi_atexit>
  return _usbserial1;
}
 80a30bc:	4802      	ldr	r0, [pc, #8]	; (80a30c8 <_Z17_fetch_usbserial1v+0x40>)
 80a30be:	b006      	add	sp, #24
 80a30c0:	bd10      	pop	{r4, pc}
 80a30c2:	bf00      	nop
 80a30c4:	2000096c 	.word	0x2000096c
 80a30c8:	200009f4 	.word	0x200009f4
 80a30cc:	20000070 	.word	0x20000070
 80a30d0:	080a2f35 	.word	0x080a2f35

080a30d4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a30d4:	4770      	bx	lr

080a30d6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a30d6:	7441      	strb	r1, [r0, #17]
 80a30d8:	4770      	bx	lr

080a30da <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a30da:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a30dc:	7c00      	ldrb	r0, [r0, #16]
 80a30de:	f7ff f815 	bl	80a210c <HAL_USART_Available_Data_For_Write>
}
 80a30e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a30e6:	bd08      	pop	{r3, pc}

080a30e8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a30e8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a30ea:	7c00      	ldrb	r0, [r0, #16]
 80a30ec:	f7fe ffe6 	bl	80a20bc <HAL_USART_Available_Data>
}
 80a30f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a30f4:	bd08      	pop	{r3, pc}

080a30f6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a30f6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a30f8:	7c00      	ldrb	r0, [r0, #16]
 80a30fa:	f7fe ffef 	bl	80a20dc <HAL_USART_Peek_Data>
}
 80a30fe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3102:	bf28      	it	cs
 80a3104:	f04f 30ff 	movcs.w	r0, #4294967295
 80a3108:	bd08      	pop	{r3, pc}

080a310a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a310a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a310c:	7c00      	ldrb	r0, [r0, #16]
 80a310e:	f7fe ffdd 	bl	80a20cc <HAL_USART_Read_Data>
}
 80a3112:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3116:	bf28      	it	cs
 80a3118:	f04f 30ff 	movcs.w	r0, #4294967295
 80a311c:	bd08      	pop	{r3, pc}

080a311e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a311e:	7c00      	ldrb	r0, [r0, #16]
 80a3120:	f7fe bfe4 	b.w	80a20ec <HAL_USART_Flush_Data>

080a3124 <_ZN11USARTSerialD0Ev>:
 80a3124:	b510      	push	{r4, lr}
 80a3126:	4604      	mov	r4, r0
 80a3128:	2114      	movs	r1, #20
 80a312a:	f000 fa6a 	bl	80a3602 <_ZdlPvj>
 80a312e:	4620      	mov	r0, r4
 80a3130:	bd10      	pop	{r4, pc}

080a3132 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3132:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3134:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a3136:	4604      	mov	r4, r0
 80a3138:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a313a:	b925      	cbnz	r5, 80a3146 <_ZN11USARTSerial5writeEh+0x14>
 80a313c:	7c00      	ldrb	r0, [r0, #16]
 80a313e:	f7fe ffe5 	bl	80a210c <HAL_USART_Available_Data_For_Write>
 80a3142:	2800      	cmp	r0, #0
 80a3144:	dd05      	ble.n	80a3152 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3146:	4631      	mov	r1, r6
 80a3148:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a314a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a314e:	f7fe bfad 	b.w	80a20ac <HAL_USART_Write_Data>
  }
  return 0;
}
 80a3152:	4628      	mov	r0, r5
 80a3154:	bd70      	pop	{r4, r5, r6, pc}
	...

080a3158 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3158:	b510      	push	{r4, lr}
 80a315a:	4604      	mov	r4, r0
 80a315c:	4608      	mov	r0, r1
 80a315e:	4611      	mov	r1, r2
 80a3160:	2200      	movs	r2, #0
 80a3162:	6062      	str	r2, [r4, #4]
 80a3164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3168:	60a2      	str	r2, [r4, #8]
 80a316a:	4a05      	ldr	r2, [pc, #20]	; (80a3180 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a316c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a316e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a3170:	2201      	movs	r2, #1
 80a3172:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a3174:	461a      	mov	r2, r3
 80a3176:	f7fe ff91 	bl	80a209c <HAL_USART_Init>
}
 80a317a:	4620      	mov	r0, r4
 80a317c:	bd10      	pop	{r4, pc}
 80a317e:	bf00      	nop
 80a3180:	080a6538 	.word	0x080a6538

080a3184 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a3184:	7c00      	ldrb	r0, [r0, #16]
 80a3186:	f7fe bfb9 	b.w	80a20fc <HAL_USART_Is_Enabled>
	...

080a318c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a318c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a318e:	4d0c      	ldr	r5, [pc, #48]	; (80a31c0 <_Z22__fetch_global_Serial1v+0x34>)
 80a3190:	6829      	ldr	r1, [r5, #0]
 80a3192:	f011 0401 	ands.w	r4, r1, #1
 80a3196:	d111      	bne.n	80a31bc <_Z22__fetch_global_Serial1v+0x30>
 80a3198:	4628      	mov	r0, r5
 80a319a:	f7fc ff84 	bl	80a00a6 <__cxa_guard_acquire>
 80a319e:	b168      	cbz	r0, 80a31bc <_Z22__fetch_global_Serial1v+0x30>
 80a31a0:	4a08      	ldr	r2, [pc, #32]	; (80a31c4 <_Z22__fetch_global_Serial1v+0x38>)
 80a31a2:	4621      	mov	r1, r4
 80a31a4:	4b08      	ldr	r3, [pc, #32]	; (80a31c8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a31a6:	4809      	ldr	r0, [pc, #36]	; (80a31cc <_Z22__fetch_global_Serial1v+0x40>)
 80a31a8:	f7ff ffd6 	bl	80a3158 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a31ac:	4628      	mov	r0, r5
 80a31ae:	f7fc ff7f 	bl	80a00b0 <__cxa_guard_release>
 80a31b2:	4a07      	ldr	r2, [pc, #28]	; (80a31d0 <_Z22__fetch_global_Serial1v+0x44>)
 80a31b4:	4907      	ldr	r1, [pc, #28]	; (80a31d4 <_Z22__fetch_global_Serial1v+0x48>)
 80a31b6:	4805      	ldr	r0, [pc, #20]	; (80a31cc <_Z22__fetch_global_Serial1v+0x40>)
 80a31b8:	f000 fa1e 	bl	80a35f8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a31bc:	4803      	ldr	r0, [pc, #12]	; (80a31cc <_Z22__fetch_global_Serial1v+0x40>)
 80a31be:	bd38      	pop	{r3, r4, r5, pc}
 80a31c0:	20000ba4 	.word	0x20000ba4
 80a31c4:	20000ba8 	.word	0x20000ba8
 80a31c8:	20000b20 	.word	0x20000b20
 80a31cc:	20000b0c 	.word	0x20000b0c
 80a31d0:	20000070 	.word	0x20000070
 80a31d4:	080a30d5 	.word	0x080a30d5

080a31d8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a31d8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a31da:	6883      	ldr	r3, [r0, #8]
 80a31dc:	4604      	mov	r4, r0
 80a31de:	b90b      	cbnz	r3, 80a31e4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a31e0:	f000 fa11 	bl	80a3606 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a31e4:	68c3      	ldr	r3, [r0, #12]
 80a31e6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a31e8:	68a3      	ldr	r3, [r4, #8]
 80a31ea:	b11b      	cbz	r3, 80a31f4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a31ec:	2203      	movs	r2, #3
 80a31ee:	4621      	mov	r1, r4
 80a31f0:	4620      	mov	r0, r4
 80a31f2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a31f4:	4620      	mov	r0, r4
}
 80a31f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a31fa:	2110      	movs	r1, #16
 80a31fc:	f000 ba01 	b.w	80a3602 <_ZdlPvj>

080a3200 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a3200:	4770      	bx	lr

080a3202 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a3202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3204:	4606      	mov	r6, r0
 80a3206:	4615      	mov	r5, r2
 80a3208:	460c      	mov	r4, r1
 80a320a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a320c:	42bc      	cmp	r4, r7
 80a320e:	d006      	beq.n	80a321e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3210:	6833      	ldr	r3, [r6, #0]
 80a3212:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3216:	689b      	ldr	r3, [r3, #8]
 80a3218:	4630      	mov	r0, r6
 80a321a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a321c:	e7f6      	b.n	80a320c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a321e:	4628      	mov	r0, r5
 80a3220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3222 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a3222:	2200      	movs	r2, #0
 80a3224:	7c00      	ldrb	r0, [r0, #16]
 80a3226:	f7fe bf99 	b.w	80a215c <HAL_I2C_Write_Data>

080a322a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a322a:	2100      	movs	r1, #0
 80a322c:	7c00      	ldrb	r0, [r0, #16]
 80a322e:	f7fe bf9d 	b.w	80a216c <HAL_I2C_Available_Data>

080a3232 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a3232:	2100      	movs	r1, #0
 80a3234:	7c00      	ldrb	r0, [r0, #16]
 80a3236:	f7fe bfa1 	b.w	80a217c <HAL_I2C_Read_Data>

080a323a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a323a:	2100      	movs	r1, #0
 80a323c:	7c00      	ldrb	r0, [r0, #16]
 80a323e:	f7fe bfa5 	b.w	80a218c <HAL_I2C_Peek_Data>

080a3242 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a3242:	2100      	movs	r1, #0
 80a3244:	7c00      	ldrb	r0, [r0, #16]
 80a3246:	f7fe bfa9 	b.w	80a219c <HAL_I2C_Flush_Data>

080a324a <_ZN7TwoWireD0Ev>:
 80a324a:	b510      	push	{r4, lr}
 80a324c:	4604      	mov	r4, r0
 80a324e:	2114      	movs	r1, #20
 80a3250:	f000 f9d7 	bl	80a3602 <_ZdlPvj>
 80a3254:	4620      	mov	r0, r4
 80a3256:	bd10      	pop	{r4, pc}

080a3258 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a3258:	b510      	push	{r4, lr}
 80a325a:	4604      	mov	r4, r0
 80a325c:	4608      	mov	r0, r1
 80a325e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3262:	60a3      	str	r3, [r4, #8]
 80a3264:	4b04      	ldr	r3, [pc, #16]	; (80a3278 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a3266:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a3268:	7420      	strb	r0, [r4, #16]
 80a326a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a326c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a326e:	f7fe ffa5 	bl	80a21bc <HAL_I2C_Init>

}
 80a3272:	4620      	mov	r0, r4
 80a3274:	bd10      	pop	{r4, pc}
 80a3276:	bf00      	nop
 80a3278:	080a6568 	.word	0x080a6568

080a327c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a327c:	2300      	movs	r3, #0
 80a327e:	461a      	mov	r2, r3
 80a3280:	4619      	mov	r1, r3
 80a3282:	7c00      	ldrb	r0, [r0, #16]
 80a3284:	f7fe bf4a 	b.w	80a211c <HAL_I2C_Begin>

080a3288 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a3288:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a328a:	2400      	movs	r4, #0
 80a328c:	7c00      	ldrb	r0, [r0, #16]
 80a328e:	9400      	str	r4, [sp, #0]
 80a3290:	f7fe ff4c 	bl	80a212c <HAL_I2C_Request_Data>
  return result;
}
 80a3294:	b2c0      	uxtb	r0, r0
 80a3296:	b002      	add	sp, #8
 80a3298:	bd10      	pop	{r4, pc}

080a329a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a329a:	2301      	movs	r3, #1
 80a329c:	f7ff bff4 	b.w	80a3288 <_ZN7TwoWire11requestFromEhhh>

080a32a0 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a32a0:	2301      	movs	r3, #1
 80a32a2:	b2d2      	uxtb	r2, r2
 80a32a4:	b2c9      	uxtb	r1, r1
 80a32a6:	f7ff bfef 	b.w	80a3288 <_ZN7TwoWire11requestFromEhhh>

080a32aa <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a32aa:	2200      	movs	r2, #0
 80a32ac:	7c00      	ldrb	r0, [r0, #16]
 80a32ae:	f7fe bf45 	b.w	80a213c <HAL_I2C_Begin_Transmission>

080a32b2 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a32b2:	b2c9      	uxtb	r1, r1
 80a32b4:	f7ff bff9 	b.w	80a32aa <_ZN7TwoWire17beginTransmissionEh>

080a32b8 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a32b8:	2200      	movs	r2, #0
 80a32ba:	7c00      	ldrb	r0, [r0, #16]
 80a32bc:	f7fe bf46 	b.w	80a214c <HAL_I2C_End_Transmission>

080a32c0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a32c0:	2101      	movs	r1, #1
 80a32c2:	f7ff bff9 	b.w	80a32b8 <_ZN7TwoWire15endTransmissionEh>

080a32c6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a32c6:	2100      	movs	r1, #0
 80a32c8:	7c00      	ldrb	r0, [r0, #16]
 80a32ca:	f7fe bf6f 	b.w	80a21ac <HAL_I2C_Is_Enabled>

080a32ce <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a32ce:	2200      	movs	r2, #0
 80a32d0:	4611      	mov	r1, r2
 80a32d2:	6840      	ldr	r0, [r0, #4]
 80a32d4:	f7ff b808 	b.w	80a22e8 <network_ready>

080a32d8 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a32d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a32da:	4616      	mov	r6, r2
 80a32dc:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a32de:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a32e0:	460f      	mov	r7, r1
 80a32e2:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a32e4:	2100      	movs	r1, #0
 80a32e6:	a803      	add	r0, sp, #12
 80a32e8:	f002 fe41 	bl	80a5f6e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a32ec:	4630      	mov	r0, r6
 80a32ee:	f002 fe9c 	bl	80a602a <strlen>
 80a32f2:	2500      	movs	r5, #0
 80a32f4:	9500      	str	r5, [sp, #0]
 80a32f6:	b281      	uxth	r1, r0
 80a32f8:	687b      	ldr	r3, [r7, #4]
 80a32fa:	aa03      	add	r2, sp, #12
 80a32fc:	4630      	mov	r0, r6
 80a32fe:	f7fe ff9f 	bl	80a2240 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3302:	b120      	cbz	r0, 80a330e <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a3304:	4629      	mov	r1, r5
 80a3306:	4620      	mov	r0, r4
 80a3308:	f7ff fdf0 	bl	80a2eec <_ZN9IPAddressC1Em>
 80a330c:	e003      	b.n	80a3316 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a330e:	a903      	add	r1, sp, #12
 80a3310:	4620      	mov	r0, r4
 80a3312:	f7ff fdd9 	bl	80a2ec8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a3316:	4620      	mov	r0, r4
 80a3318:	b009      	add	sp, #36	; 0x24
 80a331a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a331c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a331c:	2200      	movs	r2, #0
 80a331e:	4611      	mov	r1, r2
 80a3320:	6840      	ldr	r0, [r0, #4]
 80a3322:	f7ff b801 	b.w	80a2328 <network_listening>

080a3326 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a3326:	2200      	movs	r2, #0
 80a3328:	4611      	mov	r1, r2
 80a332a:	6840      	ldr	r0, [r0, #4]
 80a332c:	f7ff b80c 	b.w	80a2348 <network_get_listen_timeout>

080a3330 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a3330:	2200      	movs	r2, #0
 80a3332:	6840      	ldr	r0, [r0, #4]
 80a3334:	f7ff b800 	b.w	80a2338 <network_set_listen_timeout>

080a3338 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a3338:	2200      	movs	r2, #0
 80a333a:	f081 0101 	eor.w	r1, r1, #1
 80a333e:	6840      	ldr	r0, [r0, #4]
 80a3340:	f7fe bfea 	b.w	80a2318 <network_listen>

080a3344 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a3344:	2300      	movs	r3, #0
 80a3346:	461a      	mov	r2, r3
 80a3348:	4619      	mov	r1, r3
 80a334a:	6840      	ldr	r0, [r0, #4]
 80a334c:	f7fe bfdc 	b.w	80a2308 <network_off>

080a3350 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a3350:	2200      	movs	r2, #0
 80a3352:	4611      	mov	r1, r2
 80a3354:	6840      	ldr	r0, [r0, #4]
 80a3356:	f7fe bfb7 	b.w	80a22c8 <network_connecting>

080a335a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a335a:	2200      	movs	r2, #0
 80a335c:	2102      	movs	r1, #2
 80a335e:	6840      	ldr	r0, [r0, #4]
 80a3360:	f7fe bfba 	b.w	80a22d8 <network_disconnect>

080a3364 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a3364:	2300      	movs	r3, #0
 80a3366:	461a      	mov	r2, r3
 80a3368:	6840      	ldr	r0, [r0, #4]
 80a336a:	f7fe bfa5 	b.w	80a22b8 <network_connect>
	...

080a3370 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a3370:	4b02      	ldr	r3, [pc, #8]	; (80a337c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a3372:	2204      	movs	r2, #4
 80a3374:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a3376:	4a02      	ldr	r2, [pc, #8]	; (80a3380 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3378:	601a      	str	r2, [r3, #0]
 80a337a:	4770      	bx	lr
 80a337c:	20000c2c 	.word	0x20000c2c
 80a3380:	080a6590 	.word	0x080a6590

080a3384 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a3384:	2300      	movs	r3, #0
 80a3386:	461a      	mov	r2, r3
 80a3388:	6840      	ldr	r0, [r0, #4]
 80a338a:	f7fe bf95 	b.w	80a22b8 <network_connect>

080a338e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a338e:	2200      	movs	r2, #0
 80a3390:	2102      	movs	r1, #2
 80a3392:	6840      	ldr	r0, [r0, #4]
 80a3394:	f7fe bfa0 	b.w	80a22d8 <network_disconnect>

080a3398 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a3398:	2200      	movs	r2, #0
 80a339a:	4611      	mov	r1, r2
 80a339c:	6840      	ldr	r0, [r0, #4]
 80a339e:	f7fe bf93 	b.w	80a22c8 <network_connecting>

080a33a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a33a2:	2200      	movs	r2, #0
 80a33a4:	4611      	mov	r1, r2
 80a33a6:	6840      	ldr	r0, [r0, #4]
 80a33a8:	f7fe bf9e 	b.w	80a22e8 <network_ready>

080a33ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a33ac:	2300      	movs	r3, #0
 80a33ae:	461a      	mov	r2, r3
 80a33b0:	4619      	mov	r1, r3
 80a33b2:	6840      	ldr	r0, [r0, #4]
 80a33b4:	f7fe bfa0 	b.w	80a22f8 <network_on>

080a33b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a33b8:	2300      	movs	r3, #0
 80a33ba:	461a      	mov	r2, r3
 80a33bc:	4619      	mov	r1, r3
 80a33be:	6840      	ldr	r0, [r0, #4]
 80a33c0:	f7fe bfa2 	b.w	80a2308 <network_off>

080a33c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a33c4:	2200      	movs	r2, #0
 80a33c6:	f081 0101 	eor.w	r1, r1, #1
 80a33ca:	6840      	ldr	r0, [r0, #4]
 80a33cc:	f7fe bfa4 	b.w	80a2318 <network_listen>

080a33d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a33d0:	2200      	movs	r2, #0
 80a33d2:	6840      	ldr	r0, [r0, #4]
 80a33d4:	f7fe bfb0 	b.w	80a2338 <network_set_listen_timeout>

080a33d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a33d8:	2200      	movs	r2, #0
 80a33da:	4611      	mov	r1, r2
 80a33dc:	6840      	ldr	r0, [r0, #4]
 80a33de:	f7fe bfb3 	b.w	80a2348 <network_get_listen_timeout>

080a33e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a33e2:	2200      	movs	r2, #0
 80a33e4:	4611      	mov	r1, r2
 80a33e6:	6840      	ldr	r0, [r0, #4]
 80a33e8:	f7fe bf9e 	b.w	80a2328 <network_listening>

080a33ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a33ec:	b570      	push	{r4, r5, r6, lr}
 80a33ee:	4616      	mov	r6, r2
 80a33f0:	b08e      	sub	sp, #56	; 0x38
 80a33f2:	4604      	mov	r4, r0
    IPAddress addr;
 80a33f4:	a808      	add	r0, sp, #32
 80a33f6:	f7ff fd59 	bl	80a2eac <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a33fa:	2211      	movs	r2, #17
 80a33fc:	2100      	movs	r1, #0
 80a33fe:	a803      	add	r0, sp, #12
 80a3400:	f002 fdb5 	bl	80a5f6e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3404:	4630      	mov	r0, r6
 80a3406:	f002 fe10 	bl	80a602a <strlen>
 80a340a:	2500      	movs	r5, #0
 80a340c:	4b0a      	ldr	r3, [pc, #40]	; (80a3438 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a340e:	9500      	str	r5, [sp, #0]
 80a3410:	b281      	uxth	r1, r0
 80a3412:	685b      	ldr	r3, [r3, #4]
 80a3414:	aa03      	add	r2, sp, #12
 80a3416:	4630      	mov	r0, r6
 80a3418:	f7fe ff12 	bl	80a2240 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a341c:	b120      	cbz	r0, 80a3428 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a341e:	4629      	mov	r1, r5
 80a3420:	4620      	mov	r0, r4
 80a3422:	f7ff fd63 	bl	80a2eec <_ZN9IPAddressC1Em>
 80a3426:	e003      	b.n	80a3430 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a3428:	a903      	add	r1, sp, #12
 80a342a:	4620      	mov	r0, r4
 80a342c:	f7ff fd4c 	bl	80a2ec8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a3430:	4620      	mov	r0, r4
 80a3432:	b00e      	add	sp, #56	; 0x38
 80a3434:	bd70      	pop	{r4, r5, r6, pc}
 80a3436:	bf00      	nop
 80a3438:	20000c2c 	.word	0x20000c2c

080a343c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a343c:	4b02      	ldr	r3, [pc, #8]	; (80a3448 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a343e:	4a03      	ldr	r2, [pc, #12]	; (80a344c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a3440:	601a      	str	r2, [r3, #0]
 80a3442:	2200      	movs	r2, #0
 80a3444:	605a      	str	r2, [r3, #4]
 80a3446:	4770      	bx	lr
 80a3448:	20000c34 	.word	0x20000c34
 80a344c:	080a65c4 	.word	0x080a65c4

080a3450 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a3450:	b510      	push	{r4, lr}
 80a3452:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a3454:	480f      	ldr	r0, [pc, #60]	; (80a3494 <pinAvailable+0x44>)
 80a3456:	f7fe ffeb 	bl	80a2430 <_ZN8SPIClass9isEnabledEv>
 80a345a:	b128      	cbz	r0, 80a3468 <pinAvailable+0x18>
 80a345c:	f1a4 030d 	sub.w	r3, r4, #13
 80a3460:	2b02      	cmp	r3, #2
 80a3462:	d801      	bhi.n	80a3468 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a3464:	2000      	movs	r0, #0
 80a3466:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a3468:	f000 f8a6 	bl	80a35b8 <_Z19__fetch_global_Wirev>
 80a346c:	f7ff ff2b 	bl	80a32c6 <_ZN7TwoWire9isEnabledEv>
 80a3470:	b108      	cbz	r0, 80a3476 <pinAvailable+0x26>
 80a3472:	2c01      	cmp	r4, #1
 80a3474:	d9f6      	bls.n	80a3464 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a3476:	f7ff fe89 	bl	80a318c <_Z22__fetch_global_Serial1v>
 80a347a:	f7ff fe83 	bl	80a3184 <_ZN11USARTSerial9isEnabledEv>
 80a347e:	b118      	cbz	r0, 80a3488 <pinAvailable+0x38>
 80a3480:	f1a4 0312 	sub.w	r3, r4, #18
 80a3484:	2b01      	cmp	r3, #1
 80a3486:	d9ed      	bls.n	80a3464 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a3488:	2c17      	cmp	r4, #23
 80a348a:	bf8c      	ite	hi
 80a348c:	2000      	movhi	r0, #0
 80a348e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a3490:	bd10      	pop	{r4, pc}
 80a3492:	bf00      	nop
 80a3494:	20000c3c 	.word	0x20000c3c

080a3498 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3498:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a349a:	b538      	push	{r3, r4, r5, lr}
 80a349c:	4604      	mov	r4, r0
 80a349e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a34a0:	d80a      	bhi.n	80a34b8 <pinMode+0x20>
 80a34a2:	29ff      	cmp	r1, #255	; 0xff
 80a34a4:	d008      	beq.n	80a34b8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a34a6:	f7ff ffd3 	bl	80a3450 <pinAvailable>
 80a34aa:	b128      	cbz	r0, 80a34b8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a34ac:	4629      	mov	r1, r5
 80a34ae:	4620      	mov	r0, r4
}
 80a34b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a34b4:	f7fe bd8a 	b.w	80a1fcc <HAL_Pin_Mode>
 80a34b8:	bd38      	pop	{r3, r4, r5, pc}

080a34ba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a34ba:	b538      	push	{r3, r4, r5, lr}
 80a34bc:	4604      	mov	r4, r0
 80a34be:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a34c0:	f7fe fd8c 	bl	80a1fdc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a34c4:	28ff      	cmp	r0, #255	; 0xff
 80a34c6:	d010      	beq.n	80a34ea <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a34c8:	2806      	cmp	r0, #6
 80a34ca:	d804      	bhi.n	80a34d6 <digitalWrite+0x1c>
 80a34cc:	234d      	movs	r3, #77	; 0x4d
 80a34ce:	fa23 f000 	lsr.w	r0, r3, r0
 80a34d2:	07c3      	lsls	r3, r0, #31
 80a34d4:	d409      	bmi.n	80a34ea <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a34d6:	4620      	mov	r0, r4
 80a34d8:	f7ff ffba 	bl	80a3450 <pinAvailable>
 80a34dc:	b128      	cbz	r0, 80a34ea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a34de:	4629      	mov	r1, r5
 80a34e0:	4620      	mov	r0, r4
}
 80a34e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a34e6:	f7fe bd81 	b.w	80a1fec <HAL_GPIO_Write>
 80a34ea:	bd38      	pop	{r3, r4, r5, pc}

080a34ec <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a34ec:	b510      	push	{r4, lr}
 80a34ee:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a34f0:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a34f2:	bf9c      	itt	ls
 80a34f4:	340a      	addls	r4, #10
 80a34f6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a34f8:	4620      	mov	r0, r4
 80a34fa:	f7ff ffa9 	bl	80a3450 <pinAvailable>
 80a34fe:	b150      	cbz	r0, 80a3516 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a3500:	2103      	movs	r1, #3
 80a3502:	4620      	mov	r0, r4
 80a3504:	f7fe fd5a 	bl	80a1fbc <HAL_Validate_Pin_Function>
 80a3508:	2803      	cmp	r0, #3
 80a350a:	d104      	bne.n	80a3516 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a350c:	4620      	mov	r0, r4
}
 80a350e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a3512:	f7fe bd73 	b.w	80a1ffc <HAL_ADC_Read>
}
 80a3516:	2000      	movs	r0, #0
 80a3518:	bd10      	pop	{r4, pc}
	...

080a351c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a351c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a351e:	4c0c      	ldr	r4, [pc, #48]	; (80a3550 <_GLOBAL__sub_I_SPI+0x34>)
 80a3520:	4e0c      	ldr	r6, [pc, #48]	; (80a3554 <_GLOBAL__sub_I_SPI+0x38>)
 80a3522:	4d0d      	ldr	r5, [pc, #52]	; (80a3558 <_GLOBAL__sub_I_SPI+0x3c>)
 80a3524:	2100      	movs	r1, #0
 80a3526:	4620      	mov	r0, r4
 80a3528:	f7fe ff6e 	bl	80a2408 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a352c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a352e:	4c0b      	ldr	r4, [pc, #44]	; (80a355c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3530:	4632      	mov	r2, r6
 80a3532:	4629      	mov	r1, r5
 80a3534:	f000 f860 	bl	80a35f8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3538:	2101      	movs	r1, #1
 80a353a:	4620      	mov	r0, r4
 80a353c:	f7fe ff64 	bl	80a2408 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3540:	4632      	mov	r2, r6
 80a3542:	4629      	mov	r1, r5
 80a3544:	4620      	mov	r0, r4
 80a3546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a354a:	f000 b855 	b.w	80a35f8 <__aeabi_atexit>
 80a354e:	bf00      	nop
 80a3550:	20000c3c 	.word	0x20000c3c
 80a3554:	20000070 	.word	0x20000070
 80a3558:	080a23f9 	.word	0x080a23f9
 80a355c:	20000c4c 	.word	0x20000c4c

080a3560 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a3560:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a3562:	4c07      	ldr	r4, [pc, #28]	; (80a3580 <_Z21__fetch_global_EEPROMv+0x20>)
 80a3564:	6823      	ldr	r3, [r4, #0]
 80a3566:	07db      	lsls	r3, r3, #31
 80a3568:	d408      	bmi.n	80a357c <_Z21__fetch_global_EEPROMv+0x1c>
 80a356a:	4620      	mov	r0, r4
 80a356c:	f7fc fd9b 	bl	80a00a6 <__cxa_guard_acquire>
 80a3570:	b120      	cbz	r0, 80a357c <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a3572:	f7fe fd73 	bl	80a205c <HAL_EEPROM_Init>
 80a3576:	4620      	mov	r0, r4
 80a3578:	f7fc fd9a 	bl	80a00b0 <__cxa_guard_release>
	return eeprom;
}
 80a357c:	4801      	ldr	r0, [pc, #4]	; (80a3584 <_Z21__fetch_global_EEPROMv+0x24>)
 80a357e:	bd10      	pop	{r4, pc}
 80a3580:	20000c60 	.word	0x20000c60
 80a3584:	20000c64 	.word	0x20000c64

080a3588 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3588:	b513      	push	{r0, r1, r4, lr}
 80a358a:	4c08      	ldr	r4, [pc, #32]	; (80a35ac <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a358c:	2300      	movs	r3, #0
 80a358e:	461a      	mov	r2, r3
 80a3590:	4619      	mov	r1, r3
 80a3592:	9300      	str	r3, [sp, #0]
 80a3594:	4620      	mov	r0, r4
 80a3596:	f7ff fcbf 	bl	80a2f18 <_ZN9IPAddressC1Ehhhh>
 80a359a:	4620      	mov	r0, r4
 80a359c:	4a04      	ldr	r2, [pc, #16]	; (80a35b0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a359e:	4905      	ldr	r1, [pc, #20]	; (80a35b4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a35a0:	b002      	add	sp, #8
 80a35a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a35a6:	f000 b827 	b.w	80a35f8 <__aeabi_atexit>
 80a35aa:	bf00      	nop
 80a35ac:	20000c68 	.word	0x20000c68
 80a35b0:	20000070 	.word	0x20000070
 80a35b4:	080a2e69 	.word	0x080a2e69

080a35b8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a35b8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a35ba:	4d0b      	ldr	r5, [pc, #44]	; (80a35e8 <_Z19__fetch_global_Wirev+0x30>)
 80a35bc:	6829      	ldr	r1, [r5, #0]
 80a35be:	f011 0401 	ands.w	r4, r1, #1
 80a35c2:	d10f      	bne.n	80a35e4 <_Z19__fetch_global_Wirev+0x2c>
 80a35c4:	4628      	mov	r0, r5
 80a35c6:	f7fc fd6e 	bl	80a00a6 <__cxa_guard_acquire>
 80a35ca:	b158      	cbz	r0, 80a35e4 <_Z19__fetch_global_Wirev+0x2c>
 80a35cc:	4621      	mov	r1, r4
 80a35ce:	4807      	ldr	r0, [pc, #28]	; (80a35ec <_Z19__fetch_global_Wirev+0x34>)
 80a35d0:	f7ff fe42 	bl	80a3258 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a35d4:	4628      	mov	r0, r5
 80a35d6:	f7fc fd6b 	bl	80a00b0 <__cxa_guard_release>
 80a35da:	4a05      	ldr	r2, [pc, #20]	; (80a35f0 <_Z19__fetch_global_Wirev+0x38>)
 80a35dc:	4905      	ldr	r1, [pc, #20]	; (80a35f4 <_Z19__fetch_global_Wirev+0x3c>)
 80a35de:	4803      	ldr	r0, [pc, #12]	; (80a35ec <_Z19__fetch_global_Wirev+0x34>)
 80a35e0:	f000 f80a 	bl	80a35f8 <__aeabi_atexit>
	return wire;
}
 80a35e4:	4801      	ldr	r0, [pc, #4]	; (80a35ec <_Z19__fetch_global_Wirev+0x34>)
 80a35e6:	bd38      	pop	{r3, r4, r5, pc}
 80a35e8:	20000c80 	.word	0x20000c80
 80a35ec:	20000c84 	.word	0x20000c84
 80a35f0:	20000070 	.word	0x20000070
 80a35f4:	080a3201 	.word	0x080a3201

080a35f8 <__aeabi_atexit>:
 80a35f8:	460b      	mov	r3, r1
 80a35fa:	4601      	mov	r1, r0
 80a35fc:	4618      	mov	r0, r3
 80a35fe:	f002 bc9d 	b.w	80a5f3c <__cxa_atexit>

080a3602 <_ZdlPvj>:
 80a3602:	f7fc bd4e 	b.w	80a00a2 <_ZdlPv>

080a3606 <_ZSt25__throw_bad_function_callv>:
 80a3606:	b508      	push	{r3, lr}
 80a3608:	f7fe fede 	bl	80a23c8 <abort>

080a360c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a360c:	4b18      	ldr	r3, [pc, #96]	; (80a3670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a360e:	681a      	ldr	r2, [r3, #0]
 80a3610:	07d1      	lsls	r1, r2, #31
 80a3612:	bf5c      	itt	pl
 80a3614:	2201      	movpl	r2, #1
 80a3616:	601a      	strpl	r2, [r3, #0]
 80a3618:	4b16      	ldr	r3, [pc, #88]	; (80a3674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a361a:	681a      	ldr	r2, [r3, #0]
 80a361c:	07d2      	lsls	r2, r2, #31
 80a361e:	bf5c      	itt	pl
 80a3620:	2201      	movpl	r2, #1
 80a3622:	601a      	strpl	r2, [r3, #0]
 80a3624:	4b14      	ldr	r3, [pc, #80]	; (80a3678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3626:	681a      	ldr	r2, [r3, #0]
 80a3628:	07d0      	lsls	r0, r2, #31
 80a362a:	bf5c      	itt	pl
 80a362c:	2201      	movpl	r2, #1
 80a362e:	601a      	strpl	r2, [r3, #0]
 80a3630:	4b12      	ldr	r3, [pc, #72]	; (80a367c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3632:	681a      	ldr	r2, [r3, #0]
 80a3634:	07d1      	lsls	r1, r2, #31
 80a3636:	bf5c      	itt	pl
 80a3638:	2201      	movpl	r2, #1
 80a363a:	601a      	strpl	r2, [r3, #0]
 80a363c:	4b10      	ldr	r3, [pc, #64]	; (80a3680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a363e:	681a      	ldr	r2, [r3, #0]
 80a3640:	07d2      	lsls	r2, r2, #31
 80a3642:	bf5c      	itt	pl
 80a3644:	2201      	movpl	r2, #1
 80a3646:	601a      	strpl	r2, [r3, #0]
 80a3648:	4b0e      	ldr	r3, [pc, #56]	; (80a3684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a364a:	681a      	ldr	r2, [r3, #0]
 80a364c:	07d0      	lsls	r0, r2, #31
 80a364e:	bf5c      	itt	pl
 80a3650:	2201      	movpl	r2, #1
 80a3652:	601a      	strpl	r2, [r3, #0]
 80a3654:	4b0c      	ldr	r3, [pc, #48]	; (80a3688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3656:	681a      	ldr	r2, [r3, #0]
 80a3658:	07d1      	lsls	r1, r2, #31
 80a365a:	bf5c      	itt	pl
 80a365c:	2201      	movpl	r2, #1
 80a365e:	601a      	strpl	r2, [r3, #0]
 80a3660:	4b0a      	ldr	r3, [pc, #40]	; (80a368c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3662:	681a      	ldr	r2, [r3, #0]
 80a3664:	07d2      	lsls	r2, r2, #31
 80a3666:	bf5c      	itt	pl
 80a3668:	2201      	movpl	r2, #1
 80a366a:	601a      	strpl	r2, [r3, #0]
 80a366c:	4770      	bx	lr
 80a366e:	bf00      	nop
 80a3670:	20000cb4 	.word	0x20000cb4
 80a3674:	20000cb0 	.word	0x20000cb0
 80a3678:	20000cac 	.word	0x20000cac
 80a367c:	20000ca8 	.word	0x20000ca8
 80a3680:	20000ca4 	.word	0x20000ca4
 80a3684:	20000ca0 	.word	0x20000ca0
 80a3688:	20000c9c 	.word	0x20000c9c
 80a368c:	20000c98 	.word	0x20000c98

080a3690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a3690:	4b24      	ldr	r3, [pc, #144]	; (80a3724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a3692:	681a      	ldr	r2, [r3, #0]
 80a3694:	07d0      	lsls	r0, r2, #31
 80a3696:	bf5c      	itt	pl
 80a3698:	2201      	movpl	r2, #1
 80a369a:	601a      	strpl	r2, [r3, #0]
 80a369c:	4b22      	ldr	r3, [pc, #136]	; (80a3728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a369e:	681a      	ldr	r2, [r3, #0]
 80a36a0:	07d1      	lsls	r1, r2, #31
 80a36a2:	bf5c      	itt	pl
 80a36a4:	2201      	movpl	r2, #1
 80a36a6:	601a      	strpl	r2, [r3, #0]
 80a36a8:	4b20      	ldr	r3, [pc, #128]	; (80a372c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a36aa:	681a      	ldr	r2, [r3, #0]
 80a36ac:	07d2      	lsls	r2, r2, #31
 80a36ae:	bf5c      	itt	pl
 80a36b0:	2201      	movpl	r2, #1
 80a36b2:	601a      	strpl	r2, [r3, #0]
 80a36b4:	4b1e      	ldr	r3, [pc, #120]	; (80a3730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a36b6:	681a      	ldr	r2, [r3, #0]
 80a36b8:	07d0      	lsls	r0, r2, #31
 80a36ba:	bf5c      	itt	pl
 80a36bc:	2201      	movpl	r2, #1
 80a36be:	601a      	strpl	r2, [r3, #0]
 80a36c0:	4b1c      	ldr	r3, [pc, #112]	; (80a3734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a36c2:	681a      	ldr	r2, [r3, #0]
 80a36c4:	07d1      	lsls	r1, r2, #31
 80a36c6:	bf5c      	itt	pl
 80a36c8:	2201      	movpl	r2, #1
 80a36ca:	601a      	strpl	r2, [r3, #0]
 80a36cc:	4b1a      	ldr	r3, [pc, #104]	; (80a3738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a36ce:	681a      	ldr	r2, [r3, #0]
 80a36d0:	07d2      	lsls	r2, r2, #31
 80a36d2:	bf5c      	itt	pl
 80a36d4:	2201      	movpl	r2, #1
 80a36d6:	601a      	strpl	r2, [r3, #0]
 80a36d8:	4b18      	ldr	r3, [pc, #96]	; (80a373c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a36da:	681a      	ldr	r2, [r3, #0]
 80a36dc:	07d0      	lsls	r0, r2, #31
 80a36de:	bf5c      	itt	pl
 80a36e0:	2201      	movpl	r2, #1
 80a36e2:	601a      	strpl	r2, [r3, #0]
 80a36e4:	4b16      	ldr	r3, [pc, #88]	; (80a3740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a36e6:	681a      	ldr	r2, [r3, #0]
 80a36e8:	07d1      	lsls	r1, r2, #31
 80a36ea:	bf5c      	itt	pl
 80a36ec:	2201      	movpl	r2, #1
 80a36ee:	601a      	strpl	r2, [r3, #0]
 80a36f0:	4b14      	ldr	r3, [pc, #80]	; (80a3744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a36f2:	681a      	ldr	r2, [r3, #0]
 80a36f4:	07d2      	lsls	r2, r2, #31
 80a36f6:	bf5c      	itt	pl
 80a36f8:	2201      	movpl	r2, #1
 80a36fa:	601a      	strpl	r2, [r3, #0]
 80a36fc:	4b12      	ldr	r3, [pc, #72]	; (80a3748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a36fe:	681a      	ldr	r2, [r3, #0]
 80a3700:	07d0      	lsls	r0, r2, #31
 80a3702:	bf5c      	itt	pl
 80a3704:	2201      	movpl	r2, #1
 80a3706:	601a      	strpl	r2, [r3, #0]
 80a3708:	4b10      	ldr	r3, [pc, #64]	; (80a374c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a370a:	681a      	ldr	r2, [r3, #0]
 80a370c:	07d1      	lsls	r1, r2, #31
 80a370e:	bf5c      	itt	pl
 80a3710:	2201      	movpl	r2, #1
 80a3712:	601a      	strpl	r2, [r3, #0]
 80a3714:	4b0e      	ldr	r3, [pc, #56]	; (80a3750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a3716:	681a      	ldr	r2, [r3, #0]
 80a3718:	07d2      	lsls	r2, r2, #31
 80a371a:	bf5c      	itt	pl
 80a371c:	2201      	movpl	r2, #1
 80a371e:	601a      	strpl	r2, [r3, #0]
 80a3720:	4770      	bx	lr
 80a3722:	bf00      	nop
 80a3724:	20000ce4 	.word	0x20000ce4
 80a3728:	20000ce0 	.word	0x20000ce0
 80a372c:	20000cdc 	.word	0x20000cdc
 80a3730:	20000cd8 	.word	0x20000cd8
 80a3734:	20000cd4 	.word	0x20000cd4
 80a3738:	20000cd0 	.word	0x20000cd0
 80a373c:	20000ccc 	.word	0x20000ccc
 80a3740:	20000cc8 	.word	0x20000cc8
 80a3744:	20000cc4 	.word	0x20000cc4
 80a3748:	20000cc0 	.word	0x20000cc0
 80a374c:	20000cbc 	.word	0x20000cbc
 80a3750:	20000cb8 	.word	0x20000cb8

080a3754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a3754:	4b24      	ldr	r3, [pc, #144]	; (80a37e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a3756:	681a      	ldr	r2, [r3, #0]
 80a3758:	07d0      	lsls	r0, r2, #31
 80a375a:	bf5c      	itt	pl
 80a375c:	2201      	movpl	r2, #1
 80a375e:	601a      	strpl	r2, [r3, #0]
 80a3760:	4b22      	ldr	r3, [pc, #136]	; (80a37ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a3762:	681a      	ldr	r2, [r3, #0]
 80a3764:	07d1      	lsls	r1, r2, #31
 80a3766:	bf5c      	itt	pl
 80a3768:	2201      	movpl	r2, #1
 80a376a:	601a      	strpl	r2, [r3, #0]
 80a376c:	4b20      	ldr	r3, [pc, #128]	; (80a37f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a376e:	681a      	ldr	r2, [r3, #0]
 80a3770:	07d2      	lsls	r2, r2, #31
 80a3772:	bf5c      	itt	pl
 80a3774:	2201      	movpl	r2, #1
 80a3776:	601a      	strpl	r2, [r3, #0]
 80a3778:	4b1e      	ldr	r3, [pc, #120]	; (80a37f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a377a:	681a      	ldr	r2, [r3, #0]
 80a377c:	07d0      	lsls	r0, r2, #31
 80a377e:	bf5c      	itt	pl
 80a3780:	2201      	movpl	r2, #1
 80a3782:	601a      	strpl	r2, [r3, #0]
 80a3784:	4b1c      	ldr	r3, [pc, #112]	; (80a37f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a3786:	681a      	ldr	r2, [r3, #0]
 80a3788:	07d1      	lsls	r1, r2, #31
 80a378a:	bf5c      	itt	pl
 80a378c:	2201      	movpl	r2, #1
 80a378e:	601a      	strpl	r2, [r3, #0]
 80a3790:	4b1a      	ldr	r3, [pc, #104]	; (80a37fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a3792:	681a      	ldr	r2, [r3, #0]
 80a3794:	07d2      	lsls	r2, r2, #31
 80a3796:	bf5c      	itt	pl
 80a3798:	2201      	movpl	r2, #1
 80a379a:	601a      	strpl	r2, [r3, #0]
 80a379c:	4b18      	ldr	r3, [pc, #96]	; (80a3800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a379e:	681a      	ldr	r2, [r3, #0]
 80a37a0:	07d0      	lsls	r0, r2, #31
 80a37a2:	bf5c      	itt	pl
 80a37a4:	2201      	movpl	r2, #1
 80a37a6:	601a      	strpl	r2, [r3, #0]
 80a37a8:	4b16      	ldr	r3, [pc, #88]	; (80a3804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a37aa:	681a      	ldr	r2, [r3, #0]
 80a37ac:	07d1      	lsls	r1, r2, #31
 80a37ae:	bf5c      	itt	pl
 80a37b0:	2201      	movpl	r2, #1
 80a37b2:	601a      	strpl	r2, [r3, #0]
 80a37b4:	4b14      	ldr	r3, [pc, #80]	; (80a3808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a37b6:	681a      	ldr	r2, [r3, #0]
 80a37b8:	07d2      	lsls	r2, r2, #31
 80a37ba:	bf5c      	itt	pl
 80a37bc:	2201      	movpl	r2, #1
 80a37be:	601a      	strpl	r2, [r3, #0]
 80a37c0:	4b12      	ldr	r3, [pc, #72]	; (80a380c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a37c2:	681a      	ldr	r2, [r3, #0]
 80a37c4:	07d0      	lsls	r0, r2, #31
 80a37c6:	bf5c      	itt	pl
 80a37c8:	2201      	movpl	r2, #1
 80a37ca:	601a      	strpl	r2, [r3, #0]
 80a37cc:	4b10      	ldr	r3, [pc, #64]	; (80a3810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a37ce:	681a      	ldr	r2, [r3, #0]
 80a37d0:	07d1      	lsls	r1, r2, #31
 80a37d2:	bf5c      	itt	pl
 80a37d4:	2201      	movpl	r2, #1
 80a37d6:	601a      	strpl	r2, [r3, #0]
 80a37d8:	4b0e      	ldr	r3, [pc, #56]	; (80a3814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a37da:	681a      	ldr	r2, [r3, #0]
 80a37dc:	07d2      	lsls	r2, r2, #31
 80a37de:	bf5c      	itt	pl
 80a37e0:	2201      	movpl	r2, #1
 80a37e2:	601a      	strpl	r2, [r3, #0]
 80a37e4:	4770      	bx	lr
 80a37e6:	bf00      	nop
 80a37e8:	20000d14 	.word	0x20000d14
 80a37ec:	20000d10 	.word	0x20000d10
 80a37f0:	20000d0c 	.word	0x20000d0c
 80a37f4:	20000d08 	.word	0x20000d08
 80a37f8:	20000d04 	.word	0x20000d04
 80a37fc:	20000d00 	.word	0x20000d00
 80a3800:	20000cfc 	.word	0x20000cfc
 80a3804:	20000cf8 	.word	0x20000cf8
 80a3808:	20000cf4 	.word	0x20000cf4
 80a380c:	20000cf0 	.word	0x20000cf0
 80a3810:	20000cec 	.word	0x20000cec
 80a3814:	20000ce8 	.word	0x20000ce8

080a3818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3818:	4b18      	ldr	r3, [pc, #96]	; (80a387c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a381a:	681a      	ldr	r2, [r3, #0]
 80a381c:	07d1      	lsls	r1, r2, #31
 80a381e:	bf5c      	itt	pl
 80a3820:	2201      	movpl	r2, #1
 80a3822:	601a      	strpl	r2, [r3, #0]
 80a3824:	4b16      	ldr	r3, [pc, #88]	; (80a3880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3826:	681a      	ldr	r2, [r3, #0]
 80a3828:	07d2      	lsls	r2, r2, #31
 80a382a:	bf5c      	itt	pl
 80a382c:	2201      	movpl	r2, #1
 80a382e:	601a      	strpl	r2, [r3, #0]
 80a3830:	4b14      	ldr	r3, [pc, #80]	; (80a3884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3832:	681a      	ldr	r2, [r3, #0]
 80a3834:	07d0      	lsls	r0, r2, #31
 80a3836:	bf5c      	itt	pl
 80a3838:	2201      	movpl	r2, #1
 80a383a:	601a      	strpl	r2, [r3, #0]
 80a383c:	4b12      	ldr	r3, [pc, #72]	; (80a3888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a383e:	681a      	ldr	r2, [r3, #0]
 80a3840:	07d1      	lsls	r1, r2, #31
 80a3842:	bf5c      	itt	pl
 80a3844:	2201      	movpl	r2, #1
 80a3846:	601a      	strpl	r2, [r3, #0]
 80a3848:	4b10      	ldr	r3, [pc, #64]	; (80a388c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a384a:	681a      	ldr	r2, [r3, #0]
 80a384c:	07d2      	lsls	r2, r2, #31
 80a384e:	bf5c      	itt	pl
 80a3850:	2201      	movpl	r2, #1
 80a3852:	601a      	strpl	r2, [r3, #0]
 80a3854:	4b0e      	ldr	r3, [pc, #56]	; (80a3890 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3856:	681a      	ldr	r2, [r3, #0]
 80a3858:	07d0      	lsls	r0, r2, #31
 80a385a:	bf5c      	itt	pl
 80a385c:	2201      	movpl	r2, #1
 80a385e:	601a      	strpl	r2, [r3, #0]
 80a3860:	4b0c      	ldr	r3, [pc, #48]	; (80a3894 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3862:	681a      	ldr	r2, [r3, #0]
 80a3864:	07d1      	lsls	r1, r2, #31
 80a3866:	bf5c      	itt	pl
 80a3868:	2201      	movpl	r2, #1
 80a386a:	601a      	strpl	r2, [r3, #0]
 80a386c:	4b0a      	ldr	r3, [pc, #40]	; (80a3898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a386e:	681a      	ldr	r2, [r3, #0]
 80a3870:	07d2      	lsls	r2, r2, #31
 80a3872:	bf5c      	itt	pl
 80a3874:	2201      	movpl	r2, #1
 80a3876:	601a      	strpl	r2, [r3, #0]
 80a3878:	4770      	bx	lr
 80a387a:	bf00      	nop
 80a387c:	20000d34 	.word	0x20000d34
 80a3880:	20000d30 	.word	0x20000d30
 80a3884:	20000d2c 	.word	0x20000d2c
 80a3888:	20000d28 	.word	0x20000d28
 80a388c:	20000d24 	.word	0x20000d24
 80a3890:	20000d20 	.word	0x20000d20
 80a3894:	20000d1c 	.word	0x20000d1c
 80a3898:	20000d18 	.word	0x20000d18

080a389c <atan2>:
 80a389c:	f000 b9f4 	b.w	80a3c88 <__ieee754_atan2>

080a38a0 <pow>:
 80a38a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a38a4:	b08d      	sub	sp, #52	; 0x34
 80a38a6:	4606      	mov	r6, r0
 80a38a8:	460f      	mov	r7, r1
 80a38aa:	4614      	mov	r4, r2
 80a38ac:	461d      	mov	r5, r3
 80a38ae:	f000 fab7 	bl	80a3e20 <__ieee754_pow>
 80a38b2:	f8df 9310 	ldr.w	r9, [pc, #784]	; 80a3bc4 <pow+0x324>
 80a38b6:	e9cd 0100 	strd	r0, r1, [sp]
 80a38ba:	f999 8000 	ldrsb.w	r8, [r9]
 80a38be:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a38c2:	d046      	beq.n	80a3952 <pow+0xb2>
 80a38c4:	4622      	mov	r2, r4
 80a38c6:	462b      	mov	r3, r5
 80a38c8:	4620      	mov	r0, r4
 80a38ca:	4629      	mov	r1, r5
 80a38cc:	f001 ffdc 	bl	80a5888 <__aeabi_dcmpun>
 80a38d0:	4683      	mov	fp, r0
 80a38d2:	2800      	cmp	r0, #0
 80a38d4:	d13d      	bne.n	80a3952 <pow+0xb2>
 80a38d6:	4632      	mov	r2, r6
 80a38d8:	463b      	mov	r3, r7
 80a38da:	4630      	mov	r0, r6
 80a38dc:	4639      	mov	r1, r7
 80a38de:	f001 ffd3 	bl	80a5888 <__aeabi_dcmpun>
 80a38e2:	4682      	mov	sl, r0
 80a38e4:	2800      	cmp	r0, #0
 80a38e6:	d174      	bne.n	80a39d2 <pow+0x132>
 80a38e8:	4630      	mov	r0, r6
 80a38ea:	4639      	mov	r1, r7
 80a38ec:	2200      	movs	r2, #0
 80a38ee:	2300      	movs	r3, #0
 80a38f0:	f001 ff98 	bl	80a5824 <__aeabi_dcmpeq>
 80a38f4:	2800      	cmp	r0, #0
 80a38f6:	d033      	beq.n	80a3960 <pow+0xc0>
 80a38f8:	2200      	movs	r2, #0
 80a38fa:	2300      	movs	r3, #0
 80a38fc:	4620      	mov	r0, r4
 80a38fe:	4629      	mov	r1, r5
 80a3900:	f001 ff90 	bl	80a5824 <__aeabi_dcmpeq>
 80a3904:	4683      	mov	fp, r0
 80a3906:	b1b8      	cbz	r0, 80a3938 <pow+0x98>
 80a3908:	4aa9      	ldr	r2, [pc, #676]	; (80a3bb0 <pow+0x310>)
 80a390a:	2301      	movs	r3, #1
 80a390c:	2000      	movs	r0, #0
 80a390e:	2100      	movs	r1, #0
 80a3910:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80a3914:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3918:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a391c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a3920:	9203      	str	r2, [sp, #12]
 80a3922:	9302      	str	r3, [sp, #8]
 80a3924:	f1b8 0f00 	cmp.w	r8, #0
 80a3928:	d06c      	beq.n	80a3a04 <pow+0x164>
 80a392a:	4ba2      	ldr	r3, [pc, #648]	; (80a3bb4 <pow+0x314>)
 80a392c:	2200      	movs	r2, #0
 80a392e:	4610      	mov	r0, r2
 80a3930:	4619      	mov	r1, r3
 80a3932:	b00d      	add	sp, #52	; 0x34
 80a3934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3938:	4620      	mov	r0, r4
 80a393a:	4629      	mov	r1, r5
 80a393c:	f001 fa3a 	bl	80a4db4 <finite>
 80a3940:	b138      	cbz	r0, 80a3952 <pow+0xb2>
 80a3942:	2200      	movs	r2, #0
 80a3944:	2300      	movs	r3, #0
 80a3946:	4620      	mov	r0, r4
 80a3948:	4629      	mov	r1, r5
 80a394a:	f001 ff75 	bl	80a5838 <__aeabi_dcmplt>
 80a394e:	2800      	cmp	r0, #0
 80a3950:	d16a      	bne.n	80a3a28 <pow+0x188>
 80a3952:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3956:	4610      	mov	r0, r2
 80a3958:	4619      	mov	r1, r3
 80a395a:	b00d      	add	sp, #52	; 0x34
 80a395c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3960:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3964:	f001 fa26 	bl	80a4db4 <finite>
 80a3968:	4680      	mov	r8, r0
 80a396a:	2800      	cmp	r0, #0
 80a396c:	d07d      	beq.n	80a3a6a <pow+0x1ca>
 80a396e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3972:	f04f 0a00 	mov.w	sl, #0
 80a3976:	f04f 0b00 	mov.w	fp, #0
 80a397a:	4652      	mov	r2, sl
 80a397c:	465b      	mov	r3, fp
 80a397e:	f001 ff51 	bl	80a5824 <__aeabi_dcmpeq>
 80a3982:	2800      	cmp	r0, #0
 80a3984:	d0e5      	beq.n	80a3952 <pow+0xb2>
 80a3986:	4630      	mov	r0, r6
 80a3988:	4639      	mov	r1, r7
 80a398a:	f001 fa13 	bl	80a4db4 <finite>
 80a398e:	2800      	cmp	r0, #0
 80a3990:	d0df      	beq.n	80a3952 <pow+0xb2>
 80a3992:	4620      	mov	r0, r4
 80a3994:	4629      	mov	r1, r5
 80a3996:	f001 fa0d 	bl	80a4db4 <finite>
 80a399a:	2800      	cmp	r0, #0
 80a399c:	d0d9      	beq.n	80a3952 <pow+0xb2>
 80a399e:	f999 3000 	ldrsb.w	r3, [r9]
 80a39a2:	4883      	ldr	r0, [pc, #524]	; (80a3bb0 <pow+0x310>)
 80a39a4:	2104      	movs	r1, #4
 80a39a6:	2200      	movs	r2, #0
 80a39a8:	2b02      	cmp	r3, #2
 80a39aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a39ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a39b2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a39b6:	9003      	str	r0, [sp, #12]
 80a39b8:	9102      	str	r1, [sp, #8]
 80a39ba:	920a      	str	r2, [sp, #40]	; 0x28
 80a39bc:	d004      	beq.n	80a39c8 <pow+0x128>
 80a39be:	a802      	add	r0, sp, #8
 80a39c0:	f001 f9fe 	bl	80a4dc0 <matherr>
 80a39c4:	2800      	cmp	r0, #0
 80a39c6:	d147      	bne.n	80a3a58 <pow+0x1b8>
 80a39c8:	f7fe fd0e 	bl	80a23e8 <__errno>
 80a39cc:	2322      	movs	r3, #34	; 0x22
 80a39ce:	6003      	str	r3, [r0, #0]
 80a39d0:	e042      	b.n	80a3a58 <pow+0x1b8>
 80a39d2:	2200      	movs	r2, #0
 80a39d4:	2300      	movs	r3, #0
 80a39d6:	4620      	mov	r0, r4
 80a39d8:	4629      	mov	r1, r5
 80a39da:	f001 ff23 	bl	80a5824 <__aeabi_dcmpeq>
 80a39de:	2800      	cmp	r0, #0
 80a39e0:	d0b7      	beq.n	80a3952 <pow+0xb2>
 80a39e2:	4b74      	ldr	r3, [pc, #464]	; (80a3bb4 <pow+0x314>)
 80a39e4:	4872      	ldr	r0, [pc, #456]	; (80a3bb0 <pow+0x310>)
 80a39e6:	2200      	movs	r2, #0
 80a39e8:	2101      	movs	r1, #1
 80a39ea:	f1b8 0f02 	cmp.w	r8, #2
 80a39ee:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a39f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a39f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a39fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a39fe:	9003      	str	r0, [sp, #12]
 80a3a00:	9102      	str	r1, [sp, #8]
 80a3a02:	d0a8      	beq.n	80a3956 <pow+0xb6>
 80a3a04:	a802      	add	r0, sp, #8
 80a3a06:	f001 f9db 	bl	80a4dc0 <matherr>
 80a3a0a:	2800      	cmp	r0, #0
 80a3a0c:	d07e      	beq.n	80a3b0c <pow+0x26c>
 80a3a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3a10:	b343      	cbz	r3, 80a3a64 <pow+0x1c4>
 80a3a12:	f7fe fce9 	bl	80a23e8 <__errno>
 80a3a16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3a1a:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a3a1c:	6001      	str	r1, [r0, #0]
 80a3a1e:	4610      	mov	r0, r2
 80a3a20:	4619      	mov	r1, r3
 80a3a22:	b00d      	add	sp, #52	; 0x34
 80a3a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3a28:	4961      	ldr	r1, [pc, #388]	; (80a3bb0 <pow+0x310>)
 80a3a2a:	f999 3000 	ldrsb.w	r3, [r9]
 80a3a2e:	2201      	movs	r2, #1
 80a3a30:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a3a34:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3a38:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3a3c:	9103      	str	r1, [sp, #12]
 80a3a3e:	9202      	str	r2, [sp, #8]
 80a3a40:	2b00      	cmp	r3, #0
 80a3a42:	d068      	beq.n	80a3b16 <pow+0x276>
 80a3a44:	495c      	ldr	r1, [pc, #368]	; (80a3bb8 <pow+0x318>)
 80a3a46:	2000      	movs	r0, #0
 80a3a48:	2b02      	cmp	r3, #2
 80a3a4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a3a4e:	d166      	bne.n	80a3b1e <pow+0x27e>
 80a3a50:	f7fe fcca 	bl	80a23e8 <__errno>
 80a3a54:	2321      	movs	r3, #33	; 0x21
 80a3a56:	6003      	str	r3, [r0, #0]
 80a3a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3a5a:	b11b      	cbz	r3, 80a3a64 <pow+0x1c4>
 80a3a5c:	f7fe fcc4 	bl	80a23e8 <__errno>
 80a3a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3a62:	6003      	str	r3, [r0, #0]
 80a3a64:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3a68:	e775      	b.n	80a3956 <pow+0xb6>
 80a3a6a:	4630      	mov	r0, r6
 80a3a6c:	4639      	mov	r1, r7
 80a3a6e:	f001 f9a1 	bl	80a4db4 <finite>
 80a3a72:	2800      	cmp	r0, #0
 80a3a74:	f43f af7b 	beq.w	80a396e <pow+0xce>
 80a3a78:	4620      	mov	r0, r4
 80a3a7a:	4629      	mov	r1, r5
 80a3a7c:	f001 f99a 	bl	80a4db4 <finite>
 80a3a80:	2800      	cmp	r0, #0
 80a3a82:	f43f af74 	beq.w	80a396e <pow+0xce>
 80a3a86:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3a8a:	4610      	mov	r0, r2
 80a3a8c:	4619      	mov	r1, r3
 80a3a8e:	f001 fefb 	bl	80a5888 <__aeabi_dcmpun>
 80a3a92:	2800      	cmp	r0, #0
 80a3a94:	d16f      	bne.n	80a3b76 <pow+0x2d6>
 80a3a96:	4b46      	ldr	r3, [pc, #280]	; (80a3bb0 <pow+0x310>)
 80a3a98:	f999 8000 	ldrsb.w	r8, [r9]
 80a3a9c:	9303      	str	r3, [sp, #12]
 80a3a9e:	2303      	movs	r3, #3
 80a3aa0:	900a      	str	r0, [sp, #40]	; 0x28
 80a3aa2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3aa6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3aaa:	9302      	str	r3, [sp, #8]
 80a3aac:	f1b8 0f00 	cmp.w	r8, #0
 80a3ab0:	d13b      	bne.n	80a3b2a <pow+0x28a>
 80a3ab2:	f8df b114 	ldr.w	fp, [pc, #276]	; 80a3bc8 <pow+0x328>
 80a3ab6:	f04f 4a60 	mov.w	sl, #3758096384	; 0xe0000000
 80a3aba:	2200      	movs	r2, #0
 80a3abc:	2300      	movs	r3, #0
 80a3abe:	4630      	mov	r0, r6
 80a3ac0:	4639      	mov	r1, r7
 80a3ac2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a3ac6:	f001 feb7 	bl	80a5838 <__aeabi_dcmplt>
 80a3aca:	2800      	cmp	r0, #0
 80a3acc:	f43f af77 	beq.w	80a39be <pow+0x11e>
 80a3ad0:	2200      	movs	r2, #0
 80a3ad2:	4b3a      	ldr	r3, [pc, #232]	; (80a3bbc <pow+0x31c>)
 80a3ad4:	4620      	mov	r0, r4
 80a3ad6:	4629      	mov	r1, r5
 80a3ad8:	f001 fc3c 	bl	80a5354 <__aeabi_dmul>
 80a3adc:	4604      	mov	r4, r0
 80a3ade:	460d      	mov	r5, r1
 80a3ae0:	f001 f976 	bl	80a4dd0 <rint>
 80a3ae4:	4602      	mov	r2, r0
 80a3ae6:	460b      	mov	r3, r1
 80a3ae8:	4620      	mov	r0, r4
 80a3aea:	4629      	mov	r1, r5
 80a3aec:	f001 fe9a 	bl	80a5824 <__aeabi_dcmpeq>
 80a3af0:	2800      	cmp	r0, #0
 80a3af2:	d13d      	bne.n	80a3b70 <pow+0x2d0>
 80a3af4:	4b32      	ldr	r3, [pc, #200]	; (80a3bc0 <pow+0x320>)
 80a3af6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3afa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3afe:	f999 8000 	ldrsb.w	r8, [r9]
 80a3b02:	f1b8 0f02 	cmp.w	r8, #2
 80a3b06:	f47f af5a 	bne.w	80a39be <pow+0x11e>
 80a3b0a:	e75d      	b.n	80a39c8 <pow+0x128>
 80a3b0c:	f7fe fc6c 	bl	80a23e8 <__errno>
 80a3b10:	2321      	movs	r3, #33	; 0x21
 80a3b12:	6003      	str	r3, [r0, #0]
 80a3b14:	e77b      	b.n	80a3a0e <pow+0x16e>
 80a3b16:	2300      	movs	r3, #0
 80a3b18:	2400      	movs	r4, #0
 80a3b1a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80a3b1e:	a802      	add	r0, sp, #8
 80a3b20:	f001 f94e 	bl	80a4dc0 <matherr>
 80a3b24:	2800      	cmp	r0, #0
 80a3b26:	d197      	bne.n	80a3a58 <pow+0x1b8>
 80a3b28:	e792      	b.n	80a3a50 <pow+0x1b0>
 80a3b2a:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80a3bcc <pow+0x32c>
 80a3b2e:	f04f 0a00 	mov.w	sl, #0
 80a3b32:	2200      	movs	r2, #0
 80a3b34:	2300      	movs	r3, #0
 80a3b36:	4630      	mov	r0, r6
 80a3b38:	4639      	mov	r1, r7
 80a3b3a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a3b3e:	f001 fe7b 	bl	80a5838 <__aeabi_dcmplt>
 80a3b42:	2800      	cmp	r0, #0
 80a3b44:	d0dd      	beq.n	80a3b02 <pow+0x262>
 80a3b46:	2200      	movs	r2, #0
 80a3b48:	4b1c      	ldr	r3, [pc, #112]	; (80a3bbc <pow+0x31c>)
 80a3b4a:	4620      	mov	r0, r4
 80a3b4c:	4629      	mov	r1, r5
 80a3b4e:	f001 fc01 	bl	80a5354 <__aeabi_dmul>
 80a3b52:	4604      	mov	r4, r0
 80a3b54:	460d      	mov	r5, r1
 80a3b56:	f001 f93b 	bl	80a4dd0 <rint>
 80a3b5a:	4602      	mov	r2, r0
 80a3b5c:	460b      	mov	r3, r1
 80a3b5e:	4620      	mov	r0, r4
 80a3b60:	4629      	mov	r1, r5
 80a3b62:	f001 fe5f 	bl	80a5824 <__aeabi_dcmpeq>
 80a3b66:	b918      	cbnz	r0, 80a3b70 <pow+0x2d0>
 80a3b68:	4b13      	ldr	r3, [pc, #76]	; (80a3bb8 <pow+0x318>)
 80a3b6a:	2200      	movs	r2, #0
 80a3b6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3b70:	f999 8000 	ldrsb.w	r8, [r9]
 80a3b74:	e7c5      	b.n	80a3b02 <pow+0x262>
 80a3b76:	4a0e      	ldr	r2, [pc, #56]	; (80a3bb0 <pow+0x310>)
 80a3b78:	f999 9000 	ldrsb.w	r9, [r9]
 80a3b7c:	2301      	movs	r3, #1
 80a3b7e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80a3b82:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3b86:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3b8a:	9203      	str	r2, [sp, #12]
 80a3b8c:	9302      	str	r3, [sp, #8]
 80a3b8e:	f1b9 0f00 	cmp.w	r9, #0
 80a3b92:	d0c0      	beq.n	80a3b16 <pow+0x276>
 80a3b94:	2200      	movs	r2, #0
 80a3b96:	2300      	movs	r3, #0
 80a3b98:	4610      	mov	r0, r2
 80a3b9a:	4619      	mov	r1, r3
 80a3b9c:	f001 fd04 	bl	80a55a8 <__aeabi_ddiv>
 80a3ba0:	f1b9 0f02 	cmp.w	r9, #2
 80a3ba4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a3ba8:	f43f af52 	beq.w	80a3a50 <pow+0x1b0>
 80a3bac:	e7b7      	b.n	80a3b1e <pow+0x27e>
 80a3bae:	bf00      	nop
 80a3bb0:	080a65f0 	.word	0x080a65f0
 80a3bb4:	3ff00000 	.word	0x3ff00000
 80a3bb8:	fff00000 	.word	0xfff00000
 80a3bbc:	3fe00000 	.word	0x3fe00000
 80a3bc0:	c7efffff 	.word	0xc7efffff
 80a3bc4:	20000004 	.word	0x20000004
 80a3bc8:	47efffff 	.word	0x47efffff
 80a3bcc:	7ff00000 	.word	0x7ff00000

080a3bd0 <sqrt>:
 80a3bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3bd4:	b08b      	sub	sp, #44	; 0x2c
 80a3bd6:	4604      	mov	r4, r0
 80a3bd8:	460d      	mov	r5, r1
 80a3bda:	f000 fe83 	bl	80a48e4 <__ieee754_sqrt>
 80a3bde:	4b28      	ldr	r3, [pc, #160]	; (80a3c80 <sqrt+0xb0>)
 80a3be0:	4606      	mov	r6, r0
 80a3be2:	f993 a000 	ldrsb.w	sl, [r3]
 80a3be6:	460f      	mov	r7, r1
 80a3be8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80a3bec:	d012      	beq.n	80a3c14 <sqrt+0x44>
 80a3bee:	4622      	mov	r2, r4
 80a3bf0:	462b      	mov	r3, r5
 80a3bf2:	4620      	mov	r0, r4
 80a3bf4:	4629      	mov	r1, r5
 80a3bf6:	f001 fe47 	bl	80a5888 <__aeabi_dcmpun>
 80a3bfa:	4683      	mov	fp, r0
 80a3bfc:	b950      	cbnz	r0, 80a3c14 <sqrt+0x44>
 80a3bfe:	f04f 0800 	mov.w	r8, #0
 80a3c02:	f04f 0900 	mov.w	r9, #0
 80a3c06:	4620      	mov	r0, r4
 80a3c08:	4629      	mov	r1, r5
 80a3c0a:	4642      	mov	r2, r8
 80a3c0c:	464b      	mov	r3, r9
 80a3c0e:	f001 fe13 	bl	80a5838 <__aeabi_dcmplt>
 80a3c12:	b920      	cbnz	r0, 80a3c1e <sqrt+0x4e>
 80a3c14:	4630      	mov	r0, r6
 80a3c16:	4639      	mov	r1, r7
 80a3c18:	b00b      	add	sp, #44	; 0x2c
 80a3c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3c1e:	4a19      	ldr	r2, [pc, #100]	; (80a3c84 <sqrt+0xb4>)
 80a3c20:	2301      	movs	r3, #1
 80a3c22:	f8cd b020 	str.w	fp, [sp, #32]
 80a3c26:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a3c2a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a3c2e:	9201      	str	r2, [sp, #4]
 80a3c30:	9300      	str	r3, [sp, #0]
 80a3c32:	f1ba 0f00 	cmp.w	sl, #0
 80a3c36:	d015      	beq.n	80a3c64 <sqrt+0x94>
 80a3c38:	4642      	mov	r2, r8
 80a3c3a:	464b      	mov	r3, r9
 80a3c3c:	4640      	mov	r0, r8
 80a3c3e:	4649      	mov	r1, r9
 80a3c40:	f001 fcb2 	bl	80a55a8 <__aeabi_ddiv>
 80a3c44:	f1ba 0f02 	cmp.w	sl, #2
 80a3c48:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a3c4c:	d10c      	bne.n	80a3c68 <sqrt+0x98>
 80a3c4e:	f7fe fbcb 	bl	80a23e8 <__errno>
 80a3c52:	2321      	movs	r3, #33	; 0x21
 80a3c54:	6003      	str	r3, [r0, #0]
 80a3c56:	9b08      	ldr	r3, [sp, #32]
 80a3c58:	b963      	cbnz	r3, 80a3c74 <sqrt+0xa4>
 80a3c5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a3c5e:	b00b      	add	sp, #44	; 0x2c
 80a3c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3c64:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80a3c68:	4668      	mov	r0, sp
 80a3c6a:	f001 f8a9 	bl	80a4dc0 <matherr>
 80a3c6e:	2800      	cmp	r0, #0
 80a3c70:	d1f1      	bne.n	80a3c56 <sqrt+0x86>
 80a3c72:	e7ec      	b.n	80a3c4e <sqrt+0x7e>
 80a3c74:	f7fe fbb8 	bl	80a23e8 <__errno>
 80a3c78:	9b08      	ldr	r3, [sp, #32]
 80a3c7a:	6003      	str	r3, [r0, #0]
 80a3c7c:	e7ed      	b.n	80a3c5a <sqrt+0x8a>
 80a3c7e:	bf00      	nop
 80a3c80:	20000004 	.word	0x20000004
 80a3c84:	080a65f4 	.word	0x080a65f4

080a3c88 <__ieee754_atan2>:
 80a3c88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3c8c:	4254      	negs	r4, r2
 80a3c8e:	4314      	orrs	r4, r2
 80a3c90:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80a3c94:	f8df e180 	ldr.w	lr, [pc, #384]	; 80a3e18 <__ieee754_atan2+0x190>
 80a3c98:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
 80a3c9c:	4574      	cmp	r4, lr
 80a3c9e:	4606      	mov	r6, r0
 80a3ca0:	460d      	mov	r5, r1
 80a3ca2:	d83e      	bhi.n	80a3d22 <__ieee754_atan2+0x9a>
 80a3ca4:	4244      	negs	r4, r0
 80a3ca6:	4304      	orrs	r4, r0
 80a3ca8:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
 80a3cac:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
 80a3cb0:	4574      	cmp	r4, lr
 80a3cb2:	468a      	mov	sl, r1
 80a3cb4:	d835      	bhi.n	80a3d22 <__ieee754_atan2+0x9a>
 80a3cb6:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
 80a3cba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a3cbe:	4314      	orrs	r4, r2
 80a3cc0:	d044      	beq.n	80a3d4c <__ieee754_atan2+0xc4>
 80a3cc2:	179c      	asrs	r4, r3, #30
 80a3cc4:	f004 0402 	and.w	r4, r4, #2
 80a3cc8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80a3ccc:	ea50 010b 	orrs.w	r1, r0, fp
 80a3cd0:	d02f      	beq.n	80a3d32 <__ieee754_atan2+0xaa>
 80a3cd2:	ea52 0109 	orrs.w	r1, r2, r9
 80a3cd6:	d033      	beq.n	80a3d40 <__ieee754_atan2+0xb8>
 80a3cd8:	45f1      	cmp	r9, lr
 80a3cda:	d046      	beq.n	80a3d6a <__ieee754_atan2+0xe2>
 80a3cdc:	45f3      	cmp	fp, lr
 80a3cde:	d02f      	beq.n	80a3d40 <__ieee754_atan2+0xb8>
 80a3ce0:	ebc9 090b 	rsb	r9, r9, fp
 80a3ce4:	ea4f 5929 	mov.w	r9, r9, asr #20
 80a3ce8:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
 80a3cec:	dc34      	bgt.n	80a3d58 <__ieee754_atan2+0xd0>
 80a3cee:	2b00      	cmp	r3, #0
 80a3cf0:	db57      	blt.n	80a3da2 <__ieee754_atan2+0x11a>
 80a3cf2:	4630      	mov	r0, r6
 80a3cf4:	4629      	mov	r1, r5
 80a3cf6:	f001 fc57 	bl	80a55a8 <__aeabi_ddiv>
 80a3cfa:	f001 f857 	bl	80a4dac <fabs>
 80a3cfe:	f000 feb7 	bl	80a4a70 <atan>
 80a3d02:	2c01      	cmp	r4, #1
 80a3d04:	d04a      	beq.n	80a3d9c <__ieee754_atan2+0x114>
 80a3d06:	2c02      	cmp	r4, #2
 80a3d08:	d03b      	beq.n	80a3d82 <__ieee754_atan2+0xfa>
 80a3d0a:	b184      	cbz	r4, 80a3d2e <__ieee754_atan2+0xa6>
 80a3d0c:	a332      	add	r3, pc, #200	; (adr r3, 80a3dd8 <__ieee754_atan2+0x150>)
 80a3d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d12:	f001 f96b 	bl	80a4fec <__aeabi_dsub>
 80a3d16:	a332      	add	r3, pc, #200	; (adr r3, 80a3de0 <__ieee754_atan2+0x158>)
 80a3d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d1c:	f001 f966 	bl	80a4fec <__aeabi_dsub>
 80a3d20:	e005      	b.n	80a3d2e <__ieee754_atan2+0xa6>
 80a3d22:	4610      	mov	r0, r2
 80a3d24:	4619      	mov	r1, r3
 80a3d26:	4632      	mov	r2, r6
 80a3d28:	462b      	mov	r3, r5
 80a3d2a:	f001 f961 	bl	80a4ff0 <__adddf3>
 80a3d2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3d32:	2c02      	cmp	r4, #2
 80a3d34:	d014      	beq.n	80a3d60 <__ieee754_atan2+0xd8>
 80a3d36:	2c03      	cmp	r4, #3
 80a3d38:	d10c      	bne.n	80a3d54 <__ieee754_atan2+0xcc>
 80a3d3a:	482d      	ldr	r0, [pc, #180]	; (80a3df0 <__ieee754_atan2+0x168>)
 80a3d3c:	492d      	ldr	r1, [pc, #180]	; (80a3df4 <__ieee754_atan2+0x16c>)
 80a3d3e:	e7f6      	b.n	80a3d2e <__ieee754_atan2+0xa6>
 80a3d40:	f1ba 0f00 	cmp.w	sl, #0
 80a3d44:	482a      	ldr	r0, [pc, #168]	; (80a3df0 <__ieee754_atan2+0x168>)
 80a3d46:	db0e      	blt.n	80a3d66 <__ieee754_atan2+0xde>
 80a3d48:	492b      	ldr	r1, [pc, #172]	; (80a3df8 <__ieee754_atan2+0x170>)
 80a3d4a:	e7f0      	b.n	80a3d2e <__ieee754_atan2+0xa6>
 80a3d4c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3d50:	f000 be8e 	b.w	80a4a70 <atan>
 80a3d54:	4629      	mov	r1, r5
 80a3d56:	e7ea      	b.n	80a3d2e <__ieee754_atan2+0xa6>
 80a3d58:	a123      	add	r1, pc, #140	; (adr r1, 80a3de8 <__ieee754_atan2+0x160>)
 80a3d5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a3d5e:	e7d0      	b.n	80a3d02 <__ieee754_atan2+0x7a>
 80a3d60:	4823      	ldr	r0, [pc, #140]	; (80a3df0 <__ieee754_atan2+0x168>)
 80a3d62:	4926      	ldr	r1, [pc, #152]	; (80a3dfc <__ieee754_atan2+0x174>)
 80a3d64:	e7e3      	b.n	80a3d2e <__ieee754_atan2+0xa6>
 80a3d66:	4926      	ldr	r1, [pc, #152]	; (80a3e00 <__ieee754_atan2+0x178>)
 80a3d68:	e7e1      	b.n	80a3d2e <__ieee754_atan2+0xa6>
 80a3d6a:	45cb      	cmp	fp, r9
 80a3d6c:	d01f      	beq.n	80a3dae <__ieee754_atan2+0x126>
 80a3d6e:	2c02      	cmp	r4, #2
 80a3d70:	d0f6      	beq.n	80a3d60 <__ieee754_atan2+0xd8>
 80a3d72:	2c03      	cmp	r4, #3
 80a3d74:	d0e1      	beq.n	80a3d3a <__ieee754_atan2+0xb2>
 80a3d76:	2c01      	cmp	r4, #1
 80a3d78:	f04f 0000 	mov.w	r0, #0
 80a3d7c:	d020      	beq.n	80a3dc0 <__ieee754_atan2+0x138>
 80a3d7e:	4601      	mov	r1, r0
 80a3d80:	e7d5      	b.n	80a3d2e <__ieee754_atan2+0xa6>
 80a3d82:	a315      	add	r3, pc, #84	; (adr r3, 80a3dd8 <__ieee754_atan2+0x150>)
 80a3d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d88:	f001 f930 	bl	80a4fec <__aeabi_dsub>
 80a3d8c:	4602      	mov	r2, r0
 80a3d8e:	460b      	mov	r3, r1
 80a3d90:	a113      	add	r1, pc, #76	; (adr r1, 80a3de0 <__ieee754_atan2+0x158>)
 80a3d92:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a3d96:	f001 f929 	bl	80a4fec <__aeabi_dsub>
 80a3d9a:	e7c8      	b.n	80a3d2e <__ieee754_atan2+0xa6>
 80a3d9c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a3da0:	e7c5      	b.n	80a3d2e <__ieee754_atan2+0xa6>
 80a3da2:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
 80a3da6:	daa4      	bge.n	80a3cf2 <__ieee754_atan2+0x6a>
 80a3da8:	2000      	movs	r0, #0
 80a3daa:	2100      	movs	r1, #0
 80a3dac:	e7a9      	b.n	80a3d02 <__ieee754_atan2+0x7a>
 80a3dae:	2c02      	cmp	r4, #2
 80a3db0:	d00e      	beq.n	80a3dd0 <__ieee754_atan2+0x148>
 80a3db2:	2c03      	cmp	r4, #3
 80a3db4:	d009      	beq.n	80a3dca <__ieee754_atan2+0x142>
 80a3db6:	2c01      	cmp	r4, #1
 80a3db8:	480d      	ldr	r0, [pc, #52]	; (80a3df0 <__ieee754_atan2+0x168>)
 80a3dba:	d004      	beq.n	80a3dc6 <__ieee754_atan2+0x13e>
 80a3dbc:	4911      	ldr	r1, [pc, #68]	; (80a3e04 <__ieee754_atan2+0x17c>)
 80a3dbe:	e7b6      	b.n	80a3d2e <__ieee754_atan2+0xa6>
 80a3dc0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a3dc4:	e7b3      	b.n	80a3d2e <__ieee754_atan2+0xa6>
 80a3dc6:	4910      	ldr	r1, [pc, #64]	; (80a3e08 <__ieee754_atan2+0x180>)
 80a3dc8:	e7b1      	b.n	80a3d2e <__ieee754_atan2+0xa6>
 80a3dca:	4810      	ldr	r0, [pc, #64]	; (80a3e0c <__ieee754_atan2+0x184>)
 80a3dcc:	4910      	ldr	r1, [pc, #64]	; (80a3e10 <__ieee754_atan2+0x188>)
 80a3dce:	e7ae      	b.n	80a3d2e <__ieee754_atan2+0xa6>
 80a3dd0:	480e      	ldr	r0, [pc, #56]	; (80a3e0c <__ieee754_atan2+0x184>)
 80a3dd2:	4910      	ldr	r1, [pc, #64]	; (80a3e14 <__ieee754_atan2+0x18c>)
 80a3dd4:	e7ab      	b.n	80a3d2e <__ieee754_atan2+0xa6>
 80a3dd6:	bf00      	nop
 80a3dd8:	33145c07 	.word	0x33145c07
 80a3ddc:	3ca1a626 	.word	0x3ca1a626
 80a3de0:	54442d18 	.word	0x54442d18
 80a3de4:	400921fb 	.word	0x400921fb
 80a3de8:	54442d18 	.word	0x54442d18
 80a3dec:	3ff921fb 	.word	0x3ff921fb
 80a3df0:	54442d18 	.word	0x54442d18
 80a3df4:	c00921fb 	.word	0xc00921fb
 80a3df8:	3ff921fb 	.word	0x3ff921fb
 80a3dfc:	400921fb 	.word	0x400921fb
 80a3e00:	bff921fb 	.word	0xbff921fb
 80a3e04:	3fe921fb 	.word	0x3fe921fb
 80a3e08:	bfe921fb 	.word	0xbfe921fb
 80a3e0c:	7f3321d2 	.word	0x7f3321d2
 80a3e10:	c002d97c 	.word	0xc002d97c
 80a3e14:	4002d97c 	.word	0x4002d97c
 80a3e18:	7ff00000 	.word	0x7ff00000
 80a3e1c:	00000000 	.word	0x00000000

080a3e20 <__ieee754_pow>:
 80a3e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3e24:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 80a3e28:	ea58 0902 	orrs.w	r9, r8, r2
 80a3e2c:	b093      	sub	sp, #76	; 0x4c
 80a3e2e:	d03c      	beq.n	80a3eaa <__ieee754_pow+0x8a>
 80a3e30:	4c71      	ldr	r4, [pc, #452]	; (80a3ff8 <__ieee754_pow+0x1d8>)
 80a3e32:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a3e36:	42a6      	cmp	r6, r4
 80a3e38:	4683      	mov	fp, r0
 80a3e3a:	460d      	mov	r5, r1
 80a3e3c:	dd0c      	ble.n	80a3e58 <__ieee754_pow+0x38>
 80a3e3e:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a3e42:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a3e46:	ea56 000b 	orrs.w	r0, r6, fp
 80a3e4a:	d138      	bne.n	80a3ebe <__ieee754_pow+0x9e>
 80a3e4c:	4683      	mov	fp, r0
 80a3e4e:	496b      	ldr	r1, [pc, #428]	; (80a3ffc <__ieee754_pow+0x1dc>)
 80a3e50:	4658      	mov	r0, fp
 80a3e52:	b013      	add	sp, #76	; 0x4c
 80a3e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3e58:	469a      	mov	sl, r3
 80a3e5a:	4696      	mov	lr, r2
 80a3e5c:	d02b      	beq.n	80a3eb6 <__ieee754_pow+0x96>
 80a3e5e:	45a0      	cmp	r8, r4
 80a3e60:	dced      	bgt.n	80a3e3e <__ieee754_pow+0x1e>
 80a3e62:	4c65      	ldr	r4, [pc, #404]	; (80a3ff8 <__ieee754_pow+0x1d8>)
 80a3e64:	45a0      	cmp	r8, r4
 80a3e66:	d078      	beq.n	80a3f5a <__ieee754_pow+0x13a>
 80a3e68:	2d00      	cmp	r5, #0
 80a3e6a:	460f      	mov	r7, r1
 80a3e6c:	4681      	mov	r9, r0
 80a3e6e:	e9cd 2300 	strd	r2, r3, [sp]
 80a3e72:	db76      	blt.n	80a3f62 <__ieee754_pow+0x142>
 80a3e74:	2400      	movs	r4, #0
 80a3e76:	f1be 0f00 	cmp.w	lr, #0
 80a3e7a:	d127      	bne.n	80a3ecc <__ieee754_pow+0xac>
 80a3e7c:	4b5e      	ldr	r3, [pc, #376]	; (80a3ff8 <__ieee754_pow+0x1d8>)
 80a3e7e:	4598      	cmp	r8, r3
 80a3e80:	f000 808b 	beq.w	80a3f9a <__ieee754_pow+0x17a>
 80a3e84:	4b5d      	ldr	r3, [pc, #372]	; (80a3ffc <__ieee754_pow+0x1dc>)
 80a3e86:	4598      	cmp	r8, r3
 80a3e88:	d052      	beq.n	80a3f30 <__ieee754_pow+0x110>
 80a3e8a:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 80a3e8e:	f000 83c9 	beq.w	80a4624 <__ieee754_pow+0x804>
 80a3e92:	4b5b      	ldr	r3, [pc, #364]	; (80a4000 <__ieee754_pow+0x1e0>)
 80a3e94:	459a      	cmp	sl, r3
 80a3e96:	d119      	bne.n	80a3ecc <__ieee754_pow+0xac>
 80a3e98:	2d00      	cmp	r5, #0
 80a3e9a:	db17      	blt.n	80a3ecc <__ieee754_pow+0xac>
 80a3e9c:	4648      	mov	r0, r9
 80a3e9e:	4639      	mov	r1, r7
 80a3ea0:	b013      	add	sp, #76	; 0x4c
 80a3ea2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3ea6:	f000 bd1d 	b.w	80a48e4 <__ieee754_sqrt>
 80a3eaa:	46cb      	mov	fp, r9
 80a3eac:	4658      	mov	r0, fp
 80a3eae:	4953      	ldr	r1, [pc, #332]	; (80a3ffc <__ieee754_pow+0x1dc>)
 80a3eb0:	b013      	add	sp, #76	; 0x4c
 80a3eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3eb6:	2800      	cmp	r0, #0
 80a3eb8:	d1c1      	bne.n	80a3e3e <__ieee754_pow+0x1e>
 80a3eba:	45b0      	cmp	r8, r6
 80a3ebc:	ddd1      	ble.n	80a3e62 <__ieee754_pow+0x42>
 80a3ebe:	4851      	ldr	r0, [pc, #324]	; (80a4004 <__ieee754_pow+0x1e4>)
 80a3ec0:	b013      	add	sp, #76	; 0x4c
 80a3ec2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3ec6:	f000 bf7d 	b.w	80a4dc4 <nan>
 80a3eca:	2400      	movs	r4, #0
 80a3ecc:	4648      	mov	r0, r9
 80a3ece:	4639      	mov	r1, r7
 80a3ed0:	f000 ff6c 	bl	80a4dac <fabs>
 80a3ed4:	f1bb 0f00 	cmp.w	fp, #0
 80a3ed8:	d01c      	beq.n	80a3f14 <__ieee754_pow+0xf4>
 80a3eda:	0fed      	lsrs	r5, r5, #31
 80a3edc:	3d01      	subs	r5, #1
 80a3ede:	ea54 0305 	orrs.w	r3, r4, r5
 80a3ee2:	d070      	beq.n	80a3fc6 <__ieee754_pow+0x1a6>
 80a3ee4:	4b48      	ldr	r3, [pc, #288]	; (80a4008 <__ieee754_pow+0x1e8>)
 80a3ee6:	4598      	cmp	r8, r3
 80a3ee8:	f340 8094 	ble.w	80a4014 <__ieee754_pow+0x1f4>
 80a3eec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a3ef0:	4598      	cmp	r8, r3
 80a3ef2:	f340 840d 	ble.w	80a4710 <__ieee754_pow+0x8f0>
 80a3ef6:	4b45      	ldr	r3, [pc, #276]	; (80a400c <__ieee754_pow+0x1ec>)
 80a3ef8:	429e      	cmp	r6, r3
 80a3efa:	dd70      	ble.n	80a3fde <__ieee754_pow+0x1be>
 80a3efc:	f1ba 0f00 	cmp.w	sl, #0
 80a3f00:	dd70      	ble.n	80a3fe4 <__ieee754_pow+0x1c4>
 80a3f02:	a33b      	add	r3, pc, #236	; (adr r3, 80a3ff0 <__ieee754_pow+0x1d0>)
 80a3f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f08:	4610      	mov	r0, r2
 80a3f0a:	4619      	mov	r1, r3
 80a3f0c:	f001 fa22 	bl	80a5354 <__aeabi_dmul>
 80a3f10:	4683      	mov	fp, r0
 80a3f12:	e79d      	b.n	80a3e50 <__ieee754_pow+0x30>
 80a3f14:	b126      	cbz	r6, 80a3f20 <__ieee754_pow+0x100>
 80a3f16:	4b39      	ldr	r3, [pc, #228]	; (80a3ffc <__ieee754_pow+0x1dc>)
 80a3f18:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80a3f1c:	429a      	cmp	r2, r3
 80a3f1e:	d1dc      	bne.n	80a3eda <__ieee754_pow+0xba>
 80a3f20:	f1ba 0f00 	cmp.w	sl, #0
 80a3f24:	f2c0 83b7 	blt.w	80a4696 <__ieee754_pow+0x876>
 80a3f28:	2d00      	cmp	r5, #0
 80a3f2a:	db08      	blt.n	80a3f3e <__ieee754_pow+0x11e>
 80a3f2c:	4683      	mov	fp, r0
 80a3f2e:	e78f      	b.n	80a3e50 <__ieee754_pow+0x30>
 80a3f30:	f1ba 0f00 	cmp.w	sl, #0
 80a3f34:	f2c0 845e 	blt.w	80a47f4 <__ieee754_pow+0x9d4>
 80a3f38:	46cb      	mov	fp, r9
 80a3f3a:	4639      	mov	r1, r7
 80a3f3c:	e788      	b.n	80a3e50 <__ieee754_pow+0x30>
 80a3f3e:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a3f42:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a3f46:	ea56 0304 	orrs.w	r3, r6, r4
 80a3f4a:	f000 8483 	beq.w	80a4854 <__ieee754_pow+0xa34>
 80a3f4e:	2c01      	cmp	r4, #1
 80a3f50:	d1ec      	bne.n	80a3f2c <__ieee754_pow+0x10c>
 80a3f52:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a3f56:	4683      	mov	fp, r0
 80a3f58:	e77a      	b.n	80a3e50 <__ieee754_pow+0x30>
 80a3f5a:	f1be 0f00 	cmp.w	lr, #0
 80a3f5e:	d083      	beq.n	80a3e68 <__ieee754_pow+0x48>
 80a3f60:	e76d      	b.n	80a3e3e <__ieee754_pow+0x1e>
 80a3f62:	4b2b      	ldr	r3, [pc, #172]	; (80a4010 <__ieee754_pow+0x1f0>)
 80a3f64:	4598      	cmp	r8, r3
 80a3f66:	dc2c      	bgt.n	80a3fc2 <__ieee754_pow+0x1a2>
 80a3f68:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80a3f6c:	4598      	cmp	r8, r3
 80a3f6e:	dd81      	ble.n	80a3e74 <__ieee754_pow+0x54>
 80a3f70:	ea4f 5328 	mov.w	r3, r8, asr #20
 80a3f74:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3f78:	2b14      	cmp	r3, #20
 80a3f7a:	f340 8453 	ble.w	80a4824 <__ieee754_pow+0xa04>
 80a3f7e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80a3f82:	fa2e f203 	lsr.w	r2, lr, r3
 80a3f86:	fa02 f303 	lsl.w	r3, r2, r3
 80a3f8a:	459e      	cmp	lr, r3
 80a3f8c:	f47f af72 	bne.w	80a3e74 <__ieee754_pow+0x54>
 80a3f90:	f002 0201 	and.w	r2, r2, #1
 80a3f94:	f1c2 0402 	rsb	r4, r2, #2
 80a3f98:	e76d      	b.n	80a3e76 <__ieee754_pow+0x56>
 80a3f9a:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
 80a3f9e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80a3fa2:	ea53 030b 	orrs.w	r3, r3, fp
 80a3fa6:	f000 833a 	beq.w	80a461e <__ieee754_pow+0x7fe>
 80a3faa:	4b18      	ldr	r3, [pc, #96]	; (80a400c <__ieee754_pow+0x1ec>)
 80a3fac:	429e      	cmp	r6, r3
 80a3fae:	f340 8367 	ble.w	80a4680 <__ieee754_pow+0x860>
 80a3fb2:	f1ba 0f00 	cmp.w	sl, #0
 80a3fb6:	db15      	blt.n	80a3fe4 <__ieee754_pow+0x1c4>
 80a3fb8:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a3fbc:	469b      	mov	fp, r3
 80a3fbe:	4621      	mov	r1, r4
 80a3fc0:	e746      	b.n	80a3e50 <__ieee754_pow+0x30>
 80a3fc2:	2402      	movs	r4, #2
 80a3fc4:	e757      	b.n	80a3e76 <__ieee754_pow+0x56>
 80a3fc6:	464a      	mov	r2, r9
 80a3fc8:	4648      	mov	r0, r9
 80a3fca:	463b      	mov	r3, r7
 80a3fcc:	4639      	mov	r1, r7
 80a3fce:	f001 f80d 	bl	80a4fec <__aeabi_dsub>
 80a3fd2:	4602      	mov	r2, r0
 80a3fd4:	460b      	mov	r3, r1
 80a3fd6:	f001 fae7 	bl	80a55a8 <__aeabi_ddiv>
 80a3fda:	4683      	mov	fp, r0
 80a3fdc:	e738      	b.n	80a3e50 <__ieee754_pow+0x30>
 80a3fde:	f1ba 0f00 	cmp.w	sl, #0
 80a3fe2:	db8e      	blt.n	80a3f02 <__ieee754_pow+0xe2>
 80a3fe4:	f04f 0b00 	mov.w	fp, #0
 80a3fe8:	4659      	mov	r1, fp
 80a3fea:	e731      	b.n	80a3e50 <__ieee754_pow+0x30>
 80a3fec:	f3af 8000 	nop.w
 80a3ff0:	8800759c 	.word	0x8800759c
 80a3ff4:	7e37e43c 	.word	0x7e37e43c
 80a3ff8:	7ff00000 	.word	0x7ff00000
 80a3ffc:	3ff00000 	.word	0x3ff00000
 80a4000:	3fe00000 	.word	0x3fe00000
 80a4004:	080a65f8 	.word	0x080a65f8
 80a4008:	41e00000 	.word	0x41e00000
 80a400c:	3fefffff 	.word	0x3fefffff
 80a4010:	433fffff 	.word	0x433fffff
 80a4014:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 80a4018:	f04f 0200 	mov.w	r2, #0
 80a401c:	da05      	bge.n	80a402a <__ieee754_pow+0x20a>
 80a401e:	4bd0      	ldr	r3, [pc, #832]	; (80a4360 <__ieee754_pow+0x540>)
 80a4020:	f001 f998 	bl	80a5354 <__aeabi_dmul>
 80a4024:	460e      	mov	r6, r1
 80a4026:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80a402a:	f8df e344 	ldr.w	lr, [pc, #836]	; 80a4370 <__ieee754_pow+0x550>
 80a402e:	1533      	asrs	r3, r6, #20
 80a4030:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80a4034:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a4038:	f046 577f 	orr.w	r7, r6, #1069547520	; 0x3fc00000
 80a403c:	4576      	cmp	r6, lr
 80a403e:	eb03 0a02 	add.w	sl, r3, r2
 80a4042:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80a4046:	f340 83c9 	ble.w	80a47dc <__ieee754_pow+0x9bc>
 80a404a:	4bc6      	ldr	r3, [pc, #792]	; (80a4364 <__ieee754_pow+0x544>)
 80a404c:	2200      	movs	r2, #0
 80a404e:	429e      	cmp	r6, r3
 80a4050:	f340 8404 	ble.w	80a485c <__ieee754_pow+0xa3c>
 80a4054:	2300      	movs	r3, #0
 80a4056:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a405a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a405e:	4bc2      	ldr	r3, [pc, #776]	; (80a4368 <__ieee754_pow+0x548>)
 80a4060:	2200      	movs	r2, #0
 80a4062:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a4066:	f10a 0a01 	add.w	sl, sl, #1
 80a406a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80a406e:	2600      	movs	r6, #0
 80a4070:	4639      	mov	r1, r7
 80a4072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a4076:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a407a:	f000 ffb7 	bl	80a4fec <__aeabi_dsub>
 80a407e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a4082:	4680      	mov	r8, r0
 80a4084:	4689      	mov	r9, r1
 80a4086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a408a:	f000 ffb1 	bl	80a4ff0 <__adddf3>
 80a408e:	4602      	mov	r2, r0
 80a4090:	460b      	mov	r3, r1
 80a4092:	2000      	movs	r0, #0
 80a4094:	49b4      	ldr	r1, [pc, #720]	; (80a4368 <__ieee754_pow+0x548>)
 80a4096:	f001 fa87 	bl	80a55a8 <__aeabi_ddiv>
 80a409a:	460a      	mov	r2, r1
 80a409c:	4601      	mov	r1, r0
 80a409e:	4613      	mov	r3, r2
 80a40a0:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80a40a4:	4602      	mov	r2, r0
 80a40a6:	4649      	mov	r1, r9
 80a40a8:	4640      	mov	r0, r8
 80a40aa:	f001 f953 	bl	80a5354 <__aeabi_dmul>
 80a40ae:	468c      	mov	ip, r1
 80a40b0:	4683      	mov	fp, r0
 80a40b2:	107b      	asrs	r3, r7, #1
 80a40b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a40b8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a40bc:	1999      	adds	r1, r3, r6
 80a40be:	2000      	movs	r0, #0
 80a40c0:	e9cd bc04 	strd	fp, ip, [sp, #16]
 80a40c4:	4606      	mov	r6, r0
 80a40c6:	460f      	mov	r7, r1
 80a40c8:	f04f 0b00 	mov.w	fp, #0
 80a40cc:	4661      	mov	r1, ip
 80a40ce:	4658      	mov	r0, fp
 80a40d0:	4632      	mov	r2, r6
 80a40d2:	463b      	mov	r3, r7
 80a40d4:	e9cd bc10 	strd	fp, ip, [sp, #64]	; 0x40
 80a40d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a40dc:	f001 f93a 	bl	80a5354 <__aeabi_dmul>
 80a40e0:	4602      	mov	r2, r0
 80a40e2:	460b      	mov	r3, r1
 80a40e4:	4640      	mov	r0, r8
 80a40e6:	4649      	mov	r1, r9
 80a40e8:	f000 ff80 	bl	80a4fec <__aeabi_dsub>
 80a40ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a40f0:	4680      	mov	r8, r0
 80a40f2:	4689      	mov	r9, r1
 80a40f4:	4630      	mov	r0, r6
 80a40f6:	4639      	mov	r1, r7
 80a40f8:	f000 ff78 	bl	80a4fec <__aeabi_dsub>
 80a40fc:	4602      	mov	r2, r0
 80a40fe:	460b      	mov	r3, r1
 80a4100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a4104:	f000 ff72 	bl	80a4fec <__aeabi_dsub>
 80a4108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a410c:	f001 f922 	bl	80a5354 <__aeabi_dmul>
 80a4110:	4602      	mov	r2, r0
 80a4112:	460b      	mov	r3, r1
 80a4114:	4640      	mov	r0, r8
 80a4116:	4649      	mov	r1, r9
 80a4118:	f000 ff68 	bl	80a4fec <__aeabi_dsub>
 80a411c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a4120:	f001 f918 	bl	80a5354 <__aeabi_dmul>
 80a4124:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 80a4128:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a412c:	463a      	mov	r2, r7
 80a412e:	4643      	mov	r3, r8
 80a4130:	4638      	mov	r0, r7
 80a4132:	4641      	mov	r1, r8
 80a4134:	f001 f90e 	bl	80a5354 <__aeabi_dmul>
 80a4138:	a377      	add	r3, pc, #476	; (adr r3, 80a4318 <__ieee754_pow+0x4f8>)
 80a413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a413e:	4606      	mov	r6, r0
 80a4140:	460f      	mov	r7, r1
 80a4142:	f001 f907 	bl	80a5354 <__aeabi_dmul>
 80a4146:	a376      	add	r3, pc, #472	; (adr r3, 80a4320 <__ieee754_pow+0x500>)
 80a4148:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a414c:	f000 ff50 	bl	80a4ff0 <__adddf3>
 80a4150:	4632      	mov	r2, r6
 80a4152:	463b      	mov	r3, r7
 80a4154:	f001 f8fe 	bl	80a5354 <__aeabi_dmul>
 80a4158:	a373      	add	r3, pc, #460	; (adr r3, 80a4328 <__ieee754_pow+0x508>)
 80a415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a415e:	f000 ff47 	bl	80a4ff0 <__adddf3>
 80a4162:	4632      	mov	r2, r6
 80a4164:	463b      	mov	r3, r7
 80a4166:	f001 f8f5 	bl	80a5354 <__aeabi_dmul>
 80a416a:	a371      	add	r3, pc, #452	; (adr r3, 80a4330 <__ieee754_pow+0x510>)
 80a416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4170:	f000 ff3e 	bl	80a4ff0 <__adddf3>
 80a4174:	4632      	mov	r2, r6
 80a4176:	463b      	mov	r3, r7
 80a4178:	f001 f8ec 	bl	80a5354 <__aeabi_dmul>
 80a417c:	a36e      	add	r3, pc, #440	; (adr r3, 80a4338 <__ieee754_pow+0x518>)
 80a417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4182:	f000 ff35 	bl	80a4ff0 <__adddf3>
 80a4186:	4632      	mov	r2, r6
 80a4188:	463b      	mov	r3, r7
 80a418a:	f001 f8e3 	bl	80a5354 <__aeabi_dmul>
 80a418e:	a36c      	add	r3, pc, #432	; (adr r3, 80a4340 <__ieee754_pow+0x520>)
 80a4190:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4194:	f000 ff2c 	bl	80a4ff0 <__adddf3>
 80a4198:	4632      	mov	r2, r6
 80a419a:	4680      	mov	r8, r0
 80a419c:	4689      	mov	r9, r1
 80a419e:	463b      	mov	r3, r7
 80a41a0:	4630      	mov	r0, r6
 80a41a2:	4639      	mov	r1, r7
 80a41a4:	f001 f8d6 	bl	80a5354 <__aeabi_dmul>
 80a41a8:	4602      	mov	r2, r0
 80a41aa:	460b      	mov	r3, r1
 80a41ac:	4640      	mov	r0, r8
 80a41ae:	4649      	mov	r1, r9
 80a41b0:	f001 f8d0 	bl	80a5354 <__aeabi_dmul>
 80a41b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a41b8:	4606      	mov	r6, r0
 80a41ba:	460f      	mov	r7, r1
 80a41bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a41c0:	f000 ff16 	bl	80a4ff0 <__adddf3>
 80a41c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a41c8:	f001 f8c4 	bl	80a5354 <__aeabi_dmul>
 80a41cc:	4632      	mov	r2, r6
 80a41ce:	463b      	mov	r3, r7
 80a41d0:	f000 ff0e 	bl	80a4ff0 <__adddf3>
 80a41d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80a41d8:	4680      	mov	r8, r0
 80a41da:	4689      	mov	r9, r1
 80a41dc:	4632      	mov	r2, r6
 80a41de:	463b      	mov	r3, r7
 80a41e0:	4630      	mov	r0, r6
 80a41e2:	4639      	mov	r1, r7
 80a41e4:	f001 f8b6 	bl	80a5354 <__aeabi_dmul>
 80a41e8:	2200      	movs	r2, #0
 80a41ea:	4b60      	ldr	r3, [pc, #384]	; (80a436c <__ieee754_pow+0x54c>)
 80a41ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a41f0:	f000 fefe 	bl	80a4ff0 <__adddf3>
 80a41f4:	4642      	mov	r2, r8
 80a41f6:	464b      	mov	r3, r9
 80a41f8:	f000 fefa 	bl	80a4ff0 <__adddf3>
 80a41fc:	e9dd bc10 	ldrd	fp, ip, [sp, #64]	; 0x40
 80a4200:	460f      	mov	r7, r1
 80a4202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a4206:	465a      	mov	r2, fp
 80a4208:	463b      	mov	r3, r7
 80a420a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 80a420e:	465e      	mov	r6, fp
 80a4210:	f001 f8a0 	bl	80a5354 <__aeabi_dmul>
 80a4214:	2200      	movs	r2, #0
 80a4216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a421a:	4b54      	ldr	r3, [pc, #336]	; (80a436c <__ieee754_pow+0x54c>)
 80a421c:	4630      	mov	r0, r6
 80a421e:	4639      	mov	r1, r7
 80a4220:	f000 fee4 	bl	80a4fec <__aeabi_dsub>
 80a4224:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a4228:	f000 fee0 	bl	80a4fec <__aeabi_dsub>
 80a422c:	4602      	mov	r2, r0
 80a422e:	460b      	mov	r3, r1
 80a4230:	4640      	mov	r0, r8
 80a4232:	4649      	mov	r1, r9
 80a4234:	f000 feda 	bl	80a4fec <__aeabi_dsub>
 80a4238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a423c:	f001 f88a 	bl	80a5354 <__aeabi_dmul>
 80a4240:	4632      	mov	r2, r6
 80a4242:	4680      	mov	r8, r0
 80a4244:	4689      	mov	r9, r1
 80a4246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a424a:	463b      	mov	r3, r7
 80a424c:	f001 f882 	bl	80a5354 <__aeabi_dmul>
 80a4250:	4602      	mov	r2, r0
 80a4252:	460b      	mov	r3, r1
 80a4254:	4640      	mov	r0, r8
 80a4256:	4649      	mov	r1, r9
 80a4258:	f000 feca 	bl	80a4ff0 <__adddf3>
 80a425c:	4680      	mov	r8, r0
 80a425e:	4689      	mov	r9, r1
 80a4260:	4602      	mov	r2, r0
 80a4262:	460b      	mov	r3, r1
 80a4264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a4268:	f000 fec2 	bl	80a4ff0 <__adddf3>
 80a426c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
 80a4270:	a335      	add	r3, pc, #212	; (adr r3, 80a4348 <__ieee754_pow+0x528>)
 80a4272:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4276:	4658      	mov	r0, fp
 80a4278:	e9cd bc06 	strd	fp, ip, [sp, #24]
 80a427c:	465e      	mov	r6, fp
 80a427e:	460f      	mov	r7, r1
 80a4280:	f001 f868 	bl	80a5354 <__aeabi_dmul>
 80a4284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4288:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a428c:	4630      	mov	r0, r6
 80a428e:	4639      	mov	r1, r7
 80a4290:	f000 feac 	bl	80a4fec <__aeabi_dsub>
 80a4294:	4602      	mov	r2, r0
 80a4296:	460b      	mov	r3, r1
 80a4298:	4640      	mov	r0, r8
 80a429a:	4649      	mov	r1, r9
 80a429c:	f000 fea6 	bl	80a4fec <__aeabi_dsub>
 80a42a0:	a32b      	add	r3, pc, #172	; (adr r3, 80a4350 <__ieee754_pow+0x530>)
 80a42a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a42a6:	f001 f855 	bl	80a5354 <__aeabi_dmul>
 80a42aa:	a32b      	add	r3, pc, #172	; (adr r3, 80a4358 <__ieee754_pow+0x538>)
 80a42ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a42b0:	4680      	mov	r8, r0
 80a42b2:	4689      	mov	r9, r1
 80a42b4:	4630      	mov	r0, r6
 80a42b6:	4639      	mov	r1, r7
 80a42b8:	f001 f84c 	bl	80a5354 <__aeabi_dmul>
 80a42bc:	4602      	mov	r2, r0
 80a42be:	460b      	mov	r3, r1
 80a42c0:	4640      	mov	r0, r8
 80a42c2:	4649      	mov	r1, r9
 80a42c4:	f000 fe94 	bl	80a4ff0 <__adddf3>
 80a42c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80a42cc:	f000 fe90 	bl	80a4ff0 <__adddf3>
 80a42d0:	4680      	mov	r8, r0
 80a42d2:	4650      	mov	r0, sl
 80a42d4:	4689      	mov	r9, r1
 80a42d6:	f000 ffd7 	bl	80a5288 <__aeabi_i2d>
 80a42da:	4606      	mov	r6, r0
 80a42dc:	460f      	mov	r7, r1
 80a42de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a42e2:	4642      	mov	r2, r8
 80a42e4:	464b      	mov	r3, r9
 80a42e6:	f000 fe83 	bl	80a4ff0 <__adddf3>
 80a42ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a42ee:	f000 fe7f 	bl	80a4ff0 <__adddf3>
 80a42f2:	4632      	mov	r2, r6
 80a42f4:	463b      	mov	r3, r7
 80a42f6:	f000 fe7b 	bl	80a4ff0 <__adddf3>
 80a42fa:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80a42fe:	4632      	mov	r2, r6
 80a4300:	4658      	mov	r0, fp
 80a4302:	463b      	mov	r3, r7
 80a4304:	46da      	mov	sl, fp
 80a4306:	468b      	mov	fp, r1
 80a4308:	f000 fe70 	bl	80a4fec <__aeabi_dsub>
 80a430c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a4310:	e030      	b.n	80a4374 <__ieee754_pow+0x554>
 80a4312:	bf00      	nop
 80a4314:	f3af 8000 	nop.w
 80a4318:	4a454eef 	.word	0x4a454eef
 80a431c:	3fca7e28 	.word	0x3fca7e28
 80a4320:	93c9db65 	.word	0x93c9db65
 80a4324:	3fcd864a 	.word	0x3fcd864a
 80a4328:	a91d4101 	.word	0xa91d4101
 80a432c:	3fd17460 	.word	0x3fd17460
 80a4330:	518f264d 	.word	0x518f264d
 80a4334:	3fd55555 	.word	0x3fd55555
 80a4338:	db6fabff 	.word	0xdb6fabff
 80a433c:	3fdb6db6 	.word	0x3fdb6db6
 80a4340:	33333303 	.word	0x33333303
 80a4344:	3fe33333 	.word	0x3fe33333
 80a4348:	e0000000 	.word	0xe0000000
 80a434c:	3feec709 	.word	0x3feec709
 80a4350:	dc3a03fd 	.word	0xdc3a03fd
 80a4354:	3feec709 	.word	0x3feec709
 80a4358:	145b01f5 	.word	0x145b01f5
 80a435c:	be3e2fe0 	.word	0xbe3e2fe0
 80a4360:	43400000 	.word	0x43400000
 80a4364:	000bb679 	.word	0x000bb679
 80a4368:	3ff00000 	.word	0x3ff00000
 80a436c:	40080000 	.word	0x40080000
 80a4370:	0003988e 	.word	0x0003988e
 80a4374:	f000 fe3a 	bl	80a4fec <__aeabi_dsub>
 80a4378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a437c:	f000 fe36 	bl	80a4fec <__aeabi_dsub>
 80a4380:	4602      	mov	r2, r0
 80a4382:	460b      	mov	r3, r1
 80a4384:	4640      	mov	r0, r8
 80a4386:	4649      	mov	r1, r9
 80a4388:	f000 fe30 	bl	80a4fec <__aeabi_dsub>
 80a438c:	4680      	mov	r8, r0
 80a438e:	4689      	mov	r9, r1
 80a4390:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a4394:	3c01      	subs	r4, #1
 80a4396:	ea54 0305 	orrs.w	r3, r4, r5
 80a439a:	bf14      	ite	ne
 80a439c:	4cd6      	ldrne	r4, [pc, #856]	; (80a46f8 <__ieee754_pow+0x8d8>)
 80a439e:	4cd7      	ldreq	r4, [pc, #860]	; (80a46fc <__ieee754_pow+0x8dc>)
 80a43a0:	2300      	movs	r3, #0
 80a43a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a43a6:	460b      	mov	r3, r1
 80a43a8:	4614      	mov	r4, r2
 80a43aa:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a43ae:	2300      	movs	r3, #0
 80a43b0:	9302      	str	r3, [sp, #8]
 80a43b2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80a43b6:	4608      	mov	r0, r1
 80a43b8:	462b      	mov	r3, r5
 80a43ba:	4611      	mov	r1, r2
 80a43bc:	4622      	mov	r2, r4
 80a43be:	f000 fe15 	bl	80a4fec <__aeabi_dsub>
 80a43c2:	4652      	mov	r2, sl
 80a43c4:	465b      	mov	r3, fp
 80a43c6:	f000 ffc5 	bl	80a5354 <__aeabi_dmul>
 80a43ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a43ce:	4606      	mov	r6, r0
 80a43d0:	460f      	mov	r7, r1
 80a43d2:	4640      	mov	r0, r8
 80a43d4:	4649      	mov	r1, r9
 80a43d6:	f000 ffbd 	bl	80a5354 <__aeabi_dmul>
 80a43da:	4602      	mov	r2, r0
 80a43dc:	460b      	mov	r3, r1
 80a43de:	4630      	mov	r0, r6
 80a43e0:	4639      	mov	r1, r7
 80a43e2:	f000 fe05 	bl	80a4ff0 <__adddf3>
 80a43e6:	4606      	mov	r6, r0
 80a43e8:	460f      	mov	r7, r1
 80a43ea:	4622      	mov	r2, r4
 80a43ec:	462b      	mov	r3, r5
 80a43ee:	4650      	mov	r0, sl
 80a43f0:	4659      	mov	r1, fp
 80a43f2:	e9cd 6700 	strd	r6, r7, [sp]
 80a43f6:	f000 ffad 	bl	80a5354 <__aeabi_dmul>
 80a43fa:	460b      	mov	r3, r1
 80a43fc:	4602      	mov	r2, r0
 80a43fe:	4680      	mov	r8, r0
 80a4400:	4689      	mov	r9, r1
 80a4402:	4630      	mov	r0, r6
 80a4404:	4639      	mov	r1, r7
 80a4406:	f000 fdf3 	bl	80a4ff0 <__adddf3>
 80a440a:	4bbd      	ldr	r3, [pc, #756]	; (80a4700 <__ieee754_pow+0x8e0>)
 80a440c:	4606      	mov	r6, r0
 80a440e:	4299      	cmp	r1, r3
 80a4410:	460d      	mov	r5, r1
 80a4412:	460c      	mov	r4, r1
 80a4414:	f340 810e 	ble.w	80a4634 <__ieee754_pow+0x814>
 80a4418:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a441c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a4420:	4303      	orrs	r3, r0
 80a4422:	f040 81f0 	bne.w	80a4806 <__ieee754_pow+0x9e6>
 80a4426:	a3a0      	add	r3, pc, #640	; (adr r3, 80a46a8 <__ieee754_pow+0x888>)
 80a4428:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a442c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4430:	f000 fdde 	bl	80a4ff0 <__adddf3>
 80a4434:	4642      	mov	r2, r8
 80a4436:	4682      	mov	sl, r0
 80a4438:	468b      	mov	fp, r1
 80a443a:	464b      	mov	r3, r9
 80a443c:	4630      	mov	r0, r6
 80a443e:	4629      	mov	r1, r5
 80a4440:	f000 fdd4 	bl	80a4fec <__aeabi_dsub>
 80a4444:	4602      	mov	r2, r0
 80a4446:	460b      	mov	r3, r1
 80a4448:	4650      	mov	r0, sl
 80a444a:	4659      	mov	r1, fp
 80a444c:	f001 fa12 	bl	80a5874 <__aeabi_dcmpgt>
 80a4450:	2800      	cmp	r0, #0
 80a4452:	f040 81d8 	bne.w	80a4806 <__ieee754_pow+0x9e6>
 80a4456:	462f      	mov	r7, r5
 80a4458:	153b      	asrs	r3, r7, #20
 80a445a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a445e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a4462:	fa42 f303 	asr.w	r3, r2, r3
 80a4466:	4423      	add	r3, r4
 80a4468:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a446c:	4ea5      	ldr	r6, [pc, #660]	; (80a4704 <__ieee754_pow+0x8e4>)
 80a446e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a4472:	4116      	asrs	r6, r2
 80a4474:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 80a4478:	2000      	movs	r0, #0
 80a447a:	f1c2 0514 	rsb	r5, r2, #20
 80a447e:	ea23 0106 	bic.w	r1, r3, r6
 80a4482:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 80a4486:	4602      	mov	r2, r0
 80a4488:	460b      	mov	r3, r1
 80a448a:	2c00      	cmp	r4, #0
 80a448c:	fa4b fb05 	asr.w	fp, fp, r5
 80a4490:	4640      	mov	r0, r8
 80a4492:	4649      	mov	r1, r9
 80a4494:	bfb8      	it	lt
 80a4496:	f1cb 0b00 	rsblt	fp, fp, #0
 80a449a:	f000 fda7 	bl	80a4fec <__aeabi_dsub>
 80a449e:	4602      	mov	r2, r0
 80a44a0:	460b      	mov	r3, r1
 80a44a2:	4680      	mov	r8, r0
 80a44a4:	4689      	mov	r9, r1
 80a44a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a44aa:	f000 fda1 	bl	80a4ff0 <__adddf3>
 80a44ae:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 80a44b2:	2400      	movs	r4, #0
 80a44b4:	a37e      	add	r3, pc, #504	; (adr r3, 80a46b0 <__ieee754_pow+0x890>)
 80a44b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a44ba:	4620      	mov	r0, r4
 80a44bc:	460d      	mov	r5, r1
 80a44be:	f000 ff49 	bl	80a5354 <__aeabi_dmul>
 80a44c2:	4642      	mov	r2, r8
 80a44c4:	4606      	mov	r6, r0
 80a44c6:	460f      	mov	r7, r1
 80a44c8:	464b      	mov	r3, r9
 80a44ca:	4620      	mov	r0, r4
 80a44cc:	4629      	mov	r1, r5
 80a44ce:	f000 fd8d 	bl	80a4fec <__aeabi_dsub>
 80a44d2:	4602      	mov	r2, r0
 80a44d4:	460b      	mov	r3, r1
 80a44d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a44da:	f000 fd87 	bl	80a4fec <__aeabi_dsub>
 80a44de:	a376      	add	r3, pc, #472	; (adr r3, 80a46b8 <__ieee754_pow+0x898>)
 80a44e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a44e4:	f000 ff36 	bl	80a5354 <__aeabi_dmul>
 80a44e8:	a375      	add	r3, pc, #468	; (adr r3, 80a46c0 <__ieee754_pow+0x8a0>)
 80a44ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a44ee:	4680      	mov	r8, r0
 80a44f0:	4689      	mov	r9, r1
 80a44f2:	4620      	mov	r0, r4
 80a44f4:	4629      	mov	r1, r5
 80a44f6:	f000 ff2d 	bl	80a5354 <__aeabi_dmul>
 80a44fa:	4602      	mov	r2, r0
 80a44fc:	460b      	mov	r3, r1
 80a44fe:	4640      	mov	r0, r8
 80a4500:	4649      	mov	r1, r9
 80a4502:	f000 fd75 	bl	80a4ff0 <__adddf3>
 80a4506:	4680      	mov	r8, r0
 80a4508:	4689      	mov	r9, r1
 80a450a:	4602      	mov	r2, r0
 80a450c:	460b      	mov	r3, r1
 80a450e:	4630      	mov	r0, r6
 80a4510:	4639      	mov	r1, r7
 80a4512:	f000 fd6d 	bl	80a4ff0 <__adddf3>
 80a4516:	4632      	mov	r2, r6
 80a4518:	463b      	mov	r3, r7
 80a451a:	4604      	mov	r4, r0
 80a451c:	460d      	mov	r5, r1
 80a451e:	f000 fd65 	bl	80a4fec <__aeabi_dsub>
 80a4522:	4602      	mov	r2, r0
 80a4524:	460b      	mov	r3, r1
 80a4526:	4640      	mov	r0, r8
 80a4528:	4649      	mov	r1, r9
 80a452a:	f000 fd5f 	bl	80a4fec <__aeabi_dsub>
 80a452e:	4622      	mov	r2, r4
 80a4530:	4680      	mov	r8, r0
 80a4532:	4689      	mov	r9, r1
 80a4534:	462b      	mov	r3, r5
 80a4536:	4620      	mov	r0, r4
 80a4538:	4629      	mov	r1, r5
 80a453a:	f000 ff0b 	bl	80a5354 <__aeabi_dmul>
 80a453e:	a362      	add	r3, pc, #392	; (adr r3, 80a46c8 <__ieee754_pow+0x8a8>)
 80a4540:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4544:	4606      	mov	r6, r0
 80a4546:	460f      	mov	r7, r1
 80a4548:	f000 ff04 	bl	80a5354 <__aeabi_dmul>
 80a454c:	a360      	add	r3, pc, #384	; (adr r3, 80a46d0 <__ieee754_pow+0x8b0>)
 80a454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4552:	f000 fd4b 	bl	80a4fec <__aeabi_dsub>
 80a4556:	4632      	mov	r2, r6
 80a4558:	463b      	mov	r3, r7
 80a455a:	f000 fefb 	bl	80a5354 <__aeabi_dmul>
 80a455e:	a35e      	add	r3, pc, #376	; (adr r3, 80a46d8 <__ieee754_pow+0x8b8>)
 80a4560:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4564:	f000 fd44 	bl	80a4ff0 <__adddf3>
 80a4568:	4632      	mov	r2, r6
 80a456a:	463b      	mov	r3, r7
 80a456c:	f000 fef2 	bl	80a5354 <__aeabi_dmul>
 80a4570:	a35b      	add	r3, pc, #364	; (adr r3, 80a46e0 <__ieee754_pow+0x8c0>)
 80a4572:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4576:	f000 fd39 	bl	80a4fec <__aeabi_dsub>
 80a457a:	4632      	mov	r2, r6
 80a457c:	463b      	mov	r3, r7
 80a457e:	f000 fee9 	bl	80a5354 <__aeabi_dmul>
 80a4582:	a359      	add	r3, pc, #356	; (adr r3, 80a46e8 <__ieee754_pow+0x8c8>)
 80a4584:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4588:	f000 fd32 	bl	80a4ff0 <__adddf3>
 80a458c:	4632      	mov	r2, r6
 80a458e:	463b      	mov	r3, r7
 80a4590:	f000 fee0 	bl	80a5354 <__aeabi_dmul>
 80a4594:	4602      	mov	r2, r0
 80a4596:	460b      	mov	r3, r1
 80a4598:	4620      	mov	r0, r4
 80a459a:	4629      	mov	r1, r5
 80a459c:	f000 fd26 	bl	80a4fec <__aeabi_dsub>
 80a45a0:	4606      	mov	r6, r0
 80a45a2:	460f      	mov	r7, r1
 80a45a4:	4602      	mov	r2, r0
 80a45a6:	460b      	mov	r3, r1
 80a45a8:	4620      	mov	r0, r4
 80a45aa:	4629      	mov	r1, r5
 80a45ac:	f000 fed2 	bl	80a5354 <__aeabi_dmul>
 80a45b0:	2200      	movs	r2, #0
 80a45b2:	e9cd 0100 	strd	r0, r1, [sp]
 80a45b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a45ba:	4630      	mov	r0, r6
 80a45bc:	4639      	mov	r1, r7
 80a45be:	f000 fd15 	bl	80a4fec <__aeabi_dsub>
 80a45c2:	4602      	mov	r2, r0
 80a45c4:	460b      	mov	r3, r1
 80a45c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a45ca:	f000 ffed 	bl	80a55a8 <__aeabi_ddiv>
 80a45ce:	4642      	mov	r2, r8
 80a45d0:	4606      	mov	r6, r0
 80a45d2:	460f      	mov	r7, r1
 80a45d4:	464b      	mov	r3, r9
 80a45d6:	4620      	mov	r0, r4
 80a45d8:	4629      	mov	r1, r5
 80a45da:	f000 febb 	bl	80a5354 <__aeabi_dmul>
 80a45de:	4642      	mov	r2, r8
 80a45e0:	464b      	mov	r3, r9
 80a45e2:	f000 fd05 	bl	80a4ff0 <__adddf3>
 80a45e6:	4602      	mov	r2, r0
 80a45e8:	460b      	mov	r3, r1
 80a45ea:	4630      	mov	r0, r6
 80a45ec:	4639      	mov	r1, r7
 80a45ee:	f000 fcfd 	bl	80a4fec <__aeabi_dsub>
 80a45f2:	4622      	mov	r2, r4
 80a45f4:	462b      	mov	r3, r5
 80a45f6:	f000 fcf9 	bl	80a4fec <__aeabi_dsub>
 80a45fa:	4602      	mov	r2, r0
 80a45fc:	460b      	mov	r3, r1
 80a45fe:	2000      	movs	r0, #0
 80a4600:	493d      	ldr	r1, [pc, #244]	; (80a46f8 <__ieee754_pow+0x8d8>)
 80a4602:	f000 fcf3 	bl	80a4fec <__aeabi_dsub>
 80a4606:	448a      	add	sl, r1
 80a4608:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 80a460c:	f2c0 8137 	blt.w	80a487e <__ieee754_pow+0xa5e>
 80a4610:	4651      	mov	r1, sl
 80a4612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a4616:	f000 fe9d 	bl	80a5354 <__aeabi_dmul>
 80a461a:	4683      	mov	fp, r0
 80a461c:	e418      	b.n	80a3e50 <__ieee754_pow+0x30>
 80a461e:	46f3      	mov	fp, lr
 80a4620:	4935      	ldr	r1, [pc, #212]	; (80a46f8 <__ieee754_pow+0x8d8>)
 80a4622:	e415      	b.n	80a3e50 <__ieee754_pow+0x30>
 80a4624:	464a      	mov	r2, r9
 80a4626:	4648      	mov	r0, r9
 80a4628:	463b      	mov	r3, r7
 80a462a:	4639      	mov	r1, r7
 80a462c:	f000 fe92 	bl	80a5354 <__aeabi_dmul>
 80a4630:	4683      	mov	fp, r0
 80a4632:	e40d      	b.n	80a3e50 <__ieee754_pow+0x30>
 80a4634:	4b34      	ldr	r3, [pc, #208]	; (80a4708 <__ieee754_pow+0x8e8>)
 80a4636:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a463a:	429f      	cmp	r7, r3
 80a463c:	f340 8101 	ble.w	80a4842 <__ieee754_pow+0xa22>
 80a4640:	4b32      	ldr	r3, [pc, #200]	; (80a470c <__ieee754_pow+0x8ec>)
 80a4642:	440b      	add	r3, r1
 80a4644:	4303      	orrs	r3, r0
 80a4646:	d10c      	bne.n	80a4662 <__ieee754_pow+0x842>
 80a4648:	4642      	mov	r2, r8
 80a464a:	464b      	mov	r3, r9
 80a464c:	f000 fcce 	bl	80a4fec <__aeabi_dsub>
 80a4650:	4602      	mov	r2, r0
 80a4652:	460b      	mov	r3, r1
 80a4654:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4658:	f001 f8f8 	bl	80a584c <__aeabi_dcmple>
 80a465c:	2800      	cmp	r0, #0
 80a465e:	f43f aefb 	beq.w	80a4458 <__ieee754_pow+0x638>
 80a4662:	a323      	add	r3, pc, #140	; (adr r3, 80a46f0 <__ieee754_pow+0x8d0>)
 80a4664:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4668:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a466c:	f000 fe72 	bl	80a5354 <__aeabi_dmul>
 80a4670:	a31f      	add	r3, pc, #124	; (adr r3, 80a46f0 <__ieee754_pow+0x8d0>)
 80a4672:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4676:	f000 fe6d 	bl	80a5354 <__aeabi_dmul>
 80a467a:	4683      	mov	fp, r0
 80a467c:	f7ff bbe8 	b.w	80a3e50 <__ieee754_pow+0x30>
 80a4680:	f1ba 0f00 	cmp.w	sl, #0
 80a4684:	f6bf acae 	bge.w	80a3fe4 <__ieee754_pow+0x1c4>
 80a4688:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a468c:	469b      	mov	fp, r3
 80a468e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a4692:	f7ff bbdd 	b.w	80a3e50 <__ieee754_pow+0x30>
 80a4696:	4602      	mov	r2, r0
 80a4698:	460b      	mov	r3, r1
 80a469a:	2000      	movs	r0, #0
 80a469c:	4916      	ldr	r1, [pc, #88]	; (80a46f8 <__ieee754_pow+0x8d8>)
 80a469e:	f000 ff83 	bl	80a55a8 <__aeabi_ddiv>
 80a46a2:	e441      	b.n	80a3f28 <__ieee754_pow+0x108>
 80a46a4:	f3af 8000 	nop.w
 80a46a8:	652b82fe 	.word	0x652b82fe
 80a46ac:	3c971547 	.word	0x3c971547
 80a46b0:	00000000 	.word	0x00000000
 80a46b4:	3fe62e43 	.word	0x3fe62e43
 80a46b8:	fefa39ef 	.word	0xfefa39ef
 80a46bc:	3fe62e42 	.word	0x3fe62e42
 80a46c0:	0ca86c39 	.word	0x0ca86c39
 80a46c4:	be205c61 	.word	0xbe205c61
 80a46c8:	72bea4d0 	.word	0x72bea4d0
 80a46cc:	3e663769 	.word	0x3e663769
 80a46d0:	c5d26bf1 	.word	0xc5d26bf1
 80a46d4:	3ebbbd41 	.word	0x3ebbbd41
 80a46d8:	af25de2c 	.word	0xaf25de2c
 80a46dc:	3f11566a 	.word	0x3f11566a
 80a46e0:	16bebd93 	.word	0x16bebd93
 80a46e4:	3f66c16c 	.word	0x3f66c16c
 80a46e8:	5555553e 	.word	0x5555553e
 80a46ec:	3fc55555 	.word	0x3fc55555
 80a46f0:	c2f8f359 	.word	0xc2f8f359
 80a46f4:	01a56e1f 	.word	0x01a56e1f
 80a46f8:	3ff00000 	.word	0x3ff00000
 80a46fc:	bff00000 	.word	0xbff00000
 80a4700:	408fffff 	.word	0x408fffff
 80a4704:	000fffff 	.word	0x000fffff
 80a4708:	4090cbff 	.word	0x4090cbff
 80a470c:	3f6f3400 	.word	0x3f6f3400
 80a4710:	4b6f      	ldr	r3, [pc, #444]	; (80a48d0 <__ieee754_pow+0xab0>)
 80a4712:	429e      	cmp	r6, r3
 80a4714:	f77f ac63 	ble.w	80a3fde <__ieee754_pow+0x1be>
 80a4718:	4b6e      	ldr	r3, [pc, #440]	; (80a48d4 <__ieee754_pow+0xab4>)
 80a471a:	429e      	cmp	r6, r3
 80a471c:	f73f abee 	bgt.w	80a3efc <__ieee754_pow+0xdc>
 80a4720:	2200      	movs	r2, #0
 80a4722:	4b6c      	ldr	r3, [pc, #432]	; (80a48d4 <__ieee754_pow+0xab4>)
 80a4724:	f000 fc62 	bl	80a4fec <__aeabi_dsub>
 80a4728:	a35b      	add	r3, pc, #364	; (adr r3, 80a4898 <__ieee754_pow+0xa78>)
 80a472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a472e:	4606      	mov	r6, r0
 80a4730:	460f      	mov	r7, r1
 80a4732:	f000 fe0f 	bl	80a5354 <__aeabi_dmul>
 80a4736:	a35a      	add	r3, pc, #360	; (adr r3, 80a48a0 <__ieee754_pow+0xa80>)
 80a4738:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a473c:	4680      	mov	r8, r0
 80a473e:	4689      	mov	r9, r1
 80a4740:	4630      	mov	r0, r6
 80a4742:	4639      	mov	r1, r7
 80a4744:	f000 fe06 	bl	80a5354 <__aeabi_dmul>
 80a4748:	2200      	movs	r2, #0
 80a474a:	4682      	mov	sl, r0
 80a474c:	468b      	mov	fp, r1
 80a474e:	4b62      	ldr	r3, [pc, #392]	; (80a48d8 <__ieee754_pow+0xab8>)
 80a4750:	4630      	mov	r0, r6
 80a4752:	4639      	mov	r1, r7
 80a4754:	f000 fdfe 	bl	80a5354 <__aeabi_dmul>
 80a4758:	4602      	mov	r2, r0
 80a475a:	460b      	mov	r3, r1
 80a475c:	a152      	add	r1, pc, #328	; (adr r1, 80a48a8 <__ieee754_pow+0xa88>)
 80a475e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4762:	f000 fc43 	bl	80a4fec <__aeabi_dsub>
 80a4766:	4632      	mov	r2, r6
 80a4768:	463b      	mov	r3, r7
 80a476a:	f000 fdf3 	bl	80a5354 <__aeabi_dmul>
 80a476e:	4602      	mov	r2, r0
 80a4770:	460b      	mov	r3, r1
 80a4772:	2000      	movs	r0, #0
 80a4774:	4959      	ldr	r1, [pc, #356]	; (80a48dc <__ieee754_pow+0xabc>)
 80a4776:	f000 fc39 	bl	80a4fec <__aeabi_dsub>
 80a477a:	4632      	mov	r2, r6
 80a477c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a4780:	463b      	mov	r3, r7
 80a4782:	4630      	mov	r0, r6
 80a4784:	4639      	mov	r1, r7
 80a4786:	f000 fde5 	bl	80a5354 <__aeabi_dmul>
 80a478a:	4602      	mov	r2, r0
 80a478c:	460b      	mov	r3, r1
 80a478e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a4792:	f000 fddf 	bl	80a5354 <__aeabi_dmul>
 80a4796:	a346      	add	r3, pc, #280	; (adr r3, 80a48b0 <__ieee754_pow+0xa90>)
 80a4798:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a479c:	f000 fdda 	bl	80a5354 <__aeabi_dmul>
 80a47a0:	4602      	mov	r2, r0
 80a47a2:	460b      	mov	r3, r1
 80a47a4:	4650      	mov	r0, sl
 80a47a6:	4659      	mov	r1, fp
 80a47a8:	f000 fc20 	bl	80a4fec <__aeabi_dsub>
 80a47ac:	4602      	mov	r2, r0
 80a47ae:	460b      	mov	r3, r1
 80a47b0:	4606      	mov	r6, r0
 80a47b2:	460f      	mov	r7, r1
 80a47b4:	4640      	mov	r0, r8
 80a47b6:	4649      	mov	r1, r9
 80a47b8:	f000 fc1a 	bl	80a4ff0 <__adddf3>
 80a47bc:	4642      	mov	r2, r8
 80a47be:	464b      	mov	r3, r9
 80a47c0:	2000      	movs	r0, #0
 80a47c2:	4682      	mov	sl, r0
 80a47c4:	468b      	mov	fp, r1
 80a47c6:	f000 fc11 	bl	80a4fec <__aeabi_dsub>
 80a47ca:	4602      	mov	r2, r0
 80a47cc:	460b      	mov	r3, r1
 80a47ce:	4630      	mov	r0, r6
 80a47d0:	4639      	mov	r1, r7
 80a47d2:	f000 fc0b 	bl	80a4fec <__aeabi_dsub>
 80a47d6:	4680      	mov	r8, r0
 80a47d8:	4689      	mov	r9, r1
 80a47da:	e5d9      	b.n	80a4390 <__ieee754_pow+0x570>
 80a47dc:	2200      	movs	r2, #0
 80a47de:	2300      	movs	r3, #0
 80a47e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a47e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a47e8:	4b3a      	ldr	r3, [pc, #232]	; (80a48d4 <__ieee754_pow+0xab4>)
 80a47ea:	2200      	movs	r2, #0
 80a47ec:	2600      	movs	r6, #0
 80a47ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a47f2:	e43d      	b.n	80a4070 <__ieee754_pow+0x250>
 80a47f4:	464a      	mov	r2, r9
 80a47f6:	463b      	mov	r3, r7
 80a47f8:	2000      	movs	r0, #0
 80a47fa:	4936      	ldr	r1, [pc, #216]	; (80a48d4 <__ieee754_pow+0xab4>)
 80a47fc:	f000 fed4 	bl	80a55a8 <__aeabi_ddiv>
 80a4800:	4683      	mov	fp, r0
 80a4802:	f7ff bb25 	b.w	80a3e50 <__ieee754_pow+0x30>
 80a4806:	a32c      	add	r3, pc, #176	; (adr r3, 80a48b8 <__ieee754_pow+0xa98>)
 80a4808:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a480c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4810:	f000 fda0 	bl	80a5354 <__aeabi_dmul>
 80a4814:	a328      	add	r3, pc, #160	; (adr r3, 80a48b8 <__ieee754_pow+0xa98>)
 80a4816:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a481a:	f000 fd9b 	bl	80a5354 <__aeabi_dmul>
 80a481e:	4683      	mov	fp, r0
 80a4820:	f7ff bb16 	b.w	80a3e50 <__ieee754_pow+0x30>
 80a4824:	f1be 0f00 	cmp.w	lr, #0
 80a4828:	f47f ab4f 	bne.w	80a3eca <__ieee754_pow+0xaa>
 80a482c:	f1c3 0314 	rsb	r3, r3, #20
 80a4830:	fa48 f203 	asr.w	r2, r8, r3
 80a4834:	fa02 f303 	lsl.w	r3, r2, r3
 80a4838:	4598      	cmp	r8, r3
 80a483a:	d024      	beq.n	80a4886 <__ieee754_pow+0xa66>
 80a483c:	4674      	mov	r4, lr
 80a483e:	f7ff bb21 	b.w	80a3e84 <__ieee754_pow+0x64>
 80a4842:	4b26      	ldr	r3, [pc, #152]	; (80a48dc <__ieee754_pow+0xabc>)
 80a4844:	429f      	cmp	r7, r3
 80a4846:	f73f ae07 	bgt.w	80a4458 <__ieee754_pow+0x638>
 80a484a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80a484e:	469a      	mov	sl, r3
 80a4850:	469b      	mov	fp, r3
 80a4852:	e62e      	b.n	80a44b2 <__ieee754_pow+0x692>
 80a4854:	4602      	mov	r2, r0
 80a4856:	460b      	mov	r3, r1
 80a4858:	f7ff bbb9 	b.w	80a3fce <__ieee754_pow+0x1ae>
 80a485c:	4b20      	ldr	r3, [pc, #128]	; (80a48e0 <__ieee754_pow+0xac0>)
 80a485e:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80a4862:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a4866:	a316      	add	r3, pc, #88	; (adr r3, 80a48c0 <__ieee754_pow+0xaa0>)
 80a4868:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a486c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a4870:	a315      	add	r3, pc, #84	; (adr r3, 80a48c8 <__ieee754_pow+0xaa8>)
 80a4872:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4876:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a487a:	f7ff bbf9 	b.w	80a4070 <__ieee754_pow+0x250>
 80a487e:	465a      	mov	r2, fp
 80a4880:	f000 fb36 	bl	80a4ef0 <scalbn>
 80a4884:	e6c5      	b.n	80a4612 <__ieee754_pow+0x7f2>
 80a4886:	f002 0201 	and.w	r2, r2, #1
 80a488a:	f1c2 0402 	rsb	r4, r2, #2
 80a488e:	f7ff baf9 	b.w	80a3e84 <__ieee754_pow+0x64>
 80a4892:	bf00      	nop
 80a4894:	f3af 8000 	nop.w
 80a4898:	60000000 	.word	0x60000000
 80a489c:	3ff71547 	.word	0x3ff71547
 80a48a0:	f85ddf44 	.word	0xf85ddf44
 80a48a4:	3e54ae0b 	.word	0x3e54ae0b
 80a48a8:	55555555 	.word	0x55555555
 80a48ac:	3fd55555 	.word	0x3fd55555
 80a48b0:	652b82fe 	.word	0x652b82fe
 80a48b4:	3ff71547 	.word	0x3ff71547
 80a48b8:	8800759c 	.word	0x8800759c
 80a48bc:	7e37e43c 	.word	0x7e37e43c
 80a48c0:	40000000 	.word	0x40000000
 80a48c4:	3fe2b803 	.word	0x3fe2b803
 80a48c8:	43cfd006 	.word	0x43cfd006
 80a48cc:	3e4cfdeb 	.word	0x3e4cfdeb
 80a48d0:	3feffffe 	.word	0x3feffffe
 80a48d4:	3ff00000 	.word	0x3ff00000
 80a48d8:	3fd00000 	.word	0x3fd00000
 80a48dc:	3fe00000 	.word	0x3fe00000
 80a48e0:	3ff80000 	.word	0x3ff80000

080a48e4 <__ieee754_sqrt>:
 80a48e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a48e8:	4e5f      	ldr	r6, [pc, #380]	; (80a4a68 <__ieee754_sqrt+0x184>)
 80a48ea:	460c      	mov	r4, r1
 80a48ec:	46b6      	mov	lr, r6
 80a48ee:	400e      	ands	r6, r1
 80a48f0:	4576      	cmp	r6, lr
 80a48f2:	4605      	mov	r5, r0
 80a48f4:	f000 8098 	beq.w	80a4a28 <__ieee754_sqrt+0x144>
 80a48f8:	2900      	cmp	r1, #0
 80a48fa:	460b      	mov	r3, r1
 80a48fc:	4602      	mov	r2, r0
 80a48fe:	dd74      	ble.n	80a49ea <__ieee754_sqrt+0x106>
 80a4900:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80a4904:	d07f      	beq.n	80a4a06 <__ieee754_sqrt+0x122>
 80a4906:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80a490a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a490e:	f01e 0f01 	tst.w	lr, #1
 80a4912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4916:	d163      	bne.n	80a49e0 <__ieee754_sqrt+0xfc>
 80a4918:	2700      	movs	r7, #0
 80a491a:	463e      	mov	r6, r7
 80a491c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80a4920:	440b      	add	r3, r1
 80a4922:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a4926:	0052      	lsls	r2, r2, #1
 80a4928:	2016      	movs	r0, #22
 80a492a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80a492e:	1874      	adds	r4, r6, r1
 80a4930:	429c      	cmp	r4, r3
 80a4932:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80a4936:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a493a:	dc02      	bgt.n	80a4942 <__ieee754_sqrt+0x5e>
 80a493c:	1b1b      	subs	r3, r3, r4
 80a493e:	1866      	adds	r6, r4, r1
 80a4940:	440f      	add	r7, r1
 80a4942:	3801      	subs	r0, #1
 80a4944:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80a4948:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a494c:	d1ef      	bne.n	80a492e <__ieee754_sqrt+0x4a>
 80a494e:	4684      	mov	ip, r0
 80a4950:	2420      	movs	r4, #32
 80a4952:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a4956:	e009      	b.n	80a496c <__ieee754_sqrt+0x88>
 80a4958:	d020      	beq.n	80a499c <__ieee754_sqrt+0xb8>
 80a495a:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80a495e:	3c01      	subs	r4, #1
 80a4960:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a4964:	442b      	add	r3, r5
 80a4966:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a496a:	d020      	beq.n	80a49ae <__ieee754_sqrt+0xca>
 80a496c:	429e      	cmp	r6, r3
 80a496e:	eb01 050c 	add.w	r5, r1, ip
 80a4972:	daf1      	bge.n	80a4958 <__ieee754_sqrt+0x74>
 80a4974:	2d00      	cmp	r5, #0
 80a4976:	eb05 0c01 	add.w	ip, r5, r1
 80a497a:	db09      	blt.n	80a4990 <__ieee754_sqrt+0xac>
 80a497c:	46b0      	mov	r8, r6
 80a497e:	4295      	cmp	r5, r2
 80a4980:	eba3 0306 	sub.w	r3, r3, r6
 80a4984:	d900      	bls.n	80a4988 <__ieee754_sqrt+0xa4>
 80a4986:	3b01      	subs	r3, #1
 80a4988:	4646      	mov	r6, r8
 80a498a:	1b52      	subs	r2, r2, r5
 80a498c:	4408      	add	r0, r1
 80a498e:	e7e4      	b.n	80a495a <__ieee754_sqrt+0x76>
 80a4990:	f1bc 0f00 	cmp.w	ip, #0
 80a4994:	dbf2      	blt.n	80a497c <__ieee754_sqrt+0x98>
 80a4996:	f106 0801 	add.w	r8, r6, #1
 80a499a:	e7f0      	b.n	80a497e <__ieee754_sqrt+0x9a>
 80a499c:	4295      	cmp	r5, r2
 80a499e:	d817      	bhi.n	80a49d0 <__ieee754_sqrt+0xec>
 80a49a0:	2d00      	cmp	r5, #0
 80a49a2:	eb05 0c01 	add.w	ip, r5, r1
 80a49a6:	db49      	blt.n	80a4a3c <__ieee754_sqrt+0x158>
 80a49a8:	4698      	mov	r8, r3
 80a49aa:	2300      	movs	r3, #0
 80a49ac:	e7ec      	b.n	80a4988 <__ieee754_sqrt+0xa4>
 80a49ae:	4313      	orrs	r3, r2
 80a49b0:	d110      	bne.n	80a49d4 <__ieee754_sqrt+0xf0>
 80a49b2:	0840      	lsrs	r0, r0, #1
 80a49b4:	107b      	asrs	r3, r7, #1
 80a49b6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a49ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a49be:	07fa      	lsls	r2, r7, #31
 80a49c0:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 80a49c4:	4639      	mov	r1, r7
 80a49c6:	bf48      	it	mi
 80a49c8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a49cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a49d0:	4633      	mov	r3, r6
 80a49d2:	e7c2      	b.n	80a495a <__ieee754_sqrt+0x76>
 80a49d4:	1c41      	adds	r1, r0, #1
 80a49d6:	d035      	beq.n	80a4a44 <__ieee754_sqrt+0x160>
 80a49d8:	f000 0301 	and.w	r3, r0, #1
 80a49dc:	4418      	add	r0, r3
 80a49de:	e7e8      	b.n	80a49b2 <__ieee754_sqrt+0xce>
 80a49e0:	005b      	lsls	r3, r3, #1
 80a49e2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80a49e6:	0052      	lsls	r2, r2, #1
 80a49e8:	e796      	b.n	80a4918 <__ieee754_sqrt+0x34>
 80a49ea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a49ee:	4306      	orrs	r6, r0
 80a49f0:	d0ec      	beq.n	80a49cc <__ieee754_sqrt+0xe8>
 80a49f2:	bb79      	cbnz	r1, 80a4a54 <__ieee754_sqrt+0x170>
 80a49f4:	468e      	mov	lr, r1
 80a49f6:	0ad3      	lsrs	r3, r2, #11
 80a49f8:	f1ae 0e15 	sub.w	lr, lr, #21
 80a49fc:	0552      	lsls	r2, r2, #21
 80a49fe:	2b00      	cmp	r3, #0
 80a4a00:	d0f9      	beq.n	80a49f6 <__ieee754_sqrt+0x112>
 80a4a02:	02dd      	lsls	r5, r3, #11
 80a4a04:	d421      	bmi.n	80a4a4a <__ieee754_sqrt+0x166>
 80a4a06:	2100      	movs	r1, #0
 80a4a08:	e000      	b.n	80a4a0c <__ieee754_sqrt+0x128>
 80a4a0a:	4601      	mov	r1, r0
 80a4a0c:	005b      	lsls	r3, r3, #1
 80a4a0e:	02dc      	lsls	r4, r3, #11
 80a4a10:	f101 0001 	add.w	r0, r1, #1
 80a4a14:	d5f9      	bpl.n	80a4a0a <__ieee754_sqrt+0x126>
 80a4a16:	f1c0 0420 	rsb	r4, r0, #32
 80a4a1a:	fa22 f404 	lsr.w	r4, r2, r4
 80a4a1e:	4323      	orrs	r3, r4
 80a4a20:	ebc1 0e0e 	rsb	lr, r1, lr
 80a4a24:	4082      	lsls	r2, r0
 80a4a26:	e76e      	b.n	80a4906 <__ieee754_sqrt+0x22>
 80a4a28:	4602      	mov	r2, r0
 80a4a2a:	460b      	mov	r3, r1
 80a4a2c:	f000 fc92 	bl	80a5354 <__aeabi_dmul>
 80a4a30:	462a      	mov	r2, r5
 80a4a32:	4623      	mov	r3, r4
 80a4a34:	f000 fadc 	bl	80a4ff0 <__adddf3>
 80a4a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4a3c:	f1bc 0f00 	cmp.w	ip, #0
 80a4a40:	daa9      	bge.n	80a4996 <__ieee754_sqrt+0xb2>
 80a4a42:	e7b1      	b.n	80a49a8 <__ieee754_sqrt+0xc4>
 80a4a44:	3701      	adds	r7, #1
 80a4a46:	4620      	mov	r0, r4
 80a4a48:	e7b4      	b.n	80a49b4 <__ieee754_sqrt+0xd0>
 80a4a4a:	2420      	movs	r4, #32
 80a4a4c:	f04f 31ff 	mov.w	r1, #4294967295
 80a4a50:	2000      	movs	r0, #0
 80a4a52:	e7e2      	b.n	80a4a1a <__ieee754_sqrt+0x136>
 80a4a54:	4602      	mov	r2, r0
 80a4a56:	460b      	mov	r3, r1
 80a4a58:	f000 fac8 	bl	80a4fec <__aeabi_dsub>
 80a4a5c:	4602      	mov	r2, r0
 80a4a5e:	460b      	mov	r3, r1
 80a4a60:	f000 fda2 	bl	80a55a8 <__aeabi_ddiv>
 80a4a64:	e7b2      	b.n	80a49cc <__ieee754_sqrt+0xe8>
 80a4a66:	bf00      	nop
 80a4a68:	7ff00000 	.word	0x7ff00000
 80a4a6c:	00000000 	.word	0x00000000

080a4a70 <atan>:
 80a4a70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4a74:	4bc0      	ldr	r3, [pc, #768]	; (80a4d78 <atan+0x308>)
 80a4a76:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a4a7a:	429e      	cmp	r6, r3
 80a4a7c:	460d      	mov	r5, r1
 80a4a7e:	468a      	mov	sl, r1
 80a4a80:	4604      	mov	r4, r0
 80a4a82:	dd0f      	ble.n	80a4aa4 <atan+0x34>
 80a4a84:	4bbd      	ldr	r3, [pc, #756]	; (80a4d7c <atan+0x30c>)
 80a4a86:	429e      	cmp	r6, r3
 80a4a88:	f300 80b2 	bgt.w	80a4bf0 <atan+0x180>
 80a4a8c:	f000 80ad 	beq.w	80a4bea <atan+0x17a>
 80a4a90:	4bbb      	ldr	r3, [pc, #748]	; (80a4d80 <atan+0x310>)
 80a4a92:	49bc      	ldr	r1, [pc, #752]	; (80a4d84 <atan+0x314>)
 80a4a94:	4cbc      	ldr	r4, [pc, #752]	; (80a4d88 <atan+0x318>)
 80a4a96:	f1ba 0f00 	cmp.w	sl, #0
 80a4a9a:	bfc8      	it	gt
 80a4a9c:	4619      	movgt	r1, r3
 80a4a9e:	4620      	mov	r0, r4
 80a4aa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4aa4:	4bb9      	ldr	r3, [pc, #740]	; (80a4d8c <atan+0x31c>)
 80a4aa6:	429e      	cmp	r6, r3
 80a4aa8:	f300 80bc 	bgt.w	80a4c24 <atan+0x1b4>
 80a4aac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80a4ab0:	429e      	cmp	r6, r3
 80a4ab2:	f340 80a7 	ble.w	80a4c04 <atan+0x194>
 80a4ab6:	f04f 3bff 	mov.w	fp, #4294967295
 80a4aba:	4622      	mov	r2, r4
 80a4abc:	462b      	mov	r3, r5
 80a4abe:	4620      	mov	r0, r4
 80a4ac0:	4629      	mov	r1, r5
 80a4ac2:	f000 fc47 	bl	80a5354 <__aeabi_dmul>
 80a4ac6:	4602      	mov	r2, r0
 80a4ac8:	460b      	mov	r3, r1
 80a4aca:	4680      	mov	r8, r0
 80a4acc:	4689      	mov	r9, r1
 80a4ace:	f000 fc41 	bl	80a5354 <__aeabi_dmul>
 80a4ad2:	a391      	add	r3, pc, #580	; (adr r3, 80a4d18 <atan+0x2a8>)
 80a4ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4ad8:	4606      	mov	r6, r0
 80a4ada:	460f      	mov	r7, r1
 80a4adc:	f000 fc3a 	bl	80a5354 <__aeabi_dmul>
 80a4ae0:	a38f      	add	r3, pc, #572	; (adr r3, 80a4d20 <atan+0x2b0>)
 80a4ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4ae6:	f000 fa83 	bl	80a4ff0 <__adddf3>
 80a4aea:	4632      	mov	r2, r6
 80a4aec:	463b      	mov	r3, r7
 80a4aee:	f000 fc31 	bl	80a5354 <__aeabi_dmul>
 80a4af2:	a38d      	add	r3, pc, #564	; (adr r3, 80a4d28 <atan+0x2b8>)
 80a4af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4af8:	f000 fa7a 	bl	80a4ff0 <__adddf3>
 80a4afc:	4632      	mov	r2, r6
 80a4afe:	463b      	mov	r3, r7
 80a4b00:	f000 fc28 	bl	80a5354 <__aeabi_dmul>
 80a4b04:	a38a      	add	r3, pc, #552	; (adr r3, 80a4d30 <atan+0x2c0>)
 80a4b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b0a:	f000 fa71 	bl	80a4ff0 <__adddf3>
 80a4b0e:	4632      	mov	r2, r6
 80a4b10:	463b      	mov	r3, r7
 80a4b12:	f000 fc1f 	bl	80a5354 <__aeabi_dmul>
 80a4b16:	a388      	add	r3, pc, #544	; (adr r3, 80a4d38 <atan+0x2c8>)
 80a4b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b1c:	f000 fa68 	bl	80a4ff0 <__adddf3>
 80a4b20:	4632      	mov	r2, r6
 80a4b22:	463b      	mov	r3, r7
 80a4b24:	f000 fc16 	bl	80a5354 <__aeabi_dmul>
 80a4b28:	a385      	add	r3, pc, #532	; (adr r3, 80a4d40 <atan+0x2d0>)
 80a4b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b2e:	f000 fa5f 	bl	80a4ff0 <__adddf3>
 80a4b32:	4642      	mov	r2, r8
 80a4b34:	464b      	mov	r3, r9
 80a4b36:	f000 fc0d 	bl	80a5354 <__aeabi_dmul>
 80a4b3a:	a383      	add	r3, pc, #524	; (adr r3, 80a4d48 <atan+0x2d8>)
 80a4b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b40:	4680      	mov	r8, r0
 80a4b42:	4689      	mov	r9, r1
 80a4b44:	4630      	mov	r0, r6
 80a4b46:	4639      	mov	r1, r7
 80a4b48:	f000 fc04 	bl	80a5354 <__aeabi_dmul>
 80a4b4c:	a380      	add	r3, pc, #512	; (adr r3, 80a4d50 <atan+0x2e0>)
 80a4b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b52:	f000 fa4b 	bl	80a4fec <__aeabi_dsub>
 80a4b56:	4632      	mov	r2, r6
 80a4b58:	463b      	mov	r3, r7
 80a4b5a:	f000 fbfb 	bl	80a5354 <__aeabi_dmul>
 80a4b5e:	a37e      	add	r3, pc, #504	; (adr r3, 80a4d58 <atan+0x2e8>)
 80a4b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b64:	f000 fa42 	bl	80a4fec <__aeabi_dsub>
 80a4b68:	4632      	mov	r2, r6
 80a4b6a:	463b      	mov	r3, r7
 80a4b6c:	f000 fbf2 	bl	80a5354 <__aeabi_dmul>
 80a4b70:	a37b      	add	r3, pc, #492	; (adr r3, 80a4d60 <atan+0x2f0>)
 80a4b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b76:	f000 fa39 	bl	80a4fec <__aeabi_dsub>
 80a4b7a:	4632      	mov	r2, r6
 80a4b7c:	463b      	mov	r3, r7
 80a4b7e:	f000 fbe9 	bl	80a5354 <__aeabi_dmul>
 80a4b82:	a379      	add	r3, pc, #484	; (adr r3, 80a4d68 <atan+0x2f8>)
 80a4b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b88:	f000 fa30 	bl	80a4fec <__aeabi_dsub>
 80a4b8c:	4632      	mov	r2, r6
 80a4b8e:	463b      	mov	r3, r7
 80a4b90:	f000 fbe0 	bl	80a5354 <__aeabi_dmul>
 80a4b94:	f1bb 3fff 	cmp.w	fp, #4294967295
 80a4b98:	4602      	mov	r2, r0
 80a4b9a:	460b      	mov	r3, r1
 80a4b9c:	d069      	beq.n	80a4c72 <atan+0x202>
 80a4b9e:	4640      	mov	r0, r8
 80a4ba0:	4649      	mov	r1, r9
 80a4ba2:	f000 fa25 	bl	80a4ff0 <__adddf3>
 80a4ba6:	4622      	mov	r2, r4
 80a4ba8:	462b      	mov	r3, r5
 80a4baa:	f000 fbd3 	bl	80a5354 <__aeabi_dmul>
 80a4bae:	4e78      	ldr	r6, [pc, #480]	; (80a4d90 <atan+0x320>)
 80a4bb0:	4b78      	ldr	r3, [pc, #480]	; (80a4d94 <atan+0x324>)
 80a4bb2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80a4bb6:	445e      	add	r6, fp
 80a4bb8:	449b      	add	fp, r3
 80a4bba:	e9db 2300 	ldrd	r2, r3, [fp]
 80a4bbe:	f000 fa15 	bl	80a4fec <__aeabi_dsub>
 80a4bc2:	4622      	mov	r2, r4
 80a4bc4:	462b      	mov	r3, r5
 80a4bc6:	f000 fa11 	bl	80a4fec <__aeabi_dsub>
 80a4bca:	4602      	mov	r2, r0
 80a4bcc:	460b      	mov	r3, r1
 80a4bce:	e9d6 0100 	ldrd	r0, r1, [r6]
 80a4bd2:	f000 fa0b 	bl	80a4fec <__aeabi_dsub>
 80a4bd6:	f1ba 0f00 	cmp.w	sl, #0
 80a4bda:	4604      	mov	r4, r0
 80a4bdc:	f6bf af5f 	bge.w	80a4a9e <atan+0x2e>
 80a4be0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a4be4:	4620      	mov	r0, r4
 80a4be6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4bea:	2800      	cmp	r0, #0
 80a4bec:	f43f af50 	beq.w	80a4a90 <atan+0x20>
 80a4bf0:	4622      	mov	r2, r4
 80a4bf2:	4620      	mov	r0, r4
 80a4bf4:	462b      	mov	r3, r5
 80a4bf6:	4629      	mov	r1, r5
 80a4bf8:	f000 f9fa 	bl	80a4ff0 <__adddf3>
 80a4bfc:	4604      	mov	r4, r0
 80a4bfe:	4620      	mov	r0, r4
 80a4c00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4c04:	a35a      	add	r3, pc, #360	; (adr r3, 80a4d70 <atan+0x300>)
 80a4c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c0a:	f000 f9f1 	bl	80a4ff0 <__adddf3>
 80a4c0e:	2200      	movs	r2, #0
 80a4c10:	4b61      	ldr	r3, [pc, #388]	; (80a4d98 <atan+0x328>)
 80a4c12:	f000 fe2f 	bl	80a5874 <__aeabi_dcmpgt>
 80a4c16:	2800      	cmp	r0, #0
 80a4c18:	f43f af4d 	beq.w	80a4ab6 <atan+0x46>
 80a4c1c:	4629      	mov	r1, r5
 80a4c1e:	4620      	mov	r0, r4
 80a4c20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4c24:	f000 f8c2 	bl	80a4dac <fabs>
 80a4c28:	4b5c      	ldr	r3, [pc, #368]	; (80a4d9c <atan+0x32c>)
 80a4c2a:	4604      	mov	r4, r0
 80a4c2c:	429e      	cmp	r6, r3
 80a4c2e:	460d      	mov	r5, r1
 80a4c30:	dc2f      	bgt.n	80a4c92 <atan+0x222>
 80a4c32:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80a4c36:	429e      	cmp	r6, r3
 80a4c38:	dc54      	bgt.n	80a4ce4 <atan+0x274>
 80a4c3a:	4602      	mov	r2, r0
 80a4c3c:	460b      	mov	r3, r1
 80a4c3e:	f000 f9d7 	bl	80a4ff0 <__adddf3>
 80a4c42:	2200      	movs	r2, #0
 80a4c44:	4b54      	ldr	r3, [pc, #336]	; (80a4d98 <atan+0x328>)
 80a4c46:	f000 f9d1 	bl	80a4fec <__aeabi_dsub>
 80a4c4a:	2200      	movs	r2, #0
 80a4c4c:	4606      	mov	r6, r0
 80a4c4e:	460f      	mov	r7, r1
 80a4c50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a4c54:	4620      	mov	r0, r4
 80a4c56:	4629      	mov	r1, r5
 80a4c58:	f000 f9ca 	bl	80a4ff0 <__adddf3>
 80a4c5c:	4602      	mov	r2, r0
 80a4c5e:	460b      	mov	r3, r1
 80a4c60:	4630      	mov	r0, r6
 80a4c62:	4639      	mov	r1, r7
 80a4c64:	f000 fca0 	bl	80a55a8 <__aeabi_ddiv>
 80a4c68:	f04f 0b00 	mov.w	fp, #0
 80a4c6c:	4604      	mov	r4, r0
 80a4c6e:	460d      	mov	r5, r1
 80a4c70:	e723      	b.n	80a4aba <atan+0x4a>
 80a4c72:	4640      	mov	r0, r8
 80a4c74:	4649      	mov	r1, r9
 80a4c76:	f000 f9bb 	bl	80a4ff0 <__adddf3>
 80a4c7a:	4622      	mov	r2, r4
 80a4c7c:	462b      	mov	r3, r5
 80a4c7e:	f000 fb69 	bl	80a5354 <__aeabi_dmul>
 80a4c82:	4602      	mov	r2, r0
 80a4c84:	460b      	mov	r3, r1
 80a4c86:	4620      	mov	r0, r4
 80a4c88:	4629      	mov	r1, r5
 80a4c8a:	f000 f9af 	bl	80a4fec <__aeabi_dsub>
 80a4c8e:	4604      	mov	r4, r0
 80a4c90:	e705      	b.n	80a4a9e <atan+0x2e>
 80a4c92:	4b43      	ldr	r3, [pc, #268]	; (80a4da0 <atan+0x330>)
 80a4c94:	429e      	cmp	r6, r3
 80a4c96:	dc1a      	bgt.n	80a4cce <atan+0x25e>
 80a4c98:	2200      	movs	r2, #0
 80a4c9a:	4b42      	ldr	r3, [pc, #264]	; (80a4da4 <atan+0x334>)
 80a4c9c:	f000 f9a6 	bl	80a4fec <__aeabi_dsub>
 80a4ca0:	2200      	movs	r2, #0
 80a4ca2:	4606      	mov	r6, r0
 80a4ca4:	460f      	mov	r7, r1
 80a4ca6:	4b3f      	ldr	r3, [pc, #252]	; (80a4da4 <atan+0x334>)
 80a4ca8:	4620      	mov	r0, r4
 80a4caa:	4629      	mov	r1, r5
 80a4cac:	f000 fb52 	bl	80a5354 <__aeabi_dmul>
 80a4cb0:	2200      	movs	r2, #0
 80a4cb2:	4b39      	ldr	r3, [pc, #228]	; (80a4d98 <atan+0x328>)
 80a4cb4:	f000 f99c 	bl	80a4ff0 <__adddf3>
 80a4cb8:	4602      	mov	r2, r0
 80a4cba:	460b      	mov	r3, r1
 80a4cbc:	4630      	mov	r0, r6
 80a4cbe:	4639      	mov	r1, r7
 80a4cc0:	f000 fc72 	bl	80a55a8 <__aeabi_ddiv>
 80a4cc4:	f04f 0b02 	mov.w	fp, #2
 80a4cc8:	4604      	mov	r4, r0
 80a4cca:	460d      	mov	r5, r1
 80a4ccc:	e6f5      	b.n	80a4aba <atan+0x4a>
 80a4cce:	4602      	mov	r2, r0
 80a4cd0:	460b      	mov	r3, r1
 80a4cd2:	2000      	movs	r0, #0
 80a4cd4:	4934      	ldr	r1, [pc, #208]	; (80a4da8 <atan+0x338>)
 80a4cd6:	f000 fc67 	bl	80a55a8 <__aeabi_ddiv>
 80a4cda:	f04f 0b03 	mov.w	fp, #3
 80a4cde:	4604      	mov	r4, r0
 80a4ce0:	460d      	mov	r5, r1
 80a4ce2:	e6ea      	b.n	80a4aba <atan+0x4a>
 80a4ce4:	2200      	movs	r2, #0
 80a4ce6:	4b2c      	ldr	r3, [pc, #176]	; (80a4d98 <atan+0x328>)
 80a4ce8:	f000 f980 	bl	80a4fec <__aeabi_dsub>
 80a4cec:	2200      	movs	r2, #0
 80a4cee:	4606      	mov	r6, r0
 80a4cf0:	460f      	mov	r7, r1
 80a4cf2:	4b29      	ldr	r3, [pc, #164]	; (80a4d98 <atan+0x328>)
 80a4cf4:	4620      	mov	r0, r4
 80a4cf6:	4629      	mov	r1, r5
 80a4cf8:	f000 f97a 	bl	80a4ff0 <__adddf3>
 80a4cfc:	4602      	mov	r2, r0
 80a4cfe:	460b      	mov	r3, r1
 80a4d00:	4630      	mov	r0, r6
 80a4d02:	4639      	mov	r1, r7
 80a4d04:	f000 fc50 	bl	80a55a8 <__aeabi_ddiv>
 80a4d08:	f04f 0b01 	mov.w	fp, #1
 80a4d0c:	4604      	mov	r4, r0
 80a4d0e:	460d      	mov	r5, r1
 80a4d10:	e6d3      	b.n	80a4aba <atan+0x4a>
 80a4d12:	bf00      	nop
 80a4d14:	f3af 8000 	nop.w
 80a4d18:	e322da11 	.word	0xe322da11
 80a4d1c:	3f90ad3a 	.word	0x3f90ad3a
 80a4d20:	24760deb 	.word	0x24760deb
 80a4d24:	3fa97b4b 	.word	0x3fa97b4b
 80a4d28:	a0d03d51 	.word	0xa0d03d51
 80a4d2c:	3fb10d66 	.word	0x3fb10d66
 80a4d30:	c54c206e 	.word	0xc54c206e
 80a4d34:	3fb745cd 	.word	0x3fb745cd
 80a4d38:	920083ff 	.word	0x920083ff
 80a4d3c:	3fc24924 	.word	0x3fc24924
 80a4d40:	5555550d 	.word	0x5555550d
 80a4d44:	3fd55555 	.word	0x3fd55555
 80a4d48:	2c6a6c2f 	.word	0x2c6a6c2f
 80a4d4c:	bfa2b444 	.word	0xbfa2b444
 80a4d50:	52defd9a 	.word	0x52defd9a
 80a4d54:	3fadde2d 	.word	0x3fadde2d
 80a4d58:	af749a6d 	.word	0xaf749a6d
 80a4d5c:	3fb3b0f2 	.word	0x3fb3b0f2
 80a4d60:	fe231671 	.word	0xfe231671
 80a4d64:	3fbc71c6 	.word	0x3fbc71c6
 80a4d68:	9998ebc4 	.word	0x9998ebc4
 80a4d6c:	3fc99999 	.word	0x3fc99999
 80a4d70:	8800759c 	.word	0x8800759c
 80a4d74:	7e37e43c 	.word	0x7e37e43c
 80a4d78:	440fffff 	.word	0x440fffff
 80a4d7c:	7ff00000 	.word	0x7ff00000
 80a4d80:	3ff921fb 	.word	0x3ff921fb
 80a4d84:	bff921fb 	.word	0xbff921fb
 80a4d88:	54442d18 	.word	0x54442d18
 80a4d8c:	3fdbffff 	.word	0x3fdbffff
 80a4d90:	080a6620 	.word	0x080a6620
 80a4d94:	080a6600 	.word	0x080a6600
 80a4d98:	3ff00000 	.word	0x3ff00000
 80a4d9c:	3ff2ffff 	.word	0x3ff2ffff
 80a4da0:	40037fff 	.word	0x40037fff
 80a4da4:	3ff80000 	.word	0x3ff80000
 80a4da8:	bff00000 	.word	0xbff00000

080a4dac <fabs>:
 80a4dac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4db0:	4770      	bx	lr
 80a4db2:	bf00      	nop

080a4db4 <finite>:
 80a4db4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80a4db8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80a4dbc:	0fc0      	lsrs	r0, r0, #31
 80a4dbe:	4770      	bx	lr

080a4dc0 <matherr>:
 80a4dc0:	2000      	movs	r0, #0
 80a4dc2:	4770      	bx	lr

080a4dc4 <nan>:
 80a4dc4:	2000      	movs	r0, #0
 80a4dc6:	4901      	ldr	r1, [pc, #4]	; (80a4dcc <nan+0x8>)
 80a4dc8:	4770      	bx	lr
 80a4dca:	bf00      	nop
 80a4dcc:	7ff80000 	.word	0x7ff80000

080a4dd0 <rint>:
 80a4dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4dd2:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 80a4dd6:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
 80a4dda:	2e13      	cmp	r6, #19
 80a4ddc:	b083      	sub	sp, #12
 80a4dde:	4602      	mov	r2, r0
 80a4de0:	460b      	mov	r3, r1
 80a4de2:	460c      	mov	r4, r1
 80a4de4:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80a4de8:	4607      	mov	r7, r0
 80a4dea:	dc2e      	bgt.n	80a4e4a <rint+0x7a>
 80a4dec:	2e00      	cmp	r6, #0
 80a4dee:	db49      	blt.n	80a4e84 <rint+0xb4>
 80a4df0:	493d      	ldr	r1, [pc, #244]	; (80a4ee8 <rint+0x118>)
 80a4df2:	4131      	asrs	r1, r6
 80a4df4:	ea03 0001 	and.w	r0, r3, r1
 80a4df8:	4310      	orrs	r0, r2
 80a4dfa:	d02b      	beq.n	80a4e54 <rint+0x84>
 80a4dfc:	0849      	lsrs	r1, r1, #1
 80a4dfe:	400b      	ands	r3, r1
 80a4e00:	ea53 0702 	orrs.w	r7, r3, r2
 80a4e04:	d00c      	beq.n	80a4e20 <rint+0x50>
 80a4e06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80a4e0a:	2e13      	cmp	r6, #19
 80a4e0c:	ea24 0101 	bic.w	r1, r4, r1
 80a4e10:	fa43 f406 	asr.w	r4, r3, r6
 80a4e14:	ea44 0401 	orr.w	r4, r4, r1
 80a4e18:	bf0c      	ite	eq
 80a4e1a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80a4e1e:	2700      	movne	r7, #0
 80a4e20:	4b32      	ldr	r3, [pc, #200]	; (80a4eec <rint+0x11c>)
 80a4e22:	4621      	mov	r1, r4
 80a4e24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80a4e28:	e9d5 4500 	ldrd	r4, r5, [r5]
 80a4e2c:	4638      	mov	r0, r7
 80a4e2e:	4622      	mov	r2, r4
 80a4e30:	462b      	mov	r3, r5
 80a4e32:	f000 f8dd 	bl	80a4ff0 <__adddf3>
 80a4e36:	e9cd 0100 	strd	r0, r1, [sp]
 80a4e3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4e3e:	4622      	mov	r2, r4
 80a4e40:	462b      	mov	r3, r5
 80a4e42:	f000 f8d3 	bl	80a4fec <__aeabi_dsub>
 80a4e46:	b003      	add	sp, #12
 80a4e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4e4a:	2e33      	cmp	r6, #51	; 0x33
 80a4e4c:	dd06      	ble.n	80a4e5c <rint+0x8c>
 80a4e4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a4e52:	d045      	beq.n	80a4ee0 <rint+0x110>
 80a4e54:	4610      	mov	r0, r2
 80a4e56:	4619      	mov	r1, r3
 80a4e58:	b003      	add	sp, #12
 80a4e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4e5c:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 80a4e60:	f04f 31ff 	mov.w	r1, #4294967295
 80a4e64:	fa21 f10e 	lsr.w	r1, r1, lr
 80a4e68:	4208      	tst	r0, r1
 80a4e6a:	d0f3      	beq.n	80a4e54 <rint+0x84>
 80a4e6c:	0849      	lsrs	r1, r1, #1
 80a4e6e:	4208      	tst	r0, r1
 80a4e70:	d0d6      	beq.n	80a4e20 <rint+0x50>
 80a4e72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a4e76:	ea20 0101 	bic.w	r1, r0, r1
 80a4e7a:	fa43 fe0e 	asr.w	lr, r3, lr
 80a4e7e:	ea4e 0701 	orr.w	r7, lr, r1
 80a4e82:	e7cd      	b.n	80a4e20 <rint+0x50>
 80a4e84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4e88:	4301      	orrs	r1, r0
 80a4e8a:	4619      	mov	r1, r3
 80a4e8c:	d0e4      	beq.n	80a4e58 <rint+0x88>
 80a4e8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a4e92:	ea43 0c00 	orr.w	ip, r3, r0
 80a4e96:	f1cc 0300 	rsb	r3, ip, #0
 80a4e9a:	ea43 0c0c 	orr.w	ip, r3, ip
 80a4e9e:	4b13      	ldr	r3, [pc, #76]	; (80a4eec <rint+0x11c>)
 80a4ea0:	0c64      	lsrs	r4, r4, #17
 80a4ea2:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
 80a4ea6:	f40c 2c00 	and.w	ip, ip, #524288	; 0x80000
 80a4eaa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80a4eae:	0464      	lsls	r4, r4, #17
 80a4eb0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80a4eb4:	ea4c 0104 	orr.w	r1, ip, r4
 80a4eb8:	4632      	mov	r2, r6
 80a4eba:	463b      	mov	r3, r7
 80a4ebc:	f000 f898 	bl	80a4ff0 <__adddf3>
 80a4ec0:	e9cd 0100 	strd	r0, r1, [sp]
 80a4ec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4ec8:	4632      	mov	r2, r6
 80a4eca:	463b      	mov	r3, r7
 80a4ecc:	f000 f88e 	bl	80a4fec <__aeabi_dsub>
 80a4ed0:	4602      	mov	r2, r0
 80a4ed2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4ed6:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 80a4eda:	4610      	mov	r0, r2
 80a4edc:	4619      	mov	r1, r3
 80a4ede:	e7bb      	b.n	80a4e58 <rint+0x88>
 80a4ee0:	f000 f886 	bl	80a4ff0 <__adddf3>
 80a4ee4:	e7b8      	b.n	80a4e58 <rint+0x88>
 80a4ee6:	bf00      	nop
 80a4ee8:	000fffff 	.word	0x000fffff
 80a4eec:	080a6640 	.word	0x080a6640

080a4ef0 <scalbn>:
 80a4ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4ef2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a4ef6:	4604      	mov	r4, r0
 80a4ef8:	460d      	mov	r5, r1
 80a4efa:	460b      	mov	r3, r1
 80a4efc:	4617      	mov	r7, r2
 80a4efe:	bb06      	cbnz	r6, 80a4f42 <scalbn+0x52>
 80a4f00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a4f04:	4303      	orrs	r3, r0
 80a4f06:	d025      	beq.n	80a4f54 <scalbn+0x64>
 80a4f08:	2200      	movs	r2, #0
 80a4f0a:	4b2f      	ldr	r3, [pc, #188]	; (80a4fc8 <scalbn+0xd8>)
 80a4f0c:	f000 fa22 	bl	80a5354 <__aeabi_dmul>
 80a4f10:	4a2e      	ldr	r2, [pc, #184]	; (80a4fcc <scalbn+0xdc>)
 80a4f12:	4604      	mov	r4, r0
 80a4f14:	4297      	cmp	r7, r2
 80a4f16:	460d      	mov	r5, r1
 80a4f18:	460b      	mov	r3, r1
 80a4f1a:	db2a      	blt.n	80a4f72 <scalbn+0x82>
 80a4f1c:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a4f20:	3e36      	subs	r6, #54	; 0x36
 80a4f22:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a4f26:	443e      	add	r6, r7
 80a4f28:	4296      	cmp	r6, r2
 80a4f2a:	dc28      	bgt.n	80a4f7e <scalbn+0x8e>
 80a4f2c:	2e00      	cmp	r6, #0
 80a4f2e:	dd12      	ble.n	80a4f56 <scalbn+0x66>
 80a4f30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a4f34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a4f38:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a4f3c:	4620      	mov	r0, r4
 80a4f3e:	4629      	mov	r1, r5
 80a4f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4f42:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a4f46:	4296      	cmp	r6, r2
 80a4f48:	d1eb      	bne.n	80a4f22 <scalbn+0x32>
 80a4f4a:	4602      	mov	r2, r0
 80a4f4c:	460b      	mov	r3, r1
 80a4f4e:	f000 f84f 	bl	80a4ff0 <__adddf3>
 80a4f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4f56:	f116 0f35 	cmn.w	r6, #53	; 0x35
 80a4f5a:	da1d      	bge.n	80a4f98 <scalbn+0xa8>
 80a4f5c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a4f60:	429f      	cmp	r7, r3
 80a4f62:	dc0c      	bgt.n	80a4f7e <scalbn+0x8e>
 80a4f64:	a114      	add	r1, pc, #80	; (adr r1, 80a4fb8 <scalbn+0xc8>)
 80a4f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4f6a:	4622      	mov	r2, r4
 80a4f6c:	462b      	mov	r3, r5
 80a4f6e:	f000 f831 	bl	80a4fd4 <copysign>
 80a4f72:	a311      	add	r3, pc, #68	; (adr r3, 80a4fb8 <scalbn+0xc8>)
 80a4f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f78:	f000 f9ec 	bl	80a5354 <__aeabi_dmul>
 80a4f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4f7e:	4622      	mov	r2, r4
 80a4f80:	a10f      	add	r1, pc, #60	; (adr r1, 80a4fc0 <scalbn+0xd0>)
 80a4f82:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4f86:	462b      	mov	r3, r5
 80a4f88:	f000 f824 	bl	80a4fd4 <copysign>
 80a4f8c:	a30c      	add	r3, pc, #48	; (adr r3, 80a4fc0 <scalbn+0xd0>)
 80a4f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f92:	f000 f9df 	bl	80a5354 <__aeabi_dmul>
 80a4f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4f98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a4f9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a4fa0:	3636      	adds	r6, #54	; 0x36
 80a4fa2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a4fa6:	4620      	mov	r0, r4
 80a4fa8:	4629      	mov	r1, r5
 80a4faa:	2200      	movs	r2, #0
 80a4fac:	4b08      	ldr	r3, [pc, #32]	; (80a4fd0 <scalbn+0xe0>)
 80a4fae:	f000 f9d1 	bl	80a5354 <__aeabi_dmul>
 80a4fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4fb4:	f3af 8000 	nop.w
 80a4fb8:	c2f8f359 	.word	0xc2f8f359
 80a4fbc:	01a56e1f 	.word	0x01a56e1f
 80a4fc0:	8800759c 	.word	0x8800759c
 80a4fc4:	7e37e43c 	.word	0x7e37e43c
 80a4fc8:	43500000 	.word	0x43500000
 80a4fcc:	ffff3cb0 	.word	0xffff3cb0
 80a4fd0:	3c900000 	.word	0x3c900000

080a4fd4 <copysign>:
 80a4fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80a4fd8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a4fdc:	ea42 0103 	orr.w	r1, r2, r3
 80a4fe0:	4770      	bx	lr
 80a4fe2:	bf00      	nop

080a4fe4 <__aeabi_drsub>:
 80a4fe4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a4fe8:	e002      	b.n	80a4ff0 <__adddf3>
 80a4fea:	bf00      	nop

080a4fec <__aeabi_dsub>:
 80a4fec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a4ff0 <__adddf3>:
 80a4ff0:	b530      	push	{r4, r5, lr}
 80a4ff2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a4ff6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a4ffa:	ea94 0f05 	teq	r4, r5
 80a4ffe:	bf08      	it	eq
 80a5000:	ea90 0f02 	teqeq	r0, r2
 80a5004:	bf1f      	itttt	ne
 80a5006:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a500a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a500e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a5012:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5016:	f000 80e2 	beq.w	80a51de <__adddf3+0x1ee>
 80a501a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a501e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a5022:	bfb8      	it	lt
 80a5024:	426d      	neglt	r5, r5
 80a5026:	dd0c      	ble.n	80a5042 <__adddf3+0x52>
 80a5028:	442c      	add	r4, r5
 80a502a:	ea80 0202 	eor.w	r2, r0, r2
 80a502e:	ea81 0303 	eor.w	r3, r1, r3
 80a5032:	ea82 0000 	eor.w	r0, r2, r0
 80a5036:	ea83 0101 	eor.w	r1, r3, r1
 80a503a:	ea80 0202 	eor.w	r2, r0, r2
 80a503e:	ea81 0303 	eor.w	r3, r1, r3
 80a5042:	2d36      	cmp	r5, #54	; 0x36
 80a5044:	bf88      	it	hi
 80a5046:	bd30      	pophi	{r4, r5, pc}
 80a5048:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a504c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5050:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a5054:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a5058:	d002      	beq.n	80a5060 <__adddf3+0x70>
 80a505a:	4240      	negs	r0, r0
 80a505c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5060:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a5064:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5068:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a506c:	d002      	beq.n	80a5074 <__adddf3+0x84>
 80a506e:	4252      	negs	r2, r2
 80a5070:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5074:	ea94 0f05 	teq	r4, r5
 80a5078:	f000 80a7 	beq.w	80a51ca <__adddf3+0x1da>
 80a507c:	f1a4 0401 	sub.w	r4, r4, #1
 80a5080:	f1d5 0e20 	rsbs	lr, r5, #32
 80a5084:	db0d      	blt.n	80a50a2 <__adddf3+0xb2>
 80a5086:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a508a:	fa22 f205 	lsr.w	r2, r2, r5
 80a508e:	1880      	adds	r0, r0, r2
 80a5090:	f141 0100 	adc.w	r1, r1, #0
 80a5094:	fa03 f20e 	lsl.w	r2, r3, lr
 80a5098:	1880      	adds	r0, r0, r2
 80a509a:	fa43 f305 	asr.w	r3, r3, r5
 80a509e:	4159      	adcs	r1, r3
 80a50a0:	e00e      	b.n	80a50c0 <__adddf3+0xd0>
 80a50a2:	f1a5 0520 	sub.w	r5, r5, #32
 80a50a6:	f10e 0e20 	add.w	lr, lr, #32
 80a50aa:	2a01      	cmp	r2, #1
 80a50ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a50b0:	bf28      	it	cs
 80a50b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a50b6:	fa43 f305 	asr.w	r3, r3, r5
 80a50ba:	18c0      	adds	r0, r0, r3
 80a50bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a50c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a50c4:	d507      	bpl.n	80a50d6 <__adddf3+0xe6>
 80a50c6:	f04f 0e00 	mov.w	lr, #0
 80a50ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80a50ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a50d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a50d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a50da:	d31b      	bcc.n	80a5114 <__adddf3+0x124>
 80a50dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a50e0:	d30c      	bcc.n	80a50fc <__adddf3+0x10c>
 80a50e2:	0849      	lsrs	r1, r1, #1
 80a50e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a50e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a50ec:	f104 0401 	add.w	r4, r4, #1
 80a50f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a50f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a50f8:	f080 809a 	bcs.w	80a5230 <__adddf3+0x240>
 80a50fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5100:	bf08      	it	eq
 80a5102:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5106:	f150 0000 	adcs.w	r0, r0, #0
 80a510a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a510e:	ea41 0105 	orr.w	r1, r1, r5
 80a5112:	bd30      	pop	{r4, r5, pc}
 80a5114:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a5118:	4140      	adcs	r0, r0
 80a511a:	eb41 0101 	adc.w	r1, r1, r1
 80a511e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5122:	f1a4 0401 	sub.w	r4, r4, #1
 80a5126:	d1e9      	bne.n	80a50fc <__adddf3+0x10c>
 80a5128:	f091 0f00 	teq	r1, #0
 80a512c:	bf04      	itt	eq
 80a512e:	4601      	moveq	r1, r0
 80a5130:	2000      	moveq	r0, #0
 80a5132:	fab1 f381 	clz	r3, r1
 80a5136:	bf08      	it	eq
 80a5138:	3320      	addeq	r3, #32
 80a513a:	f1a3 030b 	sub.w	r3, r3, #11
 80a513e:	f1b3 0220 	subs.w	r2, r3, #32
 80a5142:	da0c      	bge.n	80a515e <__adddf3+0x16e>
 80a5144:	320c      	adds	r2, #12
 80a5146:	dd08      	ble.n	80a515a <__adddf3+0x16a>
 80a5148:	f102 0c14 	add.w	ip, r2, #20
 80a514c:	f1c2 020c 	rsb	r2, r2, #12
 80a5150:	fa01 f00c 	lsl.w	r0, r1, ip
 80a5154:	fa21 f102 	lsr.w	r1, r1, r2
 80a5158:	e00c      	b.n	80a5174 <__adddf3+0x184>
 80a515a:	f102 0214 	add.w	r2, r2, #20
 80a515e:	bfd8      	it	le
 80a5160:	f1c2 0c20 	rsble	ip, r2, #32
 80a5164:	fa01 f102 	lsl.w	r1, r1, r2
 80a5168:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a516c:	bfdc      	itt	le
 80a516e:	ea41 010c 	orrle.w	r1, r1, ip
 80a5172:	4090      	lslle	r0, r2
 80a5174:	1ae4      	subs	r4, r4, r3
 80a5176:	bfa2      	ittt	ge
 80a5178:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a517c:	4329      	orrge	r1, r5
 80a517e:	bd30      	popge	{r4, r5, pc}
 80a5180:	ea6f 0404 	mvn.w	r4, r4
 80a5184:	3c1f      	subs	r4, #31
 80a5186:	da1c      	bge.n	80a51c2 <__adddf3+0x1d2>
 80a5188:	340c      	adds	r4, #12
 80a518a:	dc0e      	bgt.n	80a51aa <__adddf3+0x1ba>
 80a518c:	f104 0414 	add.w	r4, r4, #20
 80a5190:	f1c4 0220 	rsb	r2, r4, #32
 80a5194:	fa20 f004 	lsr.w	r0, r0, r4
 80a5198:	fa01 f302 	lsl.w	r3, r1, r2
 80a519c:	ea40 0003 	orr.w	r0, r0, r3
 80a51a0:	fa21 f304 	lsr.w	r3, r1, r4
 80a51a4:	ea45 0103 	orr.w	r1, r5, r3
 80a51a8:	bd30      	pop	{r4, r5, pc}
 80a51aa:	f1c4 040c 	rsb	r4, r4, #12
 80a51ae:	f1c4 0220 	rsb	r2, r4, #32
 80a51b2:	fa20 f002 	lsr.w	r0, r0, r2
 80a51b6:	fa01 f304 	lsl.w	r3, r1, r4
 80a51ba:	ea40 0003 	orr.w	r0, r0, r3
 80a51be:	4629      	mov	r1, r5
 80a51c0:	bd30      	pop	{r4, r5, pc}
 80a51c2:	fa21 f004 	lsr.w	r0, r1, r4
 80a51c6:	4629      	mov	r1, r5
 80a51c8:	bd30      	pop	{r4, r5, pc}
 80a51ca:	f094 0f00 	teq	r4, #0
 80a51ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a51d2:	bf06      	itte	eq
 80a51d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a51d8:	3401      	addeq	r4, #1
 80a51da:	3d01      	subne	r5, #1
 80a51dc:	e74e      	b.n	80a507c <__adddf3+0x8c>
 80a51de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a51e2:	bf18      	it	ne
 80a51e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a51e8:	d029      	beq.n	80a523e <__adddf3+0x24e>
 80a51ea:	ea94 0f05 	teq	r4, r5
 80a51ee:	bf08      	it	eq
 80a51f0:	ea90 0f02 	teqeq	r0, r2
 80a51f4:	d005      	beq.n	80a5202 <__adddf3+0x212>
 80a51f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a51fa:	bf04      	itt	eq
 80a51fc:	4619      	moveq	r1, r3
 80a51fe:	4610      	moveq	r0, r2
 80a5200:	bd30      	pop	{r4, r5, pc}
 80a5202:	ea91 0f03 	teq	r1, r3
 80a5206:	bf1e      	ittt	ne
 80a5208:	2100      	movne	r1, #0
 80a520a:	2000      	movne	r0, #0
 80a520c:	bd30      	popne	{r4, r5, pc}
 80a520e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a5212:	d105      	bne.n	80a5220 <__adddf3+0x230>
 80a5214:	0040      	lsls	r0, r0, #1
 80a5216:	4149      	adcs	r1, r1
 80a5218:	bf28      	it	cs
 80a521a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a521e:	bd30      	pop	{r4, r5, pc}
 80a5220:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a5224:	bf3c      	itt	cc
 80a5226:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a522a:	bd30      	popcc	{r4, r5, pc}
 80a522c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5230:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a5234:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5238:	f04f 0000 	mov.w	r0, #0
 80a523c:	bd30      	pop	{r4, r5, pc}
 80a523e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5242:	bf1a      	itte	ne
 80a5244:	4619      	movne	r1, r3
 80a5246:	4610      	movne	r0, r2
 80a5248:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a524c:	bf1c      	itt	ne
 80a524e:	460b      	movne	r3, r1
 80a5250:	4602      	movne	r2, r0
 80a5252:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5256:	bf06      	itte	eq
 80a5258:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a525c:	ea91 0f03 	teqeq	r1, r3
 80a5260:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a5264:	bd30      	pop	{r4, r5, pc}
 80a5266:	bf00      	nop

080a5268 <__aeabi_ui2d>:
 80a5268:	f090 0f00 	teq	r0, #0
 80a526c:	bf04      	itt	eq
 80a526e:	2100      	moveq	r1, #0
 80a5270:	4770      	bxeq	lr
 80a5272:	b530      	push	{r4, r5, lr}
 80a5274:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5278:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a527c:	f04f 0500 	mov.w	r5, #0
 80a5280:	f04f 0100 	mov.w	r1, #0
 80a5284:	e750      	b.n	80a5128 <__adddf3+0x138>
 80a5286:	bf00      	nop

080a5288 <__aeabi_i2d>:
 80a5288:	f090 0f00 	teq	r0, #0
 80a528c:	bf04      	itt	eq
 80a528e:	2100      	moveq	r1, #0
 80a5290:	4770      	bxeq	lr
 80a5292:	b530      	push	{r4, r5, lr}
 80a5294:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5298:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a529c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a52a0:	bf48      	it	mi
 80a52a2:	4240      	negmi	r0, r0
 80a52a4:	f04f 0100 	mov.w	r1, #0
 80a52a8:	e73e      	b.n	80a5128 <__adddf3+0x138>
 80a52aa:	bf00      	nop

080a52ac <__aeabi_f2d>:
 80a52ac:	0042      	lsls	r2, r0, #1
 80a52ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a52b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a52b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a52ba:	bf1f      	itttt	ne
 80a52bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a52c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a52c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a52c8:	4770      	bxne	lr
 80a52ca:	f092 0f00 	teq	r2, #0
 80a52ce:	bf14      	ite	ne
 80a52d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a52d4:	4770      	bxeq	lr
 80a52d6:	b530      	push	{r4, r5, lr}
 80a52d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a52dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a52e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a52e4:	e720      	b.n	80a5128 <__adddf3+0x138>
 80a52e6:	bf00      	nop

080a52e8 <__aeabi_ul2d>:
 80a52e8:	ea50 0201 	orrs.w	r2, r0, r1
 80a52ec:	bf08      	it	eq
 80a52ee:	4770      	bxeq	lr
 80a52f0:	b530      	push	{r4, r5, lr}
 80a52f2:	f04f 0500 	mov.w	r5, #0
 80a52f6:	e00a      	b.n	80a530e <__aeabi_l2d+0x16>

080a52f8 <__aeabi_l2d>:
 80a52f8:	ea50 0201 	orrs.w	r2, r0, r1
 80a52fc:	bf08      	it	eq
 80a52fe:	4770      	bxeq	lr
 80a5300:	b530      	push	{r4, r5, lr}
 80a5302:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a5306:	d502      	bpl.n	80a530e <__aeabi_l2d+0x16>
 80a5308:	4240      	negs	r0, r0
 80a530a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a530e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5312:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5316:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a531a:	f43f aedc 	beq.w	80a50d6 <__adddf3+0xe6>
 80a531e:	f04f 0203 	mov.w	r2, #3
 80a5322:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a5326:	bf18      	it	ne
 80a5328:	3203      	addne	r2, #3
 80a532a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a532e:	bf18      	it	ne
 80a5330:	3203      	addne	r2, #3
 80a5332:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a5336:	f1c2 0320 	rsb	r3, r2, #32
 80a533a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a533e:	fa20 f002 	lsr.w	r0, r0, r2
 80a5342:	fa01 fe03 	lsl.w	lr, r1, r3
 80a5346:	ea40 000e 	orr.w	r0, r0, lr
 80a534a:	fa21 f102 	lsr.w	r1, r1, r2
 80a534e:	4414      	add	r4, r2
 80a5350:	e6c1      	b.n	80a50d6 <__adddf3+0xe6>
 80a5352:	bf00      	nop

080a5354 <__aeabi_dmul>:
 80a5354:	b570      	push	{r4, r5, r6, lr}
 80a5356:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a535a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a535e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5362:	bf1d      	ittte	ne
 80a5364:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5368:	ea94 0f0c 	teqne	r4, ip
 80a536c:	ea95 0f0c 	teqne	r5, ip
 80a5370:	f000 f8de 	bleq	80a5530 <__aeabi_dmul+0x1dc>
 80a5374:	442c      	add	r4, r5
 80a5376:	ea81 0603 	eor.w	r6, r1, r3
 80a537a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a537e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a5382:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a5386:	bf18      	it	ne
 80a5388:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a538c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a5394:	d038      	beq.n	80a5408 <__aeabi_dmul+0xb4>
 80a5396:	fba0 ce02 	umull	ip, lr, r0, r2
 80a539a:	f04f 0500 	mov.w	r5, #0
 80a539e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a53a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a53a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a53aa:	f04f 0600 	mov.w	r6, #0
 80a53ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a53b2:	f09c 0f00 	teq	ip, #0
 80a53b6:	bf18      	it	ne
 80a53b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a53bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a53c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a53c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a53c8:	d204      	bcs.n	80a53d4 <__aeabi_dmul+0x80>
 80a53ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a53ce:	416d      	adcs	r5, r5
 80a53d0:	eb46 0606 	adc.w	r6, r6, r6
 80a53d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a53d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a53dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a53e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a53e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a53e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a53ec:	bf88      	it	hi
 80a53ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a53f2:	d81e      	bhi.n	80a5432 <__aeabi_dmul+0xde>
 80a53f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a53f8:	bf08      	it	eq
 80a53fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a53fe:	f150 0000 	adcs.w	r0, r0, #0
 80a5402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5406:	bd70      	pop	{r4, r5, r6, pc}
 80a5408:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a540c:	ea46 0101 	orr.w	r1, r6, r1
 80a5410:	ea40 0002 	orr.w	r0, r0, r2
 80a5414:	ea81 0103 	eor.w	r1, r1, r3
 80a5418:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a541c:	bfc2      	ittt	gt
 80a541e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5422:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5426:	bd70      	popgt	{r4, r5, r6, pc}
 80a5428:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a542c:	f04f 0e00 	mov.w	lr, #0
 80a5430:	3c01      	subs	r4, #1
 80a5432:	f300 80ab 	bgt.w	80a558c <__aeabi_dmul+0x238>
 80a5436:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a543a:	bfde      	ittt	le
 80a543c:	2000      	movle	r0, #0
 80a543e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a5442:	bd70      	pople	{r4, r5, r6, pc}
 80a5444:	f1c4 0400 	rsb	r4, r4, #0
 80a5448:	3c20      	subs	r4, #32
 80a544a:	da35      	bge.n	80a54b8 <__aeabi_dmul+0x164>
 80a544c:	340c      	adds	r4, #12
 80a544e:	dc1b      	bgt.n	80a5488 <__aeabi_dmul+0x134>
 80a5450:	f104 0414 	add.w	r4, r4, #20
 80a5454:	f1c4 0520 	rsb	r5, r4, #32
 80a5458:	fa00 f305 	lsl.w	r3, r0, r5
 80a545c:	fa20 f004 	lsr.w	r0, r0, r4
 80a5460:	fa01 f205 	lsl.w	r2, r1, r5
 80a5464:	ea40 0002 	orr.w	r0, r0, r2
 80a5468:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a546c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5470:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5474:	fa21 f604 	lsr.w	r6, r1, r4
 80a5478:	eb42 0106 	adc.w	r1, r2, r6
 80a547c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5480:	bf08      	it	eq
 80a5482:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5486:	bd70      	pop	{r4, r5, r6, pc}
 80a5488:	f1c4 040c 	rsb	r4, r4, #12
 80a548c:	f1c4 0520 	rsb	r5, r4, #32
 80a5490:	fa00 f304 	lsl.w	r3, r0, r4
 80a5494:	fa20 f005 	lsr.w	r0, r0, r5
 80a5498:	fa01 f204 	lsl.w	r2, r1, r4
 80a549c:	ea40 0002 	orr.w	r0, r0, r2
 80a54a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a54a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a54a8:	f141 0100 	adc.w	r1, r1, #0
 80a54ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a54b0:	bf08      	it	eq
 80a54b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a54b6:	bd70      	pop	{r4, r5, r6, pc}
 80a54b8:	f1c4 0520 	rsb	r5, r4, #32
 80a54bc:	fa00 f205 	lsl.w	r2, r0, r5
 80a54c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a54c4:	fa20 f304 	lsr.w	r3, r0, r4
 80a54c8:	fa01 f205 	lsl.w	r2, r1, r5
 80a54cc:	ea43 0302 	orr.w	r3, r3, r2
 80a54d0:	fa21 f004 	lsr.w	r0, r1, r4
 80a54d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a54d8:	fa21 f204 	lsr.w	r2, r1, r4
 80a54dc:	ea20 0002 	bic.w	r0, r0, r2
 80a54e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a54e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a54e8:	bf08      	it	eq
 80a54ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a54ee:	bd70      	pop	{r4, r5, r6, pc}
 80a54f0:	f094 0f00 	teq	r4, #0
 80a54f4:	d10f      	bne.n	80a5516 <__aeabi_dmul+0x1c2>
 80a54f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a54fa:	0040      	lsls	r0, r0, #1
 80a54fc:	eb41 0101 	adc.w	r1, r1, r1
 80a5500:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5504:	bf08      	it	eq
 80a5506:	3c01      	subeq	r4, #1
 80a5508:	d0f7      	beq.n	80a54fa <__aeabi_dmul+0x1a6>
 80a550a:	ea41 0106 	orr.w	r1, r1, r6
 80a550e:	f095 0f00 	teq	r5, #0
 80a5512:	bf18      	it	ne
 80a5514:	4770      	bxne	lr
 80a5516:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a551a:	0052      	lsls	r2, r2, #1
 80a551c:	eb43 0303 	adc.w	r3, r3, r3
 80a5520:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a5524:	bf08      	it	eq
 80a5526:	3d01      	subeq	r5, #1
 80a5528:	d0f7      	beq.n	80a551a <__aeabi_dmul+0x1c6>
 80a552a:	ea43 0306 	orr.w	r3, r3, r6
 80a552e:	4770      	bx	lr
 80a5530:	ea94 0f0c 	teq	r4, ip
 80a5534:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5538:	bf18      	it	ne
 80a553a:	ea95 0f0c 	teqne	r5, ip
 80a553e:	d00c      	beq.n	80a555a <__aeabi_dmul+0x206>
 80a5540:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5544:	bf18      	it	ne
 80a5546:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a554a:	d1d1      	bne.n	80a54f0 <__aeabi_dmul+0x19c>
 80a554c:	ea81 0103 	eor.w	r1, r1, r3
 80a5550:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5554:	f04f 0000 	mov.w	r0, #0
 80a5558:	bd70      	pop	{r4, r5, r6, pc}
 80a555a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a555e:	bf06      	itte	eq
 80a5560:	4610      	moveq	r0, r2
 80a5562:	4619      	moveq	r1, r3
 80a5564:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5568:	d019      	beq.n	80a559e <__aeabi_dmul+0x24a>
 80a556a:	ea94 0f0c 	teq	r4, ip
 80a556e:	d102      	bne.n	80a5576 <__aeabi_dmul+0x222>
 80a5570:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a5574:	d113      	bne.n	80a559e <__aeabi_dmul+0x24a>
 80a5576:	ea95 0f0c 	teq	r5, ip
 80a557a:	d105      	bne.n	80a5588 <__aeabi_dmul+0x234>
 80a557c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5580:	bf1c      	itt	ne
 80a5582:	4610      	movne	r0, r2
 80a5584:	4619      	movne	r1, r3
 80a5586:	d10a      	bne.n	80a559e <__aeabi_dmul+0x24a>
 80a5588:	ea81 0103 	eor.w	r1, r1, r3
 80a558c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5590:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5594:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5598:	f04f 0000 	mov.w	r0, #0
 80a559c:	bd70      	pop	{r4, r5, r6, pc}
 80a559e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a55a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a55a6:	bd70      	pop	{r4, r5, r6, pc}

080a55a8 <__aeabi_ddiv>:
 80a55a8:	b570      	push	{r4, r5, r6, lr}
 80a55aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a55ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a55b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a55b6:	bf1d      	ittte	ne
 80a55b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a55bc:	ea94 0f0c 	teqne	r4, ip
 80a55c0:	ea95 0f0c 	teqne	r5, ip
 80a55c4:	f000 f8a7 	bleq	80a5716 <__aeabi_ddiv+0x16e>
 80a55c8:	eba4 0405 	sub.w	r4, r4, r5
 80a55cc:	ea81 0e03 	eor.w	lr, r1, r3
 80a55d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a55d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a55d8:	f000 8088 	beq.w	80a56ec <__aeabi_ddiv+0x144>
 80a55dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a55e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a55e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a55e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a55ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a55f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a55f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a55f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a55fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a5600:	429d      	cmp	r5, r3
 80a5602:	bf08      	it	eq
 80a5604:	4296      	cmpeq	r6, r2
 80a5606:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a560a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a560e:	d202      	bcs.n	80a5616 <__aeabi_ddiv+0x6e>
 80a5610:	085b      	lsrs	r3, r3, #1
 80a5612:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5616:	1ab6      	subs	r6, r6, r2
 80a5618:	eb65 0503 	sbc.w	r5, r5, r3
 80a561c:	085b      	lsrs	r3, r3, #1
 80a561e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5622:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a5626:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a562a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a562e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5632:	bf22      	ittt	cs
 80a5634:	1ab6      	subcs	r6, r6, r2
 80a5636:	4675      	movcs	r5, lr
 80a5638:	ea40 000c 	orrcs.w	r0, r0, ip
 80a563c:	085b      	lsrs	r3, r3, #1
 80a563e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5642:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5646:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a564a:	bf22      	ittt	cs
 80a564c:	1ab6      	subcs	r6, r6, r2
 80a564e:	4675      	movcs	r5, lr
 80a5650:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5654:	085b      	lsrs	r3, r3, #1
 80a5656:	ea4f 0232 	mov.w	r2, r2, rrx
 80a565a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a565e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5662:	bf22      	ittt	cs
 80a5664:	1ab6      	subcs	r6, r6, r2
 80a5666:	4675      	movcs	r5, lr
 80a5668:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a566c:	085b      	lsrs	r3, r3, #1
 80a566e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5672:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5676:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a567a:	bf22      	ittt	cs
 80a567c:	1ab6      	subcs	r6, r6, r2
 80a567e:	4675      	movcs	r5, lr
 80a5680:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5684:	ea55 0e06 	orrs.w	lr, r5, r6
 80a5688:	d018      	beq.n	80a56bc <__aeabi_ddiv+0x114>
 80a568a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a568e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5692:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a5696:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a569a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a569e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a56a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a56a6:	d1c0      	bne.n	80a562a <__aeabi_ddiv+0x82>
 80a56a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a56ac:	d10b      	bne.n	80a56c6 <__aeabi_ddiv+0x11e>
 80a56ae:	ea41 0100 	orr.w	r1, r1, r0
 80a56b2:	f04f 0000 	mov.w	r0, #0
 80a56b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a56ba:	e7b6      	b.n	80a562a <__aeabi_ddiv+0x82>
 80a56bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a56c0:	bf04      	itt	eq
 80a56c2:	4301      	orreq	r1, r0
 80a56c4:	2000      	moveq	r0, #0
 80a56c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a56ca:	bf88      	it	hi
 80a56cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a56d0:	f63f aeaf 	bhi.w	80a5432 <__aeabi_dmul+0xde>
 80a56d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a56d8:	bf04      	itt	eq
 80a56da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a56de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a56e2:	f150 0000 	adcs.w	r0, r0, #0
 80a56e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a56ea:	bd70      	pop	{r4, r5, r6, pc}
 80a56ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a56f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a56f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a56f8:	bfc2      	ittt	gt
 80a56fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a56fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5702:	bd70      	popgt	{r4, r5, r6, pc}
 80a5704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5708:	f04f 0e00 	mov.w	lr, #0
 80a570c:	3c01      	subs	r4, #1
 80a570e:	e690      	b.n	80a5432 <__aeabi_dmul+0xde>
 80a5710:	ea45 0e06 	orr.w	lr, r5, r6
 80a5714:	e68d      	b.n	80a5432 <__aeabi_dmul+0xde>
 80a5716:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a571a:	ea94 0f0c 	teq	r4, ip
 80a571e:	bf08      	it	eq
 80a5720:	ea95 0f0c 	teqeq	r5, ip
 80a5724:	f43f af3b 	beq.w	80a559e <__aeabi_dmul+0x24a>
 80a5728:	ea94 0f0c 	teq	r4, ip
 80a572c:	d10a      	bne.n	80a5744 <__aeabi_ddiv+0x19c>
 80a572e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5732:	f47f af34 	bne.w	80a559e <__aeabi_dmul+0x24a>
 80a5736:	ea95 0f0c 	teq	r5, ip
 80a573a:	f47f af25 	bne.w	80a5588 <__aeabi_dmul+0x234>
 80a573e:	4610      	mov	r0, r2
 80a5740:	4619      	mov	r1, r3
 80a5742:	e72c      	b.n	80a559e <__aeabi_dmul+0x24a>
 80a5744:	ea95 0f0c 	teq	r5, ip
 80a5748:	d106      	bne.n	80a5758 <__aeabi_ddiv+0x1b0>
 80a574a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a574e:	f43f aefd 	beq.w	80a554c <__aeabi_dmul+0x1f8>
 80a5752:	4610      	mov	r0, r2
 80a5754:	4619      	mov	r1, r3
 80a5756:	e722      	b.n	80a559e <__aeabi_dmul+0x24a>
 80a5758:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a575c:	bf18      	it	ne
 80a575e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5762:	f47f aec5 	bne.w	80a54f0 <__aeabi_dmul+0x19c>
 80a5766:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a576a:	f47f af0d 	bne.w	80a5588 <__aeabi_dmul+0x234>
 80a576e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a5772:	f47f aeeb 	bne.w	80a554c <__aeabi_dmul+0x1f8>
 80a5776:	e712      	b.n	80a559e <__aeabi_dmul+0x24a>

080a5778 <__gedf2>:
 80a5778:	f04f 3cff 	mov.w	ip, #4294967295
 80a577c:	e006      	b.n	80a578c <__cmpdf2+0x4>
 80a577e:	bf00      	nop

080a5780 <__ledf2>:
 80a5780:	f04f 0c01 	mov.w	ip, #1
 80a5784:	e002      	b.n	80a578c <__cmpdf2+0x4>
 80a5786:	bf00      	nop

080a5788 <__cmpdf2>:
 80a5788:	f04f 0c01 	mov.w	ip, #1
 80a578c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5790:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a579c:	bf18      	it	ne
 80a579e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a57a2:	d01b      	beq.n	80a57dc <__cmpdf2+0x54>
 80a57a4:	b001      	add	sp, #4
 80a57a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a57aa:	bf0c      	ite	eq
 80a57ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a57b0:	ea91 0f03 	teqne	r1, r3
 80a57b4:	bf02      	ittt	eq
 80a57b6:	ea90 0f02 	teqeq	r0, r2
 80a57ba:	2000      	moveq	r0, #0
 80a57bc:	4770      	bxeq	lr
 80a57be:	f110 0f00 	cmn.w	r0, #0
 80a57c2:	ea91 0f03 	teq	r1, r3
 80a57c6:	bf58      	it	pl
 80a57c8:	4299      	cmppl	r1, r3
 80a57ca:	bf08      	it	eq
 80a57cc:	4290      	cmpeq	r0, r2
 80a57ce:	bf2c      	ite	cs
 80a57d0:	17d8      	asrcs	r0, r3, #31
 80a57d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a57d6:	f040 0001 	orr.w	r0, r0, #1
 80a57da:	4770      	bx	lr
 80a57dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a57e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a57e4:	d102      	bne.n	80a57ec <__cmpdf2+0x64>
 80a57e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a57ea:	d107      	bne.n	80a57fc <__cmpdf2+0x74>
 80a57ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a57f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a57f4:	d1d6      	bne.n	80a57a4 <__cmpdf2+0x1c>
 80a57f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a57fa:	d0d3      	beq.n	80a57a4 <__cmpdf2+0x1c>
 80a57fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5800:	4770      	bx	lr
 80a5802:	bf00      	nop

080a5804 <__aeabi_cdrcmple>:
 80a5804:	4684      	mov	ip, r0
 80a5806:	4610      	mov	r0, r2
 80a5808:	4662      	mov	r2, ip
 80a580a:	468c      	mov	ip, r1
 80a580c:	4619      	mov	r1, r3
 80a580e:	4663      	mov	r3, ip
 80a5810:	e000      	b.n	80a5814 <__aeabi_cdcmpeq>
 80a5812:	bf00      	nop

080a5814 <__aeabi_cdcmpeq>:
 80a5814:	b501      	push	{r0, lr}
 80a5816:	f7ff ffb7 	bl	80a5788 <__cmpdf2>
 80a581a:	2800      	cmp	r0, #0
 80a581c:	bf48      	it	mi
 80a581e:	f110 0f00 	cmnmi.w	r0, #0
 80a5822:	bd01      	pop	{r0, pc}

080a5824 <__aeabi_dcmpeq>:
 80a5824:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5828:	f7ff fff4 	bl	80a5814 <__aeabi_cdcmpeq>
 80a582c:	bf0c      	ite	eq
 80a582e:	2001      	moveq	r0, #1
 80a5830:	2000      	movne	r0, #0
 80a5832:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5836:	bf00      	nop

080a5838 <__aeabi_dcmplt>:
 80a5838:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a583c:	f7ff ffea 	bl	80a5814 <__aeabi_cdcmpeq>
 80a5840:	bf34      	ite	cc
 80a5842:	2001      	movcc	r0, #1
 80a5844:	2000      	movcs	r0, #0
 80a5846:	f85d fb08 	ldr.w	pc, [sp], #8
 80a584a:	bf00      	nop

080a584c <__aeabi_dcmple>:
 80a584c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5850:	f7ff ffe0 	bl	80a5814 <__aeabi_cdcmpeq>
 80a5854:	bf94      	ite	ls
 80a5856:	2001      	movls	r0, #1
 80a5858:	2000      	movhi	r0, #0
 80a585a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a585e:	bf00      	nop

080a5860 <__aeabi_dcmpge>:
 80a5860:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5864:	f7ff ffce 	bl	80a5804 <__aeabi_cdrcmple>
 80a5868:	bf94      	ite	ls
 80a586a:	2001      	movls	r0, #1
 80a586c:	2000      	movhi	r0, #0
 80a586e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5872:	bf00      	nop

080a5874 <__aeabi_dcmpgt>:
 80a5874:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5878:	f7ff ffc4 	bl	80a5804 <__aeabi_cdrcmple>
 80a587c:	bf34      	ite	cc
 80a587e:	2001      	movcc	r0, #1
 80a5880:	2000      	movcs	r0, #0
 80a5882:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5886:	bf00      	nop

080a5888 <__aeabi_dcmpun>:
 80a5888:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a588c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5890:	d102      	bne.n	80a5898 <__aeabi_dcmpun+0x10>
 80a5892:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5896:	d10a      	bne.n	80a58ae <__aeabi_dcmpun+0x26>
 80a5898:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a589c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a58a0:	d102      	bne.n	80a58a8 <__aeabi_dcmpun+0x20>
 80a58a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a58a6:	d102      	bne.n	80a58ae <__aeabi_dcmpun+0x26>
 80a58a8:	f04f 0000 	mov.w	r0, #0
 80a58ac:	4770      	bx	lr
 80a58ae:	f04f 0001 	mov.w	r0, #1
 80a58b2:	4770      	bx	lr

080a58b4 <__aeabi_d2uiz>:
 80a58b4:	004a      	lsls	r2, r1, #1
 80a58b6:	d211      	bcs.n	80a58dc <__aeabi_d2uiz+0x28>
 80a58b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a58bc:	d211      	bcs.n	80a58e2 <__aeabi_d2uiz+0x2e>
 80a58be:	d50d      	bpl.n	80a58dc <__aeabi_d2uiz+0x28>
 80a58c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a58c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a58c8:	d40e      	bmi.n	80a58e8 <__aeabi_d2uiz+0x34>
 80a58ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a58ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a58d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a58d6:	fa23 f002 	lsr.w	r0, r3, r2
 80a58da:	4770      	bx	lr
 80a58dc:	f04f 0000 	mov.w	r0, #0
 80a58e0:	4770      	bx	lr
 80a58e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a58e6:	d102      	bne.n	80a58ee <__aeabi_d2uiz+0x3a>
 80a58e8:	f04f 30ff 	mov.w	r0, #4294967295
 80a58ec:	4770      	bx	lr
 80a58ee:	f04f 0000 	mov.w	r0, #0
 80a58f2:	4770      	bx	lr

080a58f4 <__aeabi_d2f>:
 80a58f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a58f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a58fc:	bf24      	itt	cs
 80a58fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a5902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a5906:	d90d      	bls.n	80a5924 <__aeabi_d2f+0x30>
 80a5908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a590c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a5910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a5914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a5918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a591c:	bf08      	it	eq
 80a591e:	f020 0001 	biceq.w	r0, r0, #1
 80a5922:	4770      	bx	lr
 80a5924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a5928:	d121      	bne.n	80a596e <__aeabi_d2f+0x7a>
 80a592a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a592e:	bfbc      	itt	lt
 80a5930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a5934:	4770      	bxlt	lr
 80a5936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a593a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a593e:	f1c2 0218 	rsb	r2, r2, #24
 80a5942:	f1c2 0c20 	rsb	ip, r2, #32
 80a5946:	fa10 f30c 	lsls.w	r3, r0, ip
 80a594a:	fa20 f002 	lsr.w	r0, r0, r2
 80a594e:	bf18      	it	ne
 80a5950:	f040 0001 	orrne.w	r0, r0, #1
 80a5954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a595c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a5960:	ea40 000c 	orr.w	r0, r0, ip
 80a5964:	fa23 f302 	lsr.w	r3, r3, r2
 80a5968:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a596c:	e7cc      	b.n	80a5908 <__aeabi_d2f+0x14>
 80a596e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a5972:	d107      	bne.n	80a5984 <__aeabi_d2f+0x90>
 80a5974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a5978:	bf1e      	ittt	ne
 80a597a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a597e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a5982:	4770      	bxne	lr
 80a5984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a5988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a598c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5990:	4770      	bx	lr
 80a5992:	bf00      	nop

080a5994 <__aeabi_frsub>:
 80a5994:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a5998:	e002      	b.n	80a59a0 <__addsf3>
 80a599a:	bf00      	nop

080a599c <__aeabi_fsub>:
 80a599c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a59a0 <__addsf3>:
 80a59a0:	0042      	lsls	r2, r0, #1
 80a59a2:	bf1f      	itttt	ne
 80a59a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a59a8:	ea92 0f03 	teqne	r2, r3
 80a59ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a59b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a59b4:	d06a      	beq.n	80a5a8c <__addsf3+0xec>
 80a59b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a59ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a59be:	bfc1      	itttt	gt
 80a59c0:	18d2      	addgt	r2, r2, r3
 80a59c2:	4041      	eorgt	r1, r0
 80a59c4:	4048      	eorgt	r0, r1
 80a59c6:	4041      	eorgt	r1, r0
 80a59c8:	bfb8      	it	lt
 80a59ca:	425b      	neglt	r3, r3
 80a59cc:	2b19      	cmp	r3, #25
 80a59ce:	bf88      	it	hi
 80a59d0:	4770      	bxhi	lr
 80a59d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a59d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a59da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a59de:	bf18      	it	ne
 80a59e0:	4240      	negne	r0, r0
 80a59e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a59e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a59ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a59ee:	bf18      	it	ne
 80a59f0:	4249      	negne	r1, r1
 80a59f2:	ea92 0f03 	teq	r2, r3
 80a59f6:	d03f      	beq.n	80a5a78 <__addsf3+0xd8>
 80a59f8:	f1a2 0201 	sub.w	r2, r2, #1
 80a59fc:	fa41 fc03 	asr.w	ip, r1, r3
 80a5a00:	eb10 000c 	adds.w	r0, r0, ip
 80a5a04:	f1c3 0320 	rsb	r3, r3, #32
 80a5a08:	fa01 f103 	lsl.w	r1, r1, r3
 80a5a0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5a10:	d502      	bpl.n	80a5a18 <__addsf3+0x78>
 80a5a12:	4249      	negs	r1, r1
 80a5a14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a5a18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a5a1c:	d313      	bcc.n	80a5a46 <__addsf3+0xa6>
 80a5a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a5a22:	d306      	bcc.n	80a5a32 <__addsf3+0x92>
 80a5a24:	0840      	lsrs	r0, r0, #1
 80a5a26:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5a2a:	f102 0201 	add.w	r2, r2, #1
 80a5a2e:	2afe      	cmp	r2, #254	; 0xfe
 80a5a30:	d251      	bcs.n	80a5ad6 <__addsf3+0x136>
 80a5a32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a5a36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5a3a:	bf08      	it	eq
 80a5a3c:	f020 0001 	biceq.w	r0, r0, #1
 80a5a40:	ea40 0003 	orr.w	r0, r0, r3
 80a5a44:	4770      	bx	lr
 80a5a46:	0049      	lsls	r1, r1, #1
 80a5a48:	eb40 0000 	adc.w	r0, r0, r0
 80a5a4c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a5a50:	f1a2 0201 	sub.w	r2, r2, #1
 80a5a54:	d1ed      	bne.n	80a5a32 <__addsf3+0x92>
 80a5a56:	fab0 fc80 	clz	ip, r0
 80a5a5a:	f1ac 0c08 	sub.w	ip, ip, #8
 80a5a5e:	ebb2 020c 	subs.w	r2, r2, ip
 80a5a62:	fa00 f00c 	lsl.w	r0, r0, ip
 80a5a66:	bfaa      	itet	ge
 80a5a68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a5a6c:	4252      	neglt	r2, r2
 80a5a6e:	4318      	orrge	r0, r3
 80a5a70:	bfbc      	itt	lt
 80a5a72:	40d0      	lsrlt	r0, r2
 80a5a74:	4318      	orrlt	r0, r3
 80a5a76:	4770      	bx	lr
 80a5a78:	f092 0f00 	teq	r2, #0
 80a5a7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a5a80:	bf06      	itte	eq
 80a5a82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a5a86:	3201      	addeq	r2, #1
 80a5a88:	3b01      	subne	r3, #1
 80a5a8a:	e7b5      	b.n	80a59f8 <__addsf3+0x58>
 80a5a8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5a90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5a94:	bf18      	it	ne
 80a5a96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5a9a:	d021      	beq.n	80a5ae0 <__addsf3+0x140>
 80a5a9c:	ea92 0f03 	teq	r2, r3
 80a5aa0:	d004      	beq.n	80a5aac <__addsf3+0x10c>
 80a5aa2:	f092 0f00 	teq	r2, #0
 80a5aa6:	bf08      	it	eq
 80a5aa8:	4608      	moveq	r0, r1
 80a5aaa:	4770      	bx	lr
 80a5aac:	ea90 0f01 	teq	r0, r1
 80a5ab0:	bf1c      	itt	ne
 80a5ab2:	2000      	movne	r0, #0
 80a5ab4:	4770      	bxne	lr
 80a5ab6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a5aba:	d104      	bne.n	80a5ac6 <__addsf3+0x126>
 80a5abc:	0040      	lsls	r0, r0, #1
 80a5abe:	bf28      	it	cs
 80a5ac0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a5ac4:	4770      	bx	lr
 80a5ac6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a5aca:	bf3c      	itt	cc
 80a5acc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a5ad0:	4770      	bxcc	lr
 80a5ad2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5ad6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a5ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5ade:	4770      	bx	lr
 80a5ae0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a5ae4:	bf16      	itet	ne
 80a5ae6:	4608      	movne	r0, r1
 80a5ae8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a5aec:	4601      	movne	r1, r0
 80a5aee:	0242      	lsls	r2, r0, #9
 80a5af0:	bf06      	itte	eq
 80a5af2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a5af6:	ea90 0f01 	teqeq	r0, r1
 80a5afa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a5afe:	4770      	bx	lr

080a5b00 <__aeabi_ui2f>:
 80a5b00:	f04f 0300 	mov.w	r3, #0
 80a5b04:	e004      	b.n	80a5b10 <__aeabi_i2f+0x8>
 80a5b06:	bf00      	nop

080a5b08 <__aeabi_i2f>:
 80a5b08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a5b0c:	bf48      	it	mi
 80a5b0e:	4240      	negmi	r0, r0
 80a5b10:	ea5f 0c00 	movs.w	ip, r0
 80a5b14:	bf08      	it	eq
 80a5b16:	4770      	bxeq	lr
 80a5b18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a5b1c:	4601      	mov	r1, r0
 80a5b1e:	f04f 0000 	mov.w	r0, #0
 80a5b22:	e01c      	b.n	80a5b5e <__aeabi_l2f+0x2a>

080a5b24 <__aeabi_ul2f>:
 80a5b24:	ea50 0201 	orrs.w	r2, r0, r1
 80a5b28:	bf08      	it	eq
 80a5b2a:	4770      	bxeq	lr
 80a5b2c:	f04f 0300 	mov.w	r3, #0
 80a5b30:	e00a      	b.n	80a5b48 <__aeabi_l2f+0x14>
 80a5b32:	bf00      	nop

080a5b34 <__aeabi_l2f>:
 80a5b34:	ea50 0201 	orrs.w	r2, r0, r1
 80a5b38:	bf08      	it	eq
 80a5b3a:	4770      	bxeq	lr
 80a5b3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a5b40:	d502      	bpl.n	80a5b48 <__aeabi_l2f+0x14>
 80a5b42:	4240      	negs	r0, r0
 80a5b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5b48:	ea5f 0c01 	movs.w	ip, r1
 80a5b4c:	bf02      	ittt	eq
 80a5b4e:	4684      	moveq	ip, r0
 80a5b50:	4601      	moveq	r1, r0
 80a5b52:	2000      	moveq	r0, #0
 80a5b54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a5b58:	bf08      	it	eq
 80a5b5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a5b5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a5b62:	fabc f28c 	clz	r2, ip
 80a5b66:	3a08      	subs	r2, #8
 80a5b68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a5b6c:	db10      	blt.n	80a5b90 <__aeabi_l2f+0x5c>
 80a5b6e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5b72:	4463      	add	r3, ip
 80a5b74:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5b78:	f1c2 0220 	rsb	r2, r2, #32
 80a5b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5b80:	fa20 f202 	lsr.w	r2, r0, r2
 80a5b84:	eb43 0002 	adc.w	r0, r3, r2
 80a5b88:	bf08      	it	eq
 80a5b8a:	f020 0001 	biceq.w	r0, r0, #1
 80a5b8e:	4770      	bx	lr
 80a5b90:	f102 0220 	add.w	r2, r2, #32
 80a5b94:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5b98:	f1c2 0220 	rsb	r2, r2, #32
 80a5b9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a5ba0:	fa21 f202 	lsr.w	r2, r1, r2
 80a5ba4:	eb43 0002 	adc.w	r0, r3, r2
 80a5ba8:	bf08      	it	eq
 80a5baa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5bae:	4770      	bx	lr

080a5bb0 <__aeabi_fmul>:
 80a5bb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5bb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5bb8:	bf1e      	ittt	ne
 80a5bba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5bbe:	ea92 0f0c 	teqne	r2, ip
 80a5bc2:	ea93 0f0c 	teqne	r3, ip
 80a5bc6:	d06f      	beq.n	80a5ca8 <__aeabi_fmul+0xf8>
 80a5bc8:	441a      	add	r2, r3
 80a5bca:	ea80 0c01 	eor.w	ip, r0, r1
 80a5bce:	0240      	lsls	r0, r0, #9
 80a5bd0:	bf18      	it	ne
 80a5bd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a5bd6:	d01e      	beq.n	80a5c16 <__aeabi_fmul+0x66>
 80a5bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a5bdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a5be0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a5be4:	fba0 3101 	umull	r3, r1, r0, r1
 80a5be8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5bec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a5bf0:	bf3e      	ittt	cc
 80a5bf2:	0049      	lslcc	r1, r1, #1
 80a5bf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a5bf8:	005b      	lslcc	r3, r3, #1
 80a5bfa:	ea40 0001 	orr.w	r0, r0, r1
 80a5bfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a5c02:	2afd      	cmp	r2, #253	; 0xfd
 80a5c04:	d81d      	bhi.n	80a5c42 <__aeabi_fmul+0x92>
 80a5c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a5c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5c0e:	bf08      	it	eq
 80a5c10:	f020 0001 	biceq.w	r0, r0, #1
 80a5c14:	4770      	bx	lr
 80a5c16:	f090 0f00 	teq	r0, #0
 80a5c1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5c1e:	bf08      	it	eq
 80a5c20:	0249      	lsleq	r1, r1, #9
 80a5c22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5c26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a5c2a:	3a7f      	subs	r2, #127	; 0x7f
 80a5c2c:	bfc2      	ittt	gt
 80a5c2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5c32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5c36:	4770      	bxgt	lr
 80a5c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5c3c:	f04f 0300 	mov.w	r3, #0
 80a5c40:	3a01      	subs	r2, #1
 80a5c42:	dc5d      	bgt.n	80a5d00 <__aeabi_fmul+0x150>
 80a5c44:	f112 0f19 	cmn.w	r2, #25
 80a5c48:	bfdc      	itt	le
 80a5c4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a5c4e:	4770      	bxle	lr
 80a5c50:	f1c2 0200 	rsb	r2, r2, #0
 80a5c54:	0041      	lsls	r1, r0, #1
 80a5c56:	fa21 f102 	lsr.w	r1, r1, r2
 80a5c5a:	f1c2 0220 	rsb	r2, r2, #32
 80a5c5e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5c62:	ea5f 0031 	movs.w	r0, r1, rrx
 80a5c66:	f140 0000 	adc.w	r0, r0, #0
 80a5c6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a5c6e:	bf08      	it	eq
 80a5c70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5c74:	4770      	bx	lr
 80a5c76:	f092 0f00 	teq	r2, #0
 80a5c7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5c7e:	bf02      	ittt	eq
 80a5c80:	0040      	lsleq	r0, r0, #1
 80a5c82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5c86:	3a01      	subeq	r2, #1
 80a5c88:	d0f9      	beq.n	80a5c7e <__aeabi_fmul+0xce>
 80a5c8a:	ea40 000c 	orr.w	r0, r0, ip
 80a5c8e:	f093 0f00 	teq	r3, #0
 80a5c92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5c96:	bf02      	ittt	eq
 80a5c98:	0049      	lsleq	r1, r1, #1
 80a5c9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5c9e:	3b01      	subeq	r3, #1
 80a5ca0:	d0f9      	beq.n	80a5c96 <__aeabi_fmul+0xe6>
 80a5ca2:	ea41 010c 	orr.w	r1, r1, ip
 80a5ca6:	e78f      	b.n	80a5bc8 <__aeabi_fmul+0x18>
 80a5ca8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5cac:	ea92 0f0c 	teq	r2, ip
 80a5cb0:	bf18      	it	ne
 80a5cb2:	ea93 0f0c 	teqne	r3, ip
 80a5cb6:	d00a      	beq.n	80a5cce <__aeabi_fmul+0x11e>
 80a5cb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5cbc:	bf18      	it	ne
 80a5cbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5cc2:	d1d8      	bne.n	80a5c76 <__aeabi_fmul+0xc6>
 80a5cc4:	ea80 0001 	eor.w	r0, r0, r1
 80a5cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5ccc:	4770      	bx	lr
 80a5cce:	f090 0f00 	teq	r0, #0
 80a5cd2:	bf17      	itett	ne
 80a5cd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a5cd8:	4608      	moveq	r0, r1
 80a5cda:	f091 0f00 	teqne	r1, #0
 80a5cde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a5ce2:	d014      	beq.n	80a5d0e <__aeabi_fmul+0x15e>
 80a5ce4:	ea92 0f0c 	teq	r2, ip
 80a5ce8:	d101      	bne.n	80a5cee <__aeabi_fmul+0x13e>
 80a5cea:	0242      	lsls	r2, r0, #9
 80a5cec:	d10f      	bne.n	80a5d0e <__aeabi_fmul+0x15e>
 80a5cee:	ea93 0f0c 	teq	r3, ip
 80a5cf2:	d103      	bne.n	80a5cfc <__aeabi_fmul+0x14c>
 80a5cf4:	024b      	lsls	r3, r1, #9
 80a5cf6:	bf18      	it	ne
 80a5cf8:	4608      	movne	r0, r1
 80a5cfa:	d108      	bne.n	80a5d0e <__aeabi_fmul+0x15e>
 80a5cfc:	ea80 0001 	eor.w	r0, r0, r1
 80a5d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5d04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5d0c:	4770      	bx	lr
 80a5d0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5d12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a5d16:	4770      	bx	lr

080a5d18 <__aeabi_fdiv>:
 80a5d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5d20:	bf1e      	ittt	ne
 80a5d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5d26:	ea92 0f0c 	teqne	r2, ip
 80a5d2a:	ea93 0f0c 	teqne	r3, ip
 80a5d2e:	d069      	beq.n	80a5e04 <__aeabi_fdiv+0xec>
 80a5d30:	eba2 0203 	sub.w	r2, r2, r3
 80a5d34:	ea80 0c01 	eor.w	ip, r0, r1
 80a5d38:	0249      	lsls	r1, r1, #9
 80a5d3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a5d3e:	d037      	beq.n	80a5db0 <__aeabi_fdiv+0x98>
 80a5d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a5d44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a5d48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a5d4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5d50:	428b      	cmp	r3, r1
 80a5d52:	bf38      	it	cc
 80a5d54:	005b      	lslcc	r3, r3, #1
 80a5d56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a5d5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a5d5e:	428b      	cmp	r3, r1
 80a5d60:	bf24      	itt	cs
 80a5d62:	1a5b      	subcs	r3, r3, r1
 80a5d64:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5d68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a5d6c:	bf24      	itt	cs
 80a5d6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a5d72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5d76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a5d7a:	bf24      	itt	cs
 80a5d7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a5d80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5d84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a5d88:	bf24      	itt	cs
 80a5d8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a5d8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5d92:	011b      	lsls	r3, r3, #4
 80a5d94:	bf18      	it	ne
 80a5d96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a5d9a:	d1e0      	bne.n	80a5d5e <__aeabi_fdiv+0x46>
 80a5d9c:	2afd      	cmp	r2, #253	; 0xfd
 80a5d9e:	f63f af50 	bhi.w	80a5c42 <__aeabi_fmul+0x92>
 80a5da2:	428b      	cmp	r3, r1
 80a5da4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5da8:	bf08      	it	eq
 80a5daa:	f020 0001 	biceq.w	r0, r0, #1
 80a5dae:	4770      	bx	lr
 80a5db0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5db4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5db8:	327f      	adds	r2, #127	; 0x7f
 80a5dba:	bfc2      	ittt	gt
 80a5dbc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5dc0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5dc4:	4770      	bxgt	lr
 80a5dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5dca:	f04f 0300 	mov.w	r3, #0
 80a5dce:	3a01      	subs	r2, #1
 80a5dd0:	e737      	b.n	80a5c42 <__aeabi_fmul+0x92>
 80a5dd2:	f092 0f00 	teq	r2, #0
 80a5dd6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5dda:	bf02      	ittt	eq
 80a5ddc:	0040      	lsleq	r0, r0, #1
 80a5dde:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5de2:	3a01      	subeq	r2, #1
 80a5de4:	d0f9      	beq.n	80a5dda <__aeabi_fdiv+0xc2>
 80a5de6:	ea40 000c 	orr.w	r0, r0, ip
 80a5dea:	f093 0f00 	teq	r3, #0
 80a5dee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5df2:	bf02      	ittt	eq
 80a5df4:	0049      	lsleq	r1, r1, #1
 80a5df6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5dfa:	3b01      	subeq	r3, #1
 80a5dfc:	d0f9      	beq.n	80a5df2 <__aeabi_fdiv+0xda>
 80a5dfe:	ea41 010c 	orr.w	r1, r1, ip
 80a5e02:	e795      	b.n	80a5d30 <__aeabi_fdiv+0x18>
 80a5e04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5e08:	ea92 0f0c 	teq	r2, ip
 80a5e0c:	d108      	bne.n	80a5e20 <__aeabi_fdiv+0x108>
 80a5e0e:	0242      	lsls	r2, r0, #9
 80a5e10:	f47f af7d 	bne.w	80a5d0e <__aeabi_fmul+0x15e>
 80a5e14:	ea93 0f0c 	teq	r3, ip
 80a5e18:	f47f af70 	bne.w	80a5cfc <__aeabi_fmul+0x14c>
 80a5e1c:	4608      	mov	r0, r1
 80a5e1e:	e776      	b.n	80a5d0e <__aeabi_fmul+0x15e>
 80a5e20:	ea93 0f0c 	teq	r3, ip
 80a5e24:	d104      	bne.n	80a5e30 <__aeabi_fdiv+0x118>
 80a5e26:	024b      	lsls	r3, r1, #9
 80a5e28:	f43f af4c 	beq.w	80a5cc4 <__aeabi_fmul+0x114>
 80a5e2c:	4608      	mov	r0, r1
 80a5e2e:	e76e      	b.n	80a5d0e <__aeabi_fmul+0x15e>
 80a5e30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5e34:	bf18      	it	ne
 80a5e36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5e3a:	d1ca      	bne.n	80a5dd2 <__aeabi_fdiv+0xba>
 80a5e3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5e40:	f47f af5c 	bne.w	80a5cfc <__aeabi_fmul+0x14c>
 80a5e44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a5e48:	f47f af3c 	bne.w	80a5cc4 <__aeabi_fmul+0x114>
 80a5e4c:	e75f      	b.n	80a5d0e <__aeabi_fmul+0x15e>
 80a5e4e:	bf00      	nop

080a5e50 <__gesf2>:
 80a5e50:	f04f 3cff 	mov.w	ip, #4294967295
 80a5e54:	e006      	b.n	80a5e64 <__cmpsf2+0x4>
 80a5e56:	bf00      	nop

080a5e58 <__lesf2>:
 80a5e58:	f04f 0c01 	mov.w	ip, #1
 80a5e5c:	e002      	b.n	80a5e64 <__cmpsf2+0x4>
 80a5e5e:	bf00      	nop

080a5e60 <__cmpsf2>:
 80a5e60:	f04f 0c01 	mov.w	ip, #1
 80a5e64:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5e68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a5e6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5e70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5e74:	bf18      	it	ne
 80a5e76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5e7a:	d011      	beq.n	80a5ea0 <__cmpsf2+0x40>
 80a5e7c:	b001      	add	sp, #4
 80a5e7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a5e82:	bf18      	it	ne
 80a5e84:	ea90 0f01 	teqne	r0, r1
 80a5e88:	bf58      	it	pl
 80a5e8a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a5e8e:	bf88      	it	hi
 80a5e90:	17c8      	asrhi	r0, r1, #31
 80a5e92:	bf38      	it	cc
 80a5e94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a5e98:	bf18      	it	ne
 80a5e9a:	f040 0001 	orrne.w	r0, r0, #1
 80a5e9e:	4770      	bx	lr
 80a5ea0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5ea4:	d102      	bne.n	80a5eac <__cmpsf2+0x4c>
 80a5ea6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a5eaa:	d105      	bne.n	80a5eb8 <__cmpsf2+0x58>
 80a5eac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a5eb0:	d1e4      	bne.n	80a5e7c <__cmpsf2+0x1c>
 80a5eb2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a5eb6:	d0e1      	beq.n	80a5e7c <__cmpsf2+0x1c>
 80a5eb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5ebc:	4770      	bx	lr
 80a5ebe:	bf00      	nop

080a5ec0 <__aeabi_cfrcmple>:
 80a5ec0:	4684      	mov	ip, r0
 80a5ec2:	4608      	mov	r0, r1
 80a5ec4:	4661      	mov	r1, ip
 80a5ec6:	e7ff      	b.n	80a5ec8 <__aeabi_cfcmpeq>

080a5ec8 <__aeabi_cfcmpeq>:
 80a5ec8:	b50f      	push	{r0, r1, r2, r3, lr}
 80a5eca:	f7ff ffc9 	bl	80a5e60 <__cmpsf2>
 80a5ece:	2800      	cmp	r0, #0
 80a5ed0:	bf48      	it	mi
 80a5ed2:	f110 0f00 	cmnmi.w	r0, #0
 80a5ed6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a5ed8 <__aeabi_fcmpeq>:
 80a5ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5edc:	f7ff fff4 	bl	80a5ec8 <__aeabi_cfcmpeq>
 80a5ee0:	bf0c      	ite	eq
 80a5ee2:	2001      	moveq	r0, #1
 80a5ee4:	2000      	movne	r0, #0
 80a5ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5eea:	bf00      	nop

080a5eec <__aeabi_fcmplt>:
 80a5eec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ef0:	f7ff ffea 	bl	80a5ec8 <__aeabi_cfcmpeq>
 80a5ef4:	bf34      	ite	cc
 80a5ef6:	2001      	movcc	r0, #1
 80a5ef8:	2000      	movcs	r0, #0
 80a5efa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5efe:	bf00      	nop

080a5f00 <__aeabi_fcmple>:
 80a5f00:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f04:	f7ff ffe0 	bl	80a5ec8 <__aeabi_cfcmpeq>
 80a5f08:	bf94      	ite	ls
 80a5f0a:	2001      	movls	r0, #1
 80a5f0c:	2000      	movhi	r0, #0
 80a5f0e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f12:	bf00      	nop

080a5f14 <__aeabi_fcmpge>:
 80a5f14:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f18:	f7ff ffd2 	bl	80a5ec0 <__aeabi_cfrcmple>
 80a5f1c:	bf94      	ite	ls
 80a5f1e:	2001      	movls	r0, #1
 80a5f20:	2000      	movhi	r0, #0
 80a5f22:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f26:	bf00      	nop

080a5f28 <__aeabi_fcmpgt>:
 80a5f28:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f2c:	f7ff ffc8 	bl	80a5ec0 <__aeabi_cfrcmple>
 80a5f30:	bf34      	ite	cc
 80a5f32:	2001      	movcc	r0, #1
 80a5f34:	2000      	movcs	r0, #0
 80a5f36:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f3a:	bf00      	nop

080a5f3c <__cxa_atexit>:
 80a5f3c:	b510      	push	{r4, lr}
 80a5f3e:	4c05      	ldr	r4, [pc, #20]	; (80a5f54 <__cxa_atexit+0x18>)
 80a5f40:	4613      	mov	r3, r2
 80a5f42:	b12c      	cbz	r4, 80a5f50 <__cxa_atexit+0x14>
 80a5f44:	460a      	mov	r2, r1
 80a5f46:	4601      	mov	r1, r0
 80a5f48:	2002      	movs	r0, #2
 80a5f4a:	f3af 8000 	nop.w
 80a5f4e:	bd10      	pop	{r4, pc}
 80a5f50:	4620      	mov	r0, r4
 80a5f52:	bd10      	pop	{r4, pc}
 80a5f54:	00000000 	.word	0x00000000

080a5f58 <memcpy>:
 80a5f58:	b510      	push	{r4, lr}
 80a5f5a:	1e43      	subs	r3, r0, #1
 80a5f5c:	440a      	add	r2, r1
 80a5f5e:	4291      	cmp	r1, r2
 80a5f60:	d004      	beq.n	80a5f6c <memcpy+0x14>
 80a5f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a5f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a5f6a:	e7f8      	b.n	80a5f5e <memcpy+0x6>
 80a5f6c:	bd10      	pop	{r4, pc}

080a5f6e <memset>:
 80a5f6e:	4603      	mov	r3, r0
 80a5f70:	4402      	add	r2, r0
 80a5f72:	4293      	cmp	r3, r2
 80a5f74:	d002      	beq.n	80a5f7c <memset+0xe>
 80a5f76:	f803 1b01 	strb.w	r1, [r3], #1
 80a5f7a:	e7fa      	b.n	80a5f72 <memset+0x4>
 80a5f7c:	4770      	bx	lr
	...

080a5f80 <srand>:
 80a5f80:	b538      	push	{r3, r4, r5, lr}
 80a5f82:	4b12      	ldr	r3, [pc, #72]	; (80a5fcc <srand+0x4c>)
 80a5f84:	4605      	mov	r5, r0
 80a5f86:	681c      	ldr	r4, [r3, #0]
 80a5f88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5f8a:	b9d3      	cbnz	r3, 80a5fc2 <srand+0x42>
 80a5f8c:	2018      	movs	r0, #24
 80a5f8e:	f7fc fa03 	bl	80a2398 <malloc>
 80a5f92:	f243 330e 	movw	r3, #13070	; 0x330e
 80a5f96:	63a0      	str	r0, [r4, #56]	; 0x38
 80a5f98:	8003      	strh	r3, [r0, #0]
 80a5f9a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a5f9e:	8043      	strh	r3, [r0, #2]
 80a5fa0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a5fa4:	8083      	strh	r3, [r0, #4]
 80a5fa6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a5faa:	80c3      	strh	r3, [r0, #6]
 80a5fac:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a5fb0:	8103      	strh	r3, [r0, #8]
 80a5fb2:	2305      	movs	r3, #5
 80a5fb4:	8143      	strh	r3, [r0, #10]
 80a5fb6:	230b      	movs	r3, #11
 80a5fb8:	8183      	strh	r3, [r0, #12]
 80a5fba:	2201      	movs	r2, #1
 80a5fbc:	2300      	movs	r3, #0
 80a5fbe:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a5fc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5fc4:	2200      	movs	r2, #0
 80a5fc6:	611d      	str	r5, [r3, #16]
 80a5fc8:	615a      	str	r2, [r3, #20]
 80a5fca:	bd38      	pop	{r3, r4, r5, pc}
 80a5fcc:	20000068 	.word	0x20000068

080a5fd0 <strcmp>:
 80a5fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a5fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a5fd8:	2a01      	cmp	r2, #1
 80a5fda:	bf28      	it	cs
 80a5fdc:	429a      	cmpcs	r2, r3
 80a5fde:	d0f7      	beq.n	80a5fd0 <strcmp>
 80a5fe0:	1ad0      	subs	r0, r2, r3
 80a5fe2:	4770      	bx	lr

080a5fe4 <strcpy>:
 80a5fe4:	4603      	mov	r3, r0
 80a5fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a5fea:	f803 2b01 	strb.w	r2, [r3], #1
 80a5fee:	2a00      	cmp	r2, #0
 80a5ff0:	d1f9      	bne.n	80a5fe6 <strcpy+0x2>
 80a5ff2:	4770      	bx	lr

080a5ff4 <strdup>:
 80a5ff4:	4b02      	ldr	r3, [pc, #8]	; (80a6000 <strdup+0xc>)
 80a5ff6:	4601      	mov	r1, r0
 80a5ff8:	6818      	ldr	r0, [r3, #0]
 80a5ffa:	f000 b803 	b.w	80a6004 <_strdup_r>
 80a5ffe:	bf00      	nop
 80a6000:	20000068 	.word	0x20000068

080a6004 <_strdup_r>:
 80a6004:	b570      	push	{r4, r5, r6, lr}
 80a6006:	4606      	mov	r6, r0
 80a6008:	4608      	mov	r0, r1
 80a600a:	460c      	mov	r4, r1
 80a600c:	f000 f80d 	bl	80a602a <strlen>
 80a6010:	1c45      	adds	r5, r0, #1
 80a6012:	4629      	mov	r1, r5
 80a6014:	4630      	mov	r0, r6
 80a6016:	f7fc f9df 	bl	80a23d8 <_malloc_r>
 80a601a:	4606      	mov	r6, r0
 80a601c:	b118      	cbz	r0, 80a6026 <_strdup_r+0x22>
 80a601e:	462a      	mov	r2, r5
 80a6020:	4621      	mov	r1, r4
 80a6022:	f7ff ff99 	bl	80a5f58 <memcpy>
 80a6026:	4630      	mov	r0, r6
 80a6028:	bd70      	pop	{r4, r5, r6, pc}

080a602a <strlen>:
 80a602a:	4603      	mov	r3, r0
 80a602c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a6030:	2a00      	cmp	r2, #0
 80a6032:	d1fb      	bne.n	80a602c <strlen+0x2>
 80a6034:	1a18      	subs	r0, r3, r0
 80a6036:	3801      	subs	r0, #1
 80a6038:	4770      	bx	lr

080a603a <link_code_end>:
	...

080a603c <dynalib_user>:
 80a603c:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a604c:	0000 0000 6572 6573 0074 6c61 006c 4b5b     ....reset.all.[K
 80a605c:	6572 626d 746f 3a5d 6d20 2079 616e 656d     rembot]: my name
 80a606c:	6920 2073 7300 6170 6b72 002f 7073 7261      is .spark/.spar
 80a607c:	2f6b 6564 6976 6563 6e2f 6d61 0065 495b     k/device/name.[I
 80a608c:	554d 3a5d 6f20 6c6e 6e69 0065 495b 554d     MU]: online.[IMU
 80a609c:	3a5d 6620 6961 656c 2064 6f74 6320 6d6f     ]: failed to com
 80a60ac:	756d 696e 6163 6574 5b00 4d49 5d55 203a     municate.[IMU]: 
 80a60bc:	6f52 6c6c 202c 6950 6374 2c68 5920 7761     Roll, Pitch, Yaw
 80a60cc:	2c00 0020 7861 203a 2c00 6120 3a79 0020     ., .ax: ., ay: .
 80a60dc:	202c 7a61 203a 2000 7867 203a 2c00 6720     , az: . gx: ., g
 80a60ec:	3a79 0020 202c 7a67 203a 4900 756d 5b00     y: ., gz: .Imu.[
 80a60fc:	4752 4142 7320 6e65 6f73 5d72 2d20 4120     RGBA sensor] - A
 80a610c:	626d 6569 746e 7320 6e65 6f73 2072 7265     mbient sensor er
 80a611c:	6f72 0072 525b 4247 2041 6573 736e 726f     ror.[RGBA sensor
 80a612c:	205d 202d 6552 2064 6573 736e 726f 6520     ] - Red sensor e
 80a613c:	7272 726f 5b00 4752 4142 7320 6e65 6f73     rror.[RGBA senso
 80a614c:	5d72 2d20 4720 6572 6e65 7320 6e65 6f73     r] - Green senso
 80a615c:	2072 7265 6f72 0072 525b 4247 2041 6573     r error.[RGBA se
 80a616c:	736e 726f 205d 202d 6c42 6575 7320 6e65     nsor] - Blue sen
 80a617c:	6f73 2072 7265 6f72 0072 525b 4247 2041     sor error.[RGBA 
 80a618c:	6573 736e 726f 205d 202d 7250 786f 6d69     sensor] - Proxim
 80a619c:	7469 2079 6573 736e 726f 6520 7272 726f     ity sensor error
 80a61ac:	2d00 2d2d 2d2d 2d2d 2d2d 2d2d 202d 2000     .------------ . 
 80a61bc:	4752 4142 5320 6e65 6f73 2072 6156 756c     RGBA Sensor Valu
 80a61cc:	7365 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 4100     es------------.A
 80a61dc:	626d 6569 746e 203a 2000 207c 6552 3a64     mbient: . | Red:
 80a61ec:	0020 7c20 4720 6572 6e65 203a 2000 207c      . | Green: . | 
 80a61fc:	6c42 6575 203a 2000 207c 6944 7473 6e61     Blue: . | Distan
 80a620c:	6563 203a 2000 5348 2056 6156 756c 7365     ce: . HSV Values
 80a621c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 4800 6575     ------------.Hue
 80a622c:	203a 2000 207c 6153 7574 6172 6974 6e6f     : . | Saturation
 80a623c:	203a 2000 207c 6156 756c 3a65 0020 4320     : . | Value: . C
 80a624c:	6c6f 726f 203a 2000 6552 2064 2000 7247     olor: . Red . Gr
 80a625c:	6565 206e 2000 6c42 6575 0020 4e20 6e6f     een . Blue . Non
 80a626c:	2065 2000 4752 4142 5320 6e65 6f73 0072     e . RGBA Sensor.
 80a627c:	3a5d 0020 4752 4142 4600 6f72 746e 4600     ]: .RGBA.Front.F
 80a628c:	6f72 746e 6952 6867 0074 6552 7261 6952     rontRight.RearRi
 80a629c:	6867 0074 6552 7261 5200 6165 4c72 6665     ght.Rear.RearLef
 80a62ac:	0074 7246 6e6f 4c74 6665 0074 6f4e 656e     t.FrontLeft.None
 80a62bc:	5b00 4752 4142 7320 6e65 6f73 5d72 6f53     .[RGBA sensor]So
 80a62cc:	656d 6874 6e69 2067 6577 746e 7720 6f72     mething went wro
 80a62dc:	676e 6420 7275 6e69 2067 5041 5344 392d     ng during APDS-9
 80a62ec:	3639 2030 6e69 7469 7320 6e65 6f73 0072     960 init sensor.
 80a62fc:	525b 4247 2041 6573 736e 726f 535d 6d6f     [RGBA sensor]Som
 80a630c:	7465 6968 676e 7720 6e65 2074 7277 6e6f     ething went wron
 80a631c:	2067 7564 6972 676e 6c20 6769 7468 7320     g during light s
 80a632c:	6e65 6f73 2072 6e69 7469 2021 6573 736e     ensor init! sens
 80a633c:	726f 5b00 4752 4142 7320 6e65 6f73 5d72     or.[RGBA sensor]
 80a634c:	6f53 656d 6874 6e69 2067 6577 746e 7720     Something went w
 80a635c:	6f72 676e 7420 7972 6e69 2067 6f74 7320     rong trying to s
 80a636c:	7465 5020 4147 4e49 7320 6e65 6f73 2072     et PGAIN sensor 
 80a637c:	6573 736e 726f 5b00 4752 4142 7320 6e65     sensor.[RGBA sen
 80a638c:	6f73 5d72 6f53 656d 6874 6e69 2067 6577     sor]Something we
 80a639c:	746e 7720 6f72 676e 6420 7275 6e69 2067     nt wrong during 
 80a63ac:	6573 736e 726f 6920 696e 2174 7320 6e65     sensor init! sen
 80a63bc:	6f73 0072                                   sor.

080a63c0 <_ZTV8SPIClass>:
	...
 80a63c8:	23f9 080a 23fb 080a 6162 6475 5300 7265     .#...#..baud.Ser
 80a63d8:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80a63e8:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80a63f8:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80a6408:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80a6418:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80a6428:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80a6438:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80a6448:	0070 3025 3031 2075 5d00 0020 6425 2800     p.%010u .] .%d.(
 80a6458:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a6468:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 80a6478:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
 80a6488:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
 80a6498:	666e 006f 6177 6e72 7000 6e61 6369 5a00     nfo.warn.panic.Z
 80a64a8:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
 80a64b8:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a64c8:	7361 7463 6d69 0065                         asctime.

080a64d0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a64d8:	28c5 080a 28cb 080a 290f 080a 28d9 080a     .(...(...)...(..
 80a64e8:	28c7 080a                                   .(..

080a64ec <_ZTV9IPAddress>:
	...
 80a64f4:	2e79 080a 2e69 080a 2e6b 080a               y...i...k...

080a6500 <_ZTV9USBSerial>:
	...
 80a6508:	2f35 080a 2f85 080a 2f93 080a 25fb 080a     5/.../.../...%..
 80a6518:	2f71 080a 2f37 080a 2f4d 080a 2f7f 080a     q/..7/..M/.../..
 80a6528:	2f63 080a 2f31 080a                         c/..1/..

080a6530 <_ZTV11USARTSerial>:
	...
 80a6538:	30d5 080a 3125 080a 3133 080a 25fb 080a     .0..%1..31...%..
 80a6548:	30e9 080a 310b 080a 30f7 080a 311f 080a     .0...1...0...1..
 80a6558:	30d7 080a 30db 080a                         .0...0..

080a6560 <_ZTV7TwoWire>:
	...
 80a6568:	3201 080a 324b 080a 3223 080a 3203 080a     .2..K2..#2...2..
 80a6578:	322b 080a 3233 080a 323b 080a 3243 080a     +2..32..;2..C2..

080a6588 <_ZTVN5spark9WiFiClassE>:
	...
 80a6590:	3365 080a 335b 080a 3351 080a 32cf 080a     e3..[3..Q3...2..
 80a65a0:	26d1 080a 3345 080a 3339 080a 3331 080a     .&..E3..93..13..
 80a65b0:	3327 080a 331d 080a 32d9 080a               '3...3...2..

080a65bc <_ZTVN5spark12NetworkClassE>:
	...
 80a65c4:	3385 080a 338f 080a 3399 080a 33a3 080a     .3...3...3...3..
 80a65d4:	33ad 080a 33b9 080a 33c5 080a 33d1 080a     .3...3...3...3..
 80a65e4:	33d9 080a 33e3 080a 33ed 080a 6f70 0077     .3...3...3..pow.
 80a65f4:	7173 7472 0000 0000 0000 0000               sqrt........

080a6600 <atanlo>:
 80a6600:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
 80a6610:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

080a6620 <atanhi>:
 80a6620:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
 80a6630:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

080a6640 <TWO52>:
 80a6640:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080a6650 <__sf_fake_stdin>:
	...

080a6670 <__sf_fake_stdout>:
	...

080a6690 <__sf_fake_stderr>:
	...
 80a66b0:	0043                                        C.

080a66b2 <link_const_variable_data_end>:
	...

080a66b4 <link_constructors_location>:
 80a66b4:	080a0151 	.word	0x080a0151
 80a66b8:	080a01a9 	.word	0x080a01a9
 80a66bc:	080a034d 	.word	0x080a034d
 80a66c0:	080a0395 	.word	0x080a0395
 80a66c4:	080a0699 	.word	0x080a0699
 80a66c8:	080a08a9 	.word	0x080a08a9
 80a66cc:	080a09ad 	.word	0x080a09ad
 80a66d0:	080a0ae5 	.word	0x080a0ae5
 80a66d4:	080a0f07 	.word	0x080a0f07
 80a66d8:	080a0f69 	.word	0x080a0f69
 80a66dc:	080a0f6d 	.word	0x080a0f6d
 80a66e0:	080a1a19 	.word	0x080a1a19
 80a66e4:	080a1fa9 	.word	0x080a1fa9
 80a66e8:	080a2449 	.word	0x080a2449
 80a66ec:	080a2719 	.word	0x080a2719
 80a66f0:	080a2729 	.word	0x080a2729
 80a66f4:	080a2771 	.word	0x080a2771
 80a66f8:	080a3371 	.word	0x080a3371
 80a66fc:	080a343d 	.word	0x080a343d
 80a6700:	080a351d 	.word	0x080a351d
 80a6704:	080a3589 	.word	0x080a3589
 80a6708:	080a360d 	.word	0x080a360d
 80a670c:	080a3691 	.word	0x080a3691
 80a6710:	080a3755 	.word	0x080a3755
 80a6714:	080a3819 	.word	0x080a3819

080a6718 <link_constructors_end>:
	...
